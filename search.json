[{"title":"Git 合并远程分支","url":"/2022/03/29/Git-%E5%90%88%E5%B9%B6%E8%BF%9C%E7%A8%8B%E5%88%86%E6%94%AF/","content":"<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a><strong>前言</strong></h1><p>有的时候我们需要跟别人合作进行开发，然后分别使用不同的Git分支，等项目完成时，需要进行代码合并，就需要知道Git如何合并远程分支。</p>\n<a id=\"more\"></a>\n<h1 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a><strong>步骤</strong></h1><p>假设你本地在使用的分支为a(master也是一样的)，需要合并的远程分支为b</p>\n<h2 id=\"第一步\"><a href=\"#第一步\" class=\"headerlink\" title=\"第一步\"></a><strong>第一步</strong></h2><p>在本地新建一个与远程的分支b相同(被合并的版本)的分支b</p>\n<p><code>git checkout -b b origin/b</code></p>\n<p>该指令的意思：创建一个本地分支，并将远程分支放到该分支里面去。</p>\n<h2 id=\"第二步\"><a href=\"#第二步\" class=\"headerlink\" title=\"第二步\"></a><strong>第二步</strong></h2><p>将远程代码pull到本地</p>\n<p><code>git pull origin b</code></p>\n<h2 id=\"第三步\"><a href=\"#第三步\" class=\"headerlink\" title=\"第三步\"></a><strong>第三步</strong></h2><p>返回到你的分支a</p>\n<p><code>git checkout a</code></p>\n<h2 id=\"第四步\"><a href=\"#第四步\" class=\"headerlink\" title=\"第四步\"></a><strong>第四步</strong></h2><p>合并分支a与分支b</p>\n<p><code>git merge b</code></p>\n<p>该指令的意思：当前所在分支与b进行合并。</p>\n<h2 id=\"第五步\"><a href=\"#第五步\" class=\"headerlink\" title=\"第五步\"></a><strong>第五步</strong></h2><p>把本地的分支a同步到远程</p>\n<p><code>git push origin a</code></p>\n<h2 id=\"第五步-1\"><a href=\"#第五步-1\" class=\"headerlink\" title=\"第五步\"></a><strong>第五步</strong></h2><p>如果你不需要本地或者远程的分支，你可以查询并删除多余分支。</p>\n<h3 id=\"本地\"><a href=\"#本地\" class=\"headerlink\" title=\"本地\"></a><strong>本地</strong></h3><p>查询本地分支：</p>\n<p><code>git branch</code></p>\n<p>删除本地分支:</p>\n<p><code>git branch -D br</code></p>\n<h3 id=\"远程\"><a href=\"#远程\" class=\"headerlink\" title=\"远程\"></a><strong>远程</strong></h3><p>查询远程分支：</p>\n<p><code>git branch -a</code></p>\n<p>删除远程分支:</p>\n<p><code>git push origin :br  (origin 后面有空格)</code></p>\n<p>修改本地分支与远程分支的关联：</p>\n<p><code>git branch --set-upstream-to=origin/remote_branch  your_branch</code></p>\n","categories":["技术","Git版本控制"],"tags":["git"]},{"title":"Go ZapLogger——简单的使用","url":"/2022/06/01/Go-ZapLogger%E2%80%94%E2%80%94%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8/","content":"<h3 id=\"zap的安装\"><a href=\"#zap的安装\" class=\"headerlink\" title=\"zap的安装\"></a>zap的安装</h3><ul>\n<li>开源仓库地址 <a href=\"https://github.com/uber-go/zap\">https://github.com/uber-go/zap</a></li>\n<li>安装 go get -u go.uber.org/Zap</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"默认的三种设置\"><a href=\"#默认的三种设置\" class=\"headerlink\" title=\"默认的三种设置\"></a>默认的三种设置</h3><ul>\n<li>Example</li>\n<li>Development</li>\n<li>Production</li>\n</ul>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log := zap.NewExample()</span><br><span class=\"line\">    log.Debug(<span class=\"string\">&quot;This is a DEBUG message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message with fields&quot;</span>, zap.Strings(<span class=\"string\">&quot;region&quot;</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;us_west&quot;</span>&#125;), zap.Int(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    log.Warn(<span class=\"string\">&quot;This is a WARN message&quot;</span>)</span><br><span class=\"line\">    log.Error(<span class=\"string\">&quot;This is an ERROR message&quot;</span>)</span><br><span class=\"line\">    log.DPanic(<span class=\"string\">&quot;This is a DPANIC message&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;debug&quot;,&quot;msg&quot;:&quot;This is a DEBUG message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;This is an INFO message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;info&quot;,&quot;msg&quot;:&quot;This is an INFO message with fields&quot;,&quot;region&quot;:[&quot;us_west&quot;],&quot;id&quot;:2&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;msg&quot;:&quot;This is a WARN message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;msg&quot;:&quot;This is an ERROR message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;dpanic&quot;,&quot;msg&quot;:&quot;This is a DPANIC message&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Development\"><a href=\"#Development\" class=\"headerlink\" title=\"Development\"></a>Development</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log, _ := zap.NewDevelopment()</span><br><span class=\"line\">    log.Debug(<span class=\"string\">&quot;This is a DEBUG message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message with fields&quot;</span>, zap.Strings(<span class=\"string\">&quot;region&quot;</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;us_west&quot;</span>&#125;), zap.Int(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    log.Warn(<span class=\"string\">&quot;This is a WARN message&quot;</span>)</span><br><span class=\"line\">    log.Error(<span class=\"string\">&quot;This is an ERROR message&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//log.Fatal(&quot;This is a FATAL message&quot;)   // 程序在这停止如果不注释</span></span><br><span class=\"line\">    <span class=\"comment\">//log.DPanic(&quot;This is a DPANIC message&quot;) // 程序在这停止如果不注释</span></span><br><span class=\"line\">    <span class=\"comment\">//log.Panic(&quot;This is a PANIC message&quot;)  // 程序在这停止如果不注释</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">2018-10-30T17:14:22.459+0800    DEBUG   development&#x2F;main.go:7   This is a DEBUG message</span><br><span class=\"line\">2018-10-30T17:14:22.459+0800    INFO    development&#x2F;main.go:8   This is an INFO message</span><br><span class=\"line\">2018-10-30T17:14:22.459+0800    INFO    development&#x2F;main.go:9   This is an INFO message with fields &#123;&quot;region&quot;: [&quot;us_west&quot;], &quot;id&quot;: 2&#125;</span><br><span class=\"line\">2018-10-30T17:14:22.459+0800    WARN    development&#x2F;main.go:10  This is a WARN message</span><br><span class=\"line\">main.main</span><br><span class=\"line\">    &#x2F;home&#x2F;wsl&#x2F;gopath&#x2F;src&#x2F;wsl_learn&#x2F;zap-example&#x2F;development&#x2F;main.go:10</span><br><span class=\"line\">runtime.main</span><br><span class=\"line\">    &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:201</span><br><span class=\"line\">2018-10-30T17:14:22.459+0800    ERROR   development&#x2F;main.go:11  This is an ERROR message</span><br><span class=\"line\">main.main</span><br><span class=\"line\">    &#x2F;home&#x2F;wsl&#x2F;gopath&#x2F;src&#x2F;wsl_learn&#x2F;zap-example&#x2F;development&#x2F;main.go:11</span><br><span class=\"line\">runtime.main</span><br><span class=\"line\">    &#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:201</span><br></pre></td></tr></table></figure>\n\n<p>Production</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    log, _ := zap.NewProduction()</span><br><span class=\"line\">    log.Debug(<span class=\"string\">&quot;This is a DEBUG message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message&quot;</span>)</span><br><span class=\"line\">    log.Info(<span class=\"string\">&quot;This is an INFO message with fields&quot;</span>, zap.Strings(<span class=\"string\">&quot;region&quot;</span>, []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;us-west&quot;</span>&#125;), zap.Int(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    log.Warn(<span class=\"string\">&quot;This is a WARN message&quot;</span>)</span><br><span class=\"line\">    log.Error(<span class=\"string\">&quot;This is an ERROR message&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//log.Fatal(&quot;This is a FATAL message&quot;) // 程序在这停止如果不注释</span></span><br><span class=\"line\">    log.DPanic(<span class=\"string\">&quot;This is a DPANIC message&quot;</span>)</span><br><span class=\"line\">    <span class=\"comment\">//log.Panic(&quot;This is a PANIC message&quot;) // 程序在这停止如果不注释</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1540891173.3190675,&quot;caller&quot;:&quot;production&#x2F;main.go:8&quot;,&quot;msg&quot;:&quot;This is an INFO message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;info&quot;,&quot;ts&quot;:1540891173.3191047,&quot;caller&quot;:&quot;production&#x2F;main.go:9&quot;,&quot;msg&quot;:&quot;This is an INFO message with fields&quot;,&quot;region&quot;:[&quot;us-west&quot;],&quot;id&quot;:2&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;warn&quot;,&quot;ts&quot;:1540891173.3191204,&quot;caller&quot;:&quot;production&#x2F;main.go:10&quot;,&quot;msg&quot;:&quot;This is a WARN message&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1540891173.31913,&quot;caller&quot;:&quot;production&#x2F;main.go:11&quot;,&quot;msg&quot;:&quot;This is an ERROR message&quot;,&quot;stacktrace&quot;:&quot;main.main\\n\\t&#x2F;home&#x2F;wsl&#x2F;gopath&#x2F;src&#x2F;wsl_learn&#x2F;zap-example&#x2F;production&#x2F;main.go:11\\nruntime.main\\n\\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:201&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;dpanic&quot;,&quot;ts&quot;:1540891173.3191597,&quot;caller&quot;:&quot;production&#x2F;main.go:13&quot;,&quot;msg&quot;:&quot;This is a DPANIC message&quot;,&quot;stacktrace&quot;:&quot;main.main\\n\\t&#x2F;home&#x2F;wsl&#x2F;gopath&#x2F;src&#x2F;wsl_learn&#x2F;zap-example&#x2F;production&#x2F;main.go:13\\nruntime.main\\n\\t&#x2F;usr&#x2F;local&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:201&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三种预设方式的对比\"><a href=\"#三种预设方式的对比\" class=\"headerlink\" title=\"三种预设方式的对比\"></a>三种预设方式的对比</h4><ul>\n<li>Example和Production使用的是json格式输出，        Development使用行的形式输出</li>\n<li>Development<ul>\n<li>从警告级别向上打印到堆栈中来跟踪</li>\n<li>始终打印包/文件/行（方法）</li>\n<li>在行尾添加任何额外字段作为json字符串</li>\n<li>以大写形式打印级别名称</li>\n<li>以毫秒为单位打印ISO8601格式的时间戳</li>\n</ul>\n</li>\n<li>Production<ul>\n<li>调试级别消息不记录</li>\n<li>Error,Dpanic级别的记录，会在堆栈中跟踪文件，Warn不会</li>\n<li>始终将调用者添加到文件中</li>\n<li>以时间戳格式打印日期</li>\n<li>以小写形式打印级别名称</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"Sugar-Logger\"><a href=\"#Sugar-Logger\" class=\"headerlink\" title=\"Sugar Logger\"></a>Sugar Logger</h3><p>默认的zap记录器需要结构化标签，即对每个标签，需要使用特定值类型的函数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">logger.Info(<span class=\"string\">&quot;This is an INFO message with fields&quot;</span>, </span><br><span class=\"line\">            zap.String(<span class=\"string\">&quot;region&quot;</span>, <span class=\"string\">&quot;us-west&quot;</span>), </span><br><span class=\"line\">            zap.Int(<span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">2</span>))</span><br></pre></td></tr></table></figure>\n\n<p>虽然会显的很长，但是对性能要求较高的话，这是最快的选择。也可以使用suger logger, 它基于printf分割的反射类型检测，提供更简单的语法来添加混合类型的标签</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    logger, _ := zap.NewDevelopment()</span><br><span class=\"line\">    slogger := logger.Sugar()</span><br><span class=\"line\"> </span><br><span class=\"line\">    slogger.Info(<span class=\"string\">&quot;Info() uses sprint&quot;</span>)</span><br><span class=\"line\">    slogger.Infof(<span class=\"string\">&quot;Infof() uses %s&quot;</span>, <span class=\"string\">&quot;sprintf&quot;</span>)</span><br><span class=\"line\">    slogger.Infow(<span class=\"string\">&quot;Infow() allows tags&quot;</span>, <span class=\"string\">&quot;name&quot;</span>, <span class=\"string\">&quot;Legolas&quot;</span>, <span class=\"string\">&quot;type&quot;</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>如果需要，可以随时使用记录器上的.Desugar()方法从sugar logger切换到标准记录器</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">log := slogger.Desugar()</span><br><span class=\"line\"> </span><br><span class=\"line\">log.Info(<span class=\"string\">&quot;After Desugar; INFO message&quot;</span>)</span><br><span class=\"line\">log.Warn(<span class=\"string\">&quot;After Desugar; WARN message&quot;</span>)</span><br><span class=\"line\">log.Error(<span class=\"string\">&quot;After Desugar; ERROR message&quot;</span>)</span><br></pre></td></tr></table></figure>\n","categories":["技术","Go"],"tags":["Go","Zap Logger","Uber-go Zap","日志"]},{"title":"Go 使用Zap Logger","url":"/2022/06/01/Go-%E4%BD%BF%E7%94%A8Zap-Logger/","content":"<h3 id=\"Uber-go-Zap\"><a href=\"#Uber-go-Zap\" class=\"headerlink\" title=\"Uber-go Zap\"></a>Uber-go Zap</h3><p>Zap是非常快的、结构化的，分日志级别的Go日志库。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"为什么选择Uber-go-zap\"><a href=\"#为什么选择Uber-go-zap\" class=\"headerlink\" title=\"为什么选择Uber-go zap\"></a>为什么选择Uber-go zap</h3><ul>\n<li>它同时提供了结构化日志记录和printf风格的日志记录</li>\n<li>它非常的快</li>\n</ul>\n<p>根据Uber-go Zap的文档，它的性能比类似的结构化日志包更好——也比标准库更快。 以下是Zap发布的基准测试信息</p>\n<p>记录一条消息和10个字段:</p>\n<p><img data-src=\"https://s2.loli.net/2022/06/01/nO4WL76d29Fv8NT.png\" alt=\"image.png\"></p>\n<p>记录一个静态字符串，没有任何上下文或printf风格的模板：</p>\n<p><img data-src=\"https://s2.loli.net/2022/06/01/nVEzmwspjgebYAD.png\" alt=\"image.png\"></p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><p>运行下面的命令安装zap</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get -u <span class=\"keyword\">go</span>.uber.org/zap</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"配置Zap-Logger\"><a href=\"#配置Zap-Logger\" class=\"headerlink\" title=\"配置Zap Logger\"></a>配置Zap Logger</h3><p>Zap提供了两种类型的日志记录器—Sugared Logger和Logger。</p>\n<p>在性能很好但不是很关键的上下文中，使用SugaredLogger。它比其他结构化日志记录包快4-10倍，并且支持结构化和printf风格的日志记录。</p>\n<p>在每一微秒和每一次内存分配都很重要的上下文中，使用Logger。它甚至比SugaredLogger更快，内存分配次数也更少，但它只支持强类型的结构化日志记录。</p>\n<h3 id=\"Logger\"><a href=\"#Logger\" class=\"headerlink\" title=\"Logger\"></a>Logger</h3><ul>\n<li>通过调用zap.NewProduction()/zap.NewDevelopment()或者zap.Example()创建一个Logger。</li>\n<li>上面的每一个函数都将创建一个logger。唯一的区别在于它将记录的信息不同。例如production logger默认记录调用函数信息、日期和时间等。</li>\n<li>通过Logger调用Info/Error等。</li>\n<li>默认情况下日志都会打印到应用程序的console界面。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> logger *zap.Logger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    InitLogger()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> logger.Sync()</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;www.5lmh.com&quot;</span>)</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;http://www.google.com&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitLogger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    logger, _ = zap.NewProduction()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleHttpGet</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    resp, err := http.Get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        logger.Error(</span><br><span class=\"line\">            <span class=\"string\">&quot;Error fetching url..&quot;</span>,</span><br><span class=\"line\">            zap.String(<span class=\"string\">&quot;url&quot;</span>, url),</span><br><span class=\"line\">            zap.Error(err))</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        logger.Info(<span class=\"string\">&quot;Success..&quot;</span>,</span><br><span class=\"line\">            zap.String(<span class=\"string\">&quot;statusCode&quot;</span>, resp.Status),</span><br><span class=\"line\">            zap.String(<span class=\"string\">&quot;url&quot;</span>, url))</span><br><span class=\"line\">        resp.Body.Close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在上面的代码中，我们首先创建了一个Logger，然后使用Info/ Error等Logger方法记录消息。</p>\n<p>日志记录器方法的语法是这样的：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(log *Logger)</span> <span class=\"title\">MethodXXX</span><span class=\"params\">(msg <span class=\"keyword\">string</span>, fields ...Field)</span></span></span><br></pre></td></tr></table></figure>\n\n<p>其中MethodXXX是一个可变参数函数，可以是Info / Error/ Debug / Panic等。每个方法都接受一个消息字符串和任意数量的zapcore.Field场参数。</p>\n<p>每个zapcore.Field其实就是一组键值对参数。</p>\n<p>我们执行上面的代码会得到如下输出结果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573180648.858149,&quot;caller&quot;:&quot;ce2&#x2F;main.go:25&quot;,&quot;msg&quot;:&quot;Error fetching url..&quot;,&quot;url&quot;:&quot;www.5lmh.com&quot;,&quot;error&quot;:&quot;Get www.5lmh.com: unsupported protocol scheme \\&quot;\\&quot;&quot;,&quot;stacktrace&quot;:&quot;main.simpleHttpGet\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce2&#x2F;main.go:25\\nmain.main\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce2&#x2F;main.go:14\\nruntime.main\\n\\tE:&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:200&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573180669.9273467,&quot;caller&quot;:&quot;ce2&#x2F;main.go:25&quot;,&quot;msg&quot;:&quot;Error fetching url..&quot;,&quot;url&quot;:&quot;http:&#x2F;&#x2F;www.google.com&quot;,&quot;error&quot;:&quot;Get http:&#x2F;&#x2F;www.google.com: dial tcp 31.13.72.54:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.&quot;,&quot;stacktrace&quot;:&quot;main.simpleHttpGet\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce2&#x2F;main.go:25\\nmain.main\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce2&#x2F;main.go:15\\nruntime.main\\n\\tE:&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:200&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Sugared-Logger\"><a href=\"#Sugared-Logger\" class=\"headerlink\" title=\"Sugared Logger\"></a>Sugared Logger</h3><p>现在让我们使用Sugared Logger来实现相同的功能。</p>\n<ul>\n<li>大部分的实现基本都相同。</li>\n<li>惟一的区别是，我们通过调用主logger的. Sugar()方法来获取一个SugaredLogger。</li>\n<li>然后使用SugaredLogger以printf格式记录语句</li>\n</ul>\n<p>下面是修改过后使用SugaredLogger代替Logger的代码：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sugarLogger *zap.SugaredLogger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    InitLogger()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> sugarLogger.Sync()</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;www.5lmh.com&quot;</span>)</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;http://www.google.com&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitLogger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    logger, _ := zap.NewProduction()</span><br><span class=\"line\">    sugarLogger = logger.Sugar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleHttpGet</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    sugarLogger.Debugf(<span class=\"string\">&quot;Trying to hit GET request for %s&quot;</span>, url)</span><br><span class=\"line\">    resp, err := http.Get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        sugarLogger.Errorf(<span class=\"string\">&quot;Error fetching URL %s : Error = %s&quot;</span>, url, err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sugarLogger.Infof(<span class=\"string\">&quot;Success! statusCode = %s for URL %s&quot;</span>, resp.Status, url)</span><br><span class=\"line\">        resp.Body.Close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573180998.3522997,&quot;caller&quot;:&quot;ce3&#x2F;main.go:27&quot;,&quot;msg&quot;:&quot;Error fetching URL www.5lmh.com : Error &#x3D; Get www.5lmh.com: unsupported protocol scheme \\&quot;\\&quot;&quot;,&quot;stacktrace&quot;:&quot;main.simpleHttpGet\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce3&#x2F;main.go:27\\nmain.main\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce3&#x2F;main.go:14\\nruntime.main\\n\\tE:&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:200&quot;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573181019.3677258,&quot;caller&quot;:&quot;ce3&#x2F;main.go:27&quot;,&quot;msg&quot;:&quot;Error fetching URL http:&#x2F;&#x2F;www.google.com : Error &#x3D; Get http:&#x2F;&#x2F;www.google.com: dial tcp 67.228.37.26:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.&quot;,&quot;stacktrace&quot;:&quot;main.simpleHttpGet\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce3&#x2F;main.go:27\\nmain.main\\n\\te:&#x2F;goproject&#x2F;src&#x2F;github.com&#x2F;student&#x2F;log&#x2F;ce3&#x2F;main.go:15\\nruntime.main\\n\\tE:&#x2F;go&#x2F;src&#x2F;runtime&#x2F;proc.go:200&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>你应该注意到的了，到目前为止这两个logger都打印输出JSON结构格式。</p>\n<p>在本博客的后面部分，我们将更详细地讨论SugaredLogger，并了解如何进一步配置它。</p>\n<h3 id=\"定制logger\"><a href=\"#定制logger\" class=\"headerlink\" title=\"定制logger\"></a>定制logger</h3><h4 id=\"将日志写入文件而不是终端\"><a href=\"#将日志写入文件而不是终端\" class=\"headerlink\" title=\"将日志写入文件而不是终端\"></a>将日志写入文件而不是终端</h4><ul>\n<li>我们要做的第一个更改是把日志写入文件，而不是打印到应用程序控制台。</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">New</span><span class=\"params\">(core zapcore.Core, options ...Option)</span> *<span class=\"title\">Logger</span></span></span><br></pre></td></tr></table></figure>\n\n<p>zapcore.Core需要三个配置——Encoder，WriteSyncer，LogLevel。</p>\n<p>1.Encoder:编码器(如何写入日志)。我们将使用开箱即用的NewJSONEncoder()，并使用预先设置的ProductionEncoderConfig()。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig())</span><br></pre></td></tr></table></figure>\n\n<p>2.WriterSyncer ：指定日志将写到哪里去。我们使用zapcore.AddSync()函数并且将打开的文件句柄传进去。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">file, _ := os.Create(<span class=\"string\">&quot;./test.log&quot;</span>)</span><br><span class=\"line\">   writeSyncer := zapcore.AddSync(file)</span><br></pre></td></tr></table></figure>\n\n<p>3.Log Level：哪种级别的日志将被写入。</p>\n<p>我们将修改上述部分中的Logger代码，并重写InitLogger()方法。其余方法—main() /SimpleHttpGet()保持不变。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;net/http&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> sugarLogger *zap.SugaredLogger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    InitLogger()</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> sugarLogger.Sync()</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;www.5lmh.com&quot;</span>)</span><br><span class=\"line\">    simpleHttpGet(<span class=\"string\">&quot;http://www.google.com&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitLogger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    writeSyncer := getLogWriter()</span><br><span class=\"line\">    encoder := getEncoder()</span><br><span class=\"line\">    core := zapcore.NewCore(encoder, writeSyncer, zapcore.DebugLevel)</span><br><span class=\"line\"></span><br><span class=\"line\">    logger := zap.New(core)</span><br><span class=\"line\">    sugarLogger = logger.Sugar()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getEncoder</span><span class=\"params\">()</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Encoder</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zapcore.NewJSONEncoder(zap.NewProductionEncoderConfig())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getLogWriter</span><span class=\"params\">()</span> <span class=\"title\">zapcore</span>.<span class=\"title\">WriteSyncer</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//如果想要追加写入可以查看我的博客文件操作那一章</span></span><br><span class=\"line\">    file, _ := os.Create(<span class=\"string\">&quot;./test.log&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zapcore.AddSync(file)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">simpleHttpGet</span><span class=\"params\">(url <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    sugarLogger.Debugf(<span class=\"string\">&quot;Trying to hit GET request for %s&quot;</span>, url)</span><br><span class=\"line\">    resp, err := http.Get(url)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        sugarLogger.Errorf(<span class=\"string\">&quot;Error fetching URL %s : Error = %s&quot;</span>, url, err)</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        sugarLogger.Infof(<span class=\"string\">&quot;Success! statusCode = %s for URL %s&quot;</span>, resp.Status, url)</span><br><span class=\"line\">        resp.Body.Close()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当使用这些修改过的logger配置调用上述部分的main()函数时，以下输出将打印在文件——test.log中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;&quot;level&quot;:&quot;debug&quot;,&quot;ts&quot;:1573181732.5292294,&quot;msg&quot;:&quot;Trying to hit GET request for www.5lmh.com&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573181732.5292294,&quot;msg&quot;:&quot;Error fetching URL www.5lmh.com : Error &#x3D; Get www.5lmh.com: unsupported protocol scheme \\&quot;\\&quot;&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;debug&quot;,&quot;ts&quot;:1573181732.5292294,&quot;msg&quot;:&quot;Trying to hit GET request for http:&#x2F;&#x2F;www.google.com&quot;&#125;</span><br><span class=\"line\">&#123;&quot;level&quot;:&quot;error&quot;,&quot;ts&quot;:1573181753.564804,&quot;msg&quot;:&quot;Error fetching URL http:&#x2F;&#x2F;www.google.com : Error &#x3D; Get http:&#x2F;&#x2F;www.google.com: dial tcp 66.220.149.32:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.&quot;&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"将JSON-Encoder更改为普通的Log-Encoder\"><a href=\"#将JSON-Encoder更改为普通的Log-Encoder\" class=\"headerlink\" title=\"将JSON Encoder更改为普通的Log Encoder\"></a>将JSON Encoder更改为普通的Log Encoder</h4><p>现在，我们希望将编码器从JSON Encoder更改为普通Encoder。为此，我们需要将NewJSONEncoder()更改为NewConsoleEncoder()。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> zapcore.NewConsoleEncoder(zap.NewProductionEncoderConfig())</span><br></pre></td></tr></table></figure>\n\n<p>当使用这些修改过的logger配置调用上述部分的main()函数时，以下输出将打印在文件——test.log中。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">1.573181811861697e+09    debug    Trying to hit GET request for www.5lmh.com</span><br><span class=\"line\">1.5731818118626883e+09    error    Error fetching URL www.5lmh.com : Error &#x3D; Get www.5lmh.com: unsupported protocol scheme &quot;&quot;</span><br><span class=\"line\">1.5731818118626883e+09    debug    Trying to hit GET request for http:&#x2F;&#x2F;www.google.com</span><br><span class=\"line\">1.5731818329012108e+09    error    Error fetching URL http:&#x2F;&#x2F;www.google.com : Error &#x3D; Get http:&#x2F;&#x2F;www.google.com: dial tcp 216.58.200.228:80: connectex: A connection attempt failed because the connected party did not properly respond after a period of time, or established connection failed because connected host has failed to respond.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"更改时间编码并添加调用者详细信息\"><a href=\"#更改时间编码并添加调用者详细信息\" class=\"headerlink\" title=\"更改时间编码并添加调用者详细信息\"></a>更改时间编码并添加调用者详细信息</h4><p>鉴于我们对配置所做的更改，有下面两个问题：</p>\n<ul>\n<li>时间是以非人类可读的方式展示，例如1.572161051846623e+09</li>\n<li>调用方函数的详细信息没有显示在日志中 我们要做的第一件事是覆盖默认的ProductionConfig()，并进行以下更改:</li>\n</ul>\n<p>修改时间编码器</p>\n<ul>\n<li>在日志文件中使用大写字母记录日志级别</li>\n</ul>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getEncoder</span><span class=\"params\">()</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Encoder</span></span> &#123;</span><br><span class=\"line\">    encoderConfig := zap.NewProductionEncoderConfig()</span><br><span class=\"line\">    encoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class=\"line\">    encoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder</span><br><span class=\"line\">    <span class=\"keyword\">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来，我们将修改zap logger代码，添加将调用函数信息记录到日志中的功能。为此，我们将在zap.New(..)函数中添加一个Option。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">logger := zap.New(core, zap.AddCaller())</span><br></pre></td></tr></table></figure>\n","categories":["技术","Go"],"tags":["Go","Zap Logger","Uber-go Zap","日志"]},{"title":"Go 加密解密算法","url":"/2022/05/28/Go-%E5%8A%A0%E5%AF%86%E8%A7%A3%E5%AF%86%E7%AE%97%E6%B3%95/","content":"<p><img data-src=\"https://s2.loli.net/2022/05/28/gZqye5KB6izOCTL.png\" alt=\"image.png\"></p>\n<h3 id=\"0-摘要\"><a href=\"#0-摘要\" class=\"headerlink\" title=\"0. 摘要\"></a>0. 摘要</h3><p>在项目开发过程中,当操作一些用户的隐私信息,诸如密码,帐户密钥等数据时,往往需要加密后可以在网上传输.这时,需要一些高效地,简单易用的加密算法加密数据,然后把加密后的数据存入数据库或进行其他操作;当需要读取数据时,把加密后的数据取出来,再通过算法解密.</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-关于加密解密\"><a href=\"#1-关于加密解密\" class=\"headerlink\" title=\"1. 关于加密解密\"></a>1. 关于加密解密</h3><p>当前我们项目中常用的加解密的方式无非三种.</p>\n<ul>\n<li>对称加密, 加解密都使用的是同一个密钥, 其中的代表就是AES,DES</li>\n<li>非对加解密, 加解密使用不同的密钥, 其中的代表就是RSA</li>\n<li>签名算法, 如MD5,SHA1,HMAC等, 主要用于验证,防止信息被修改, 如：文件校验,数字签名,鉴权协议</li>\n</ul>\n<h4 id=\"1-1-Base64不是加密算法\"><a href=\"#1-1-Base64不是加密算法\" class=\"headerlink\" title=\"1.1. Base64不是加密算法\"></a>1.1. Base64不是加密算法</h4><p>它是一种数据编码方式,虽然是可逆的,但是它的编码方式是公开的,无所谓加密.本文也对Base64编码方式做了简要介绍.</p>\n<h3 id=\"2-使用场景总结\"><a href=\"#2-使用场景总结\" class=\"headerlink\" title=\"2. 使用场景总结\"></a>2. 使用场景总结</h3><p>速度上：明文编码 &gt; MD5 &gt; SHA1 &gt; AES-GCM &gt; RSA<br>综合而言，校验用SHA，普通编码用Base64，内部数据加密存储可用AES-GCM, 最高安全直接用RSA。<br>另外，一些敏感信息展示，还可以使用脱敏处理，比如姓名、身份证号、手机号脱敏处理等，可在后台搭配AES方法脱敏处理。</p>\n<h3 id=\"3-AES\"><a href=\"#3-AES\" class=\"headerlink\" title=\"3. AES\"></a>3. AES</h3><p>AES,即高级加密标准（Advanced Encryption Standard）,是一个对称分组密码算法,旨在取代DES成为广泛使用的标准.AES中常见的有三种解决方案,分别为AES-128,AES-192和AES-256. AES加密过程涉及到4种操作：字节替代（SubBytes）,行移位（ShiftRows）,列混淆（MixColumns）和轮密钥加（AddRoundKey）.解密过程分别为对应的逆操作.由于每一步操作都是可逆的,按照相反的顺序进行解密即可恢复明文.加解密中每轮的密钥分别由初始密钥扩展得到.算法中16字节的明文,密文和轮密钥都以一个4x4的矩阵表示. AES 有五种加密模式：电码本模式（Electronic Codebook Book (ECB)）,密码分组链接模式（Cipher Block Chaining (CBC)）,计算器模式（Counter (CTR)）,密码反馈模式（Cipher FeedBack (CFB)）和输出反馈模式（Output FeedBack (OFB)）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;bytes&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/aes&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/cipher&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/base64&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    orig := <span class=\"string\">&quot;hello world&quot;</span></span><br><span class=\"line\">    key := <span class=\"string\">&quot;123456781234567812345678&quot;</span></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;原文：&quot;</span>, orig)</span><br><span class=\"line\"></span><br><span class=\"line\">    encryptCode := AesEncrypt(orig, key)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;密文：&quot;</span> , encryptCode)</span><br><span class=\"line\"></span><br><span class=\"line\">    decryptCode := AesDecrypt(encryptCode, key)</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;解密结果：&quot;</span>, decryptCode)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AesEncrypt</span><span class=\"params\">(orig <span class=\"keyword\">string</span>, key <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 转成字节数组</span></span><br><span class=\"line\">    origData := []<span class=\"keyword\">byte</span>(orig)</span><br><span class=\"line\">    k := []<span class=\"keyword\">byte</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分组秘钥</span></span><br><span class=\"line\">    block, err := aes.NewCipher(k)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">&quot;key 长度必须 16/24/32长度: %s&quot;</span>, err.Error()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取秘钥块的长度</span></span><br><span class=\"line\">    blockSize := block.BlockSize()</span><br><span class=\"line\">    <span class=\"comment\">// 补全码</span></span><br><span class=\"line\">    origData = PKCS7Padding(origData, blockSize)</span><br><span class=\"line\">    <span class=\"comment\">// 加密模式</span></span><br><span class=\"line\">    blockMode := cipher.NewCBCEncrypter(block, k[:blockSize])</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组</span></span><br><span class=\"line\">    cryted := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(origData))</span><br><span class=\"line\">    <span class=\"comment\">// 加密</span></span><br><span class=\"line\">    blockMode.CryptBlocks(cryted, origData)</span><br><span class=\"line\">    <span class=\"comment\">//使用RawURLEncoding 不要使用StdEncoding</span></span><br><span class=\"line\">    <span class=\"comment\">//不要使用StdEncoding  放在url参数中回导致错误</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> base64.RawURLEncoding.EncodeToString(cryted)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">AesDecrypt</span><span class=\"params\">(cryted <span class=\"keyword\">string</span>, key <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//使用RawURLEncoding 不要使用StdEncoding</span></span><br><span class=\"line\">    <span class=\"comment\">//不要使用StdEncoding  放在url参数中回导致错误</span></span><br><span class=\"line\">    crytedByte, _ := base64.RawURLEncoding.DecodeString(cryted)</span><br><span class=\"line\">    k := []<span class=\"keyword\">byte</span>(key)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 分组秘钥</span></span><br><span class=\"line\">    block, err := aes.NewCipher(k)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(fmt.Sprintf(<span class=\"string\">&quot;key 长度必须 16/24/32长度: %s&quot;</span>, err.Error()))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 获取秘钥块的长度</span></span><br><span class=\"line\">    blockSize := block.BlockSize()</span><br><span class=\"line\">    <span class=\"comment\">// 加密模式</span></span><br><span class=\"line\">    blockMode := cipher.NewCBCDecrypter(block, k[:blockSize])</span><br><span class=\"line\">    <span class=\"comment\">// 创建数组</span></span><br><span class=\"line\">    orig := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(crytedByte))</span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    blockMode.CryptBlocks(orig, crytedByte)</span><br><span class=\"line\">    <span class=\"comment\">// 去补全码</span></span><br><span class=\"line\">    orig = PKCS7UnPadding(orig)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(orig)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//补码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS7Padding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blocksize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    padding := blocksize - <span class=\"built_in\">len</span>(ciphertext)%blocksize</span><br><span class=\"line\">    padtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"keyword\">byte</span>(padding)&#125;, padding)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//去码</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PKCS7UnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    length := <span class=\"built_in\">len</span>(origData)</span><br><span class=\"line\">    unpadding := <span class=\"keyword\">int</span>(origData[length<span class=\"number\">-1</span>])</span><br><span class=\"line\">    <span class=\"keyword\">return</span> origData[:(length - unpadding)]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"4-DES\"><a href=\"#4-DES\" class=\"headerlink\" title=\"4. DES\"></a>4. DES</h3><p>DES是一种对称加密算法,又称为美国数据加密标准.DES加密时以64位分组对数据进行加密,加密和解密都使用的是同一个长度为64位的密钥,实际上只用到了其中的56位,密钥中的第8,16…64位用来作奇偶校验.DES有ECB（电子密码本）和CBC（加密块）等加密模式. DES算法的安全性很高,目前除了穷举搜索破解外, 尚无更好的的办法来破解.其密钥长度越长,破解难度就越大. 填充和去填充函数.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroPadding</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>, blockSize <span class=\"keyword\">int</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    padding := blockSize - <span class=\"built_in\">len</span>(ciphertext)%blockSize</span><br><span class=\"line\">    padtext := bytes.Repeat([]<span class=\"keyword\">byte</span>&#123;<span class=\"number\">0</span>&#125;, padding)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">append</span>(ciphertext, padtext...)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">ZeroUnPadding</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> bytes.TrimFunc(origData,</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(r <span class=\"keyword\">rune</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> r == <span class=\"keyword\">rune</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>加密.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Encrypt</span><span class=\"params\">(text <span class=\"keyword\">string</span>, key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">    src := []<span class=\"keyword\">byte</span>(text)</span><br><span class=\"line\">    block, err := des.NewCipher(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    bs := block.BlockSize()</span><br><span class=\"line\">    src = ZeroPadding(src, bs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(src)%bs != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, errors.New(<span class=\"string\">&quot;Need a multiple of the blocksize&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(src))</span><br><span class=\"line\">    dst := out</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(src) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        block.Encrypt(dst, src[:bs])</span><br><span class=\"line\">        src = src[bs:]</span><br><span class=\"line\">        dst = dst[bs:]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hex.EncodeToString(out), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>解密.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Decrypt</span><span class=\"params\">(decrypted <span class=\"keyword\">string</span> , key []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">(<span class=\"keyword\">string</span>, error)</span></span> &#123;</span><br><span class=\"line\">    src, err := hex.DecodeString(decrypted)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    block, err := des.NewCipher(key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out := <span class=\"built_in\">make</span>([]<span class=\"keyword\">byte</span>, <span class=\"built_in\">len</span>(src))</span><br><span class=\"line\">    dst := out</span><br><span class=\"line\">    bs := block.BlockSize()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(src)%bs != <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;&quot;</span>, errors.New(<span class=\"string\">&quot;crypto/cipher: input not full blocks&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> <span class=\"built_in\">len</span>(src) &gt; <span class=\"number\">0</span> &#123;</span><br><span class=\"line\">        block.Decrypt(dst, src[:bs])</span><br><span class=\"line\">        src = src[bs:]</span><br><span class=\"line\">        dst = dst[bs:]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    out = ZeroUnPadding(out)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">string</span>(out), <span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试.在这里,DES中使用的密钥key只能为8位.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    key := []<span class=\"keyword\">byte</span>(<span class=\"string\">&quot;2fa6c1e9&quot;</span>)</span><br><span class=\"line\">    str :=<span class=\"string\">&quot;I love this beautiful world!&quot;</span></span><br><span class=\"line\">    strEncrypted, err := Encrypt(str, key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Encrypted:&quot;</span>, strEncrypted)</span><br><span class=\"line\">    strDecrypted, err := Decrypt(strEncrypted, key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Decrypted:&quot;</span>, strDecrypted)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Output:</span></span><br><span class=\"line\"><span class=\"comment\">//Encrypted: 5d2333b9fbbe5892379e6bcc25ffd1f3a51b6ffe4dc7af62beb28e1270d5daa1</span></span><br><span class=\"line\"><span class=\"comment\">//Decrypted: I love this beautiful world!</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-RSA\"><a href=\"#5-RSA\" class=\"headerlink\" title=\"5. RSA\"></a>5. RSA</h3><p>首先使用openssl生成公私钥,使用RSA的时候需要提供公钥和私钥 , 可以通过openss来生成对应的pem格式的公钥和私钥匙</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rsa&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/x509&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/base64&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/pem&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 私钥生成</span></span><br><span class=\"line\"><span class=\"comment\">//openssl genrsa -out rsa_private_key.pem 1024</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> privateKey = []<span class=\"keyword\">byte</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">-----BEGIN RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIICWwIBAAKBgQDcGsUIIAINHfRTdMmgGwLrjzfMNSrtgIf4EGsNaYwmC1GjF/bM</span></span><br><span class=\"line\"><span class=\"string\">h0Mcm10oLhNrKNYCTTQVGGIxuc5heKd1gOzb7bdTnCDPPZ7oV7p1B9Pud+6zPaco</span></span><br><span class=\"line\"><span class=\"string\">qDz2M24vHFWYY2FbIIJh8fHhKcfXNXOLovdVBE7Zy682X1+R1lRK8D+vmQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\">AoGAeWAZvz1HZExca5k/hpbeqV+0+VtobMgwMs96+U53BpO/VRzl8Cu3CpNyb7HY</span></span><br><span class=\"line\"><span class=\"string\">64L9YQ+J5QgpPhqkgIO0dMu/0RIXsmhvr2gcxmKObcqT3JQ6S4rjHTln49I2sYTz</span></span><br><span class=\"line\"><span class=\"string\">7JEH4TcplKjSjHyq5MhHfA+CV2/AB2BO6G8limu7SheXuvECQQDwOpZrZDeTOOBk</span></span><br><span class=\"line\"><span class=\"string\">z1vercawd+J9ll/FZYttnrWYTI1sSF1sNfZ7dUXPyYPQFZ0LQ1bhZGmWBZ6a6wd9</span></span><br><span class=\"line\"><span class=\"string\">R+PKlmJvAkEA6o32c/WEXxW2zeh18sOO4wqUiBYq3L3hFObhcsUAY8jfykQefW8q</span></span><br><span class=\"line\"><span class=\"string\">yPuuL02jLIajFWd0itjvIrzWnVmoUuXydwJAXGLrvllIVkIlah+lATprkypH3Gyc</span></span><br><span class=\"line\"><span class=\"string\">YFnxCTNkOzIVoXMjGp6WMFylgIfLPZdSUiaPnxby1FNM7987fh7Lp/m12QJAK9iL</span></span><br><span class=\"line\"><span class=\"string\">2JNtwkSR3p305oOuAz0oFORn8MnB+KFMRaMT9pNHWk0vke0lB1sc7ZTKyvkEJW0o</span></span><br><span class=\"line\"><span class=\"string\">eQgic9DvIYzwDUcU8wJAIkKROzuzLi9AvLnLUrSdI6998lmeYO9x7pwZPukz3era</span></span><br><span class=\"line\"><span class=\"string\">zncjRK3pbVkv0KrKfczuJiRlZ7dUzVO0b6QJr8TRAA==</span></span><br><span class=\"line\"><span class=\"string\">-----END RSA PRIVATE KEY-----</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 公钥: 根据私钥生成</span></span><br><span class=\"line\"><span class=\"comment\">//openssl rsa -in rsa_private_key.pem -pubout -out rsa_public_key.pem</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> publicKey = []<span class=\"keyword\">byte</span>(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">-----BEGIN PUBLIC KEY-----</span></span><br><span class=\"line\"><span class=\"string\">MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDcGsUIIAINHfRTdMmgGwLrjzfM</span></span><br><span class=\"line\"><span class=\"string\">NSrtgIf4EGsNaYwmC1GjF/bMh0Mcm10oLhNrKNYCTTQVGGIxuc5heKd1gOzb7bdT</span></span><br><span class=\"line\"><span class=\"string\">nCDPPZ7oV7p1B9Pud+6zPacoqDz2M24vHFWYY2FbIIJh8fHhKcfXNXOLovdVBE7Z</span></span><br><span class=\"line\"><span class=\"string\">y682X1+R1lRK8D+vmQIDAQAB</span></span><br><span class=\"line\"><span class=\"string\">-----END PUBLIC KEY-----</span></span><br><span class=\"line\"><span class=\"string\">`</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 加密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RsaEncrypt</span><span class=\"params\">(origData []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解密pem格式的公钥</span></span><br><span class=\"line\">    block, _ := pem.Decode(publicKey)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> block == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;public key error&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解析公钥</span></span><br><span class=\"line\">    pubInterface, err := x509.ParsePKIXPublicKey(block.Bytes)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 类型断言</span></span><br><span class=\"line\">    pub := pubInterface.(*rsa.PublicKey)</span><br><span class=\"line\">    <span class=\"comment\">//加密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rsa.EncryptPKCS1v15(rand.Reader, pub, origData)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 解密</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">RsaDecrypt</span><span class=\"params\">(ciphertext []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//解密</span></span><br><span class=\"line\">    block, _ := pem.Decode(privateKey)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> block == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, errors.New(<span class=\"string\">&quot;private key error!&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//解析PKCS1格式的私钥</span></span><br><span class=\"line\">    priv, err := x509.ParsePKCS1PrivateKey(block.Bytes)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>, err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 解密</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rsa.DecryptPKCS1v15(rand.Reader, priv, ciphertext)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    data, _ := RsaEncrypt([]<span class=\"keyword\">byte</span>(<span class=\"string\">&quot;hello world&quot;</span>))</span><br><span class=\"line\">    fmt.Println(base64.StdEncoding.EncodeToString(data))</span><br><span class=\"line\">    origData, _ := RsaDecrypt(data)</span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(origData))</span><br><span class=\"line\">&#125; </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-使用golang标准库ecdsa生成非对称-ES256-ES384-ES521-加密密钥对\"><a href=\"#6-使用golang标准库ecdsa生成非对称-ES256-ES384-ES521-加密密钥对\" class=\"headerlink\" title=\"6. 使用golang标准库ecdsa生成非对称(ES256,ES384,ES521)加密密钥对\"></a>6. 使用golang标准库ecdsa生成非对称(ES256,ES384,ES521)加密密钥对</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/ecdsa&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/elliptic&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/rand&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/x509&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/pem&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/spf13/cobra&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// ecdsaCmd represents the doc command</span></span><br><span class=\"line\"> <span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">keyPairs</span><span class=\"params\">(keyName <span class=\"keyword\">string</span>)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//elliptic.P256(),elliptic.P384(),elliptic.P521()</span></span><br><span class=\"line\"></span><br><span class=\"line\">    privateKey, err := ecdsa.GenerateKey(elliptic.P256(), rand.Reader)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x509Encoded, _ := x509.MarshalECPrivateKey(privateKey)</span><br><span class=\"line\">    privateBs := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class=\"string\">&quot;PRIVATE KEY&quot;</span>, Bytes: x509Encoded&#125;)</span><br><span class=\"line\">    privateFile, err := os.Create(keyName + <span class=\"string\">&quot;.private.pem&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _, err = privateFile.Write(privateBs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    x509EncodedPub, _ := x509.MarshalPKIXPublicKey(privateKey.Public())</span><br><span class=\"line\">    publicBs := pem.EncodeToMemory(&amp;pem.Block&#123;Type: <span class=\"string\">&quot;PUBLIC KEY&quot;</span>, Bytes: x509EncodedPub&#125;)</span><br><span class=\"line\">    publicKeyFile, err := os.Create(keyName + <span class=\"string\">&quot;.public.pem&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    _, err = publicKeyFile.Write(publicBs)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        log.Fatal(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-MD5\"><a href=\"#7-MD5\" class=\"headerlink\" title=\"7. MD5\"></a>7. MD5</h3><p>MD5的全称是Message-DigestAlgorithm 5,它可以把一个任意长度的字节数组转换成一个定长的整数,并且这种转换是不可逆的.对于任意长度的数据,转换后的MD5值长度是固定的,而且MD5的转换操作很容易,只要原数据有一点点改动,转换后结果就会有很大的差异.正是由于MD5算法的这些特性,它经常用于对于一段信息产生信息摘要,以防止其被篡改.其还广泛就于操作系统的登录过程中的安全验证,比如Unix操作系统的密码就是经过MD5加密后存储到文件系统中,当用户登录时输入密码后, 对用户输入的数据经过MD5加密后与原来存储的密文信息比对,如果相同说明密码正确,否则输入的密码就是错误的. MD5以512位为一个计算单位对数据进行分组,每一分组又被划分为16个32位的小组,经过一系列处理后,输出4个32位的小组,最后组成一个128位的哈希值.对处理的数据进行512求余得到N和一个余数,如果余数不为448,填充1和若干个0直到448位为止,最后再加上一个64位用来保存数据的长度,这样经过预处理后,数据变成（N+1）x 512位. 加密.Encode 函数用来加密数据,Check函数传入一个未加密的字符串和与加密后的数据,进行对比,如果正确就返回true.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Check</span><span class=\"params\">(content, encrypted <span class=\"keyword\">string</span>)</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> strings.EqualFold(Encode(content), encrypted)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Encode</span><span class=\"params\">(data <span class=\"keyword\">string</span>)</span> <span class=\"title\">string</span></span> &#123;</span><br><span class=\"line\">    h := md5.New()</span><br><span class=\"line\">    h.Write([]<span class=\"keyword\">byte</span>(data))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> hex.EncodeToString(h.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>测试.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">     strTest := <span class=\"string\">&quot;I love this beautiful world!&quot;</span></span><br><span class=\"line\">    strEncrypted := <span class=\"string\">&quot;98b4fc4538115c4980a8b859ff3d27e1&quot;</span></span><br><span class=\"line\">    fmt.Println(Check(strTest, strEncrypted))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//Output:</span></span><br><span class=\"line\"><span class=\"comment\">//true</span></span><br><span class=\"line\"></span><br><span class=\"line\">Sha1</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/sha1&quot;</span></span><br><span class=\"line\">     <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">   s := <span class=\"string\">&quot;sha1 this string&quot;</span></span><br><span class=\"line\">   <span class=\"comment\">//产生一个散列值得方式是 sha1.New(),sha1.Write(bytes),然后 sha1.Sum([]byte&#123;&#125;).这里我们从一个新的散列开始.</span></span><br><span class=\"line\">   h := sha1.New()</span><br><span class=\"line\">   <span class=\"comment\">//写入要处理的字节.如果是一个字符串,需要使用[]byte(s) 来强制转换成字节数组.</span></span><br><span class=\"line\">   h.Write([]<span class=\"keyword\">byte</span>(s))</span><br><span class=\"line\">   <span class=\"comment\">//这个用来得到最终的散列值的字符切片.Sum 的参数可以用来都现有的字符切片追加额外的字节切片：一般不需要要.</span></span><br><span class=\"line\">   bs := h.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\">   <span class=\"comment\">//SHA1 值经常以 16 进制输出,例如在 git commit 中.使用%x 来将散列结果格式化为 16 进制字符串.</span></span><br><span class=\"line\">   fmt.Println(s)</span><br><span class=\"line\">   fmt.Printf(<span class=\"string\">&quot;%x\\n&quot;</span>, bs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-SHA\"><a href=\"#8-SHA\" class=\"headerlink\" title=\"8. SHA\"></a>8. SHA</h3><h4 id=\"SHA1\"><a href=\"#SHA1\" class=\"headerlink\" title=\"SHA1\"></a>SHA1</h4><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/sha1&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    s := <span class=\"string\">&quot;sha1 this string&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    h := sha1.New()</span><br><span class=\"line\"></span><br><span class=\"line\">    h.Write([]<span class=\"keyword\">byte</span>(s))</span><br><span class=\"line\"></span><br><span class=\"line\">    bs := h.Sum(<span class=\"literal\">nil</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(s)</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%x\\n&quot;</span>, bs)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"SHA256\"><a href=\"#SHA256\" class=\"headerlink\" title=\"SHA256\"></a>SHA256</h5><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/hmac&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;crypto/sha256&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/hex&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    secret := <span class=\"string\">&quot;mysecret&quot;</span></span><br><span class=\"line\">    data := <span class=\"string\">&quot;data&quot;</span></span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;Secret: %s Data: %s\\n&quot;</span>, secret, data)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Create a new HMAC by defining the hash type and the key (as byte array)</span></span><br><span class=\"line\">    h := hmac.New(sha256.New, []<span class=\"keyword\">byte</span>(secret))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Write Data to it</span></span><br><span class=\"line\">    h.Write([]<span class=\"keyword\">byte</span>(data))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// Get result and encode as hexadecimal string</span></span><br><span class=\"line\">    sha := hex.EncodeToString(h.Sum(<span class=\"literal\">nil</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Result: &quot;</span> + sha)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-Base64\"><a href=\"#9-Base64\" class=\"headerlink\" title=\"9. Base64\"></a>9. Base64</h3><p>Base64是一种任意二进制到文本字符串的编码方法,常用于在URL,Cookie,网页中传输少量二进制数据. 首先使用Base64编码需要一个含有64个字符的表,这个表由大小写字母,数字,+和/组成.采用Base64编码处理数据时,会把每三个字节共24位作为一个处理单元,再分为四组,每组6位,查表后获得相应的字符即编码后的字符串.编码后的字符串长32位,这样,经Base64编码后,原字符串增长1/3.如果要编码的数据不是3的倍数,最后会剩下一到两个字节,Base64编码中会采用\\x00在处理单元后补全,编码后的字符串最后会加上一到两个 = 表示补了几个字节.</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">   base64Table = <span class=\"string\">&quot;IJjkKLMNO567PQX12RVW3YZaDEFGbcdefghiABCHlSTUmnopqrxyz04stuvw89+/&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> coder = base64.NewEncoding(base64Table)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Base64Encode</span><span class=\"params\">(src []<span class=\"keyword\">byte</span>)</span> []<span class=\"title\">byte</span></span> &#123;         <span class=\"comment\">//编码</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> []<span class=\"keyword\">byte</span>(coder.EncodeToString(src))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Base64Decode</span><span class=\"params\">(src []<span class=\"keyword\">byte</span>)</span> <span class=\"params\">([]<span class=\"keyword\">byte</span>, error)</span></span> &#123;   <span class=\"comment\">//解码</span></span><br><span class=\"line\">   <span class=\"keyword\">return</span> coder.DecodeString(<span class=\"keyword\">string</span>(src))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","categories":["技术","Go"],"tags":["Go","加密解密算法","MD5","Base64","AES","DES","RSA","ecdsa","SHA1","SHA256"]},{"title":"Go 语言JSON","url":"/2022/05/28/Go-%E8%AF%AD%E8%A8%80JSON/","content":"<h1 id=\"Go-语言JSON\"><a href=\"#Go-语言JSON\" class=\"headerlink\" title=\"Go 语言JSON\"></a>Go 语言JSON</h1><p>Go具有对JSON编码和解码的内置支持。它还支持自定义数据类型。</p>\n<p>Marshal函数用于将go数据类型转换为JSON格式。</p>\n<p>Marshal函数的语法为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;func Marshal(v interface&#123;&#125;) ([]byte, error)&quot;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>Marshal返回v的JSON编码。</p>\n<p>布尔值转换为JSON布尔值。浮点数，整数和数字将转换为JSON数字。Map的键类型必须是字符串，整数类型或实现encoding.TextMarshaler。</p>\n<p>JSON的解码是使用Unmarshal函数完成的。</p>\n<p>Unmarshal函数的语法为：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;func Unmarshal(data []byte, v interface&#123;&#125;) error&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>Unmarshal解码JSON编码的值，并将结果存储在v指向的值中。如果v为nil或不是指针，则Unmarshal返回InvalidUnmarshalError。</p>\n<p>我们还可以自定义存储在struct字段标签中“ json”键下的字段。我们可以使用该字段的名称，然后是逗号分隔的选项列表。</p>\n<p>示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">Field <span class=\"keyword\">int</span> <span class=\"string\">&#x27;json:&quot;myName&quot;&#x27;</span> <span class=\"comment\">// 在JSON中显示为键“ myName”。</span></span><br><span class=\"line\">Field <span class=\"keyword\">int</span> <span class=\"string\">&#x27;json:&quot;myName,omitempty?&#x27;</span><span class=\"comment\">//如果该字段的值为空，则从该对象中省略该字段，</span></span><br><span class=\"line\">Field <span class=\"keyword\">int</span> <span class=\"string\">&#x27;json:&quot;-&quot;&#x27;</span> <span class=\"comment\">////字段被这个包忽略。</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Go-JSON示例1\"><a href=\"#Go-JSON示例1\" class=\"headerlink\" title=\"Go JSON示例1\"></a>Go JSON示例1</h2><p>示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    bolType, _ := json.Marshal(<span class=\"literal\">false</span>) <span class=\"comment\">//布尔值</span></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(bolType))</span><br><span class=\"line\">    intType, _ := json.Marshal(<span class=\"number\">10</span>) <span class=\"comment\">// 整数值</span></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(intType))</span><br><span class=\"line\">    fltType, _ := json.Marshal(<span class=\"number\">3.14</span>) <span class=\"comment\">//浮点值</span></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(fltType))</span><br><span class=\"line\">    strType, _ := json.Marshal(<span class=\"string\">&quot;nhooo&quot;</span>) <span class=\"comment\">// 字符串值</span></span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(strType))</span><br><span class=\"line\">    slcA := []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;sun&quot;</span>, <span class=\"string\">&quot;moon&quot;</span>, <span class=\"string\">&quot;star&quot;</span>&#125; <span class=\"comment\">//切片值</span></span><br><span class=\"line\">    slcB, _ := json.Marshal(slcA)</span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(slcB))</span><br><span class=\"line\">    mapA := <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">int</span>&#123;<span class=\"string\">&quot;sun&quot;</span>: <span class=\"number\">1</span>, <span class=\"string\">&quot;moon&quot;</span>: <span class=\"number\">2</span>&#125; <span class=\"comment\">//map值</span></span><br><span class=\"line\">    mapB, _ := json.Marshal(mapA)</span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(mapB))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"number\">3.14</span></span><br><span class=\"line\"><span class=\"string\">&quot;nhooo&quot;</span></span><br><span class=\"line\">[<span class=\"string\">&quot;sun&quot;</span>,<span class=\"string\">&quot;moon&quot;</span>,<span class=\"string\">&quot;star&quot;</span>]</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;moon&quot;</span>:<span class=\"number\">2</span>,<span class=\"string\">&quot;sun&quot;</span>:<span class=\"number\">1</span>&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Go-JSON示例2（用户定义的数据类型）\"><a href=\"#Go-JSON示例2（用户定义的数据类型）\" class=\"headerlink\" title=\"Go JSON示例2（用户定义的数据类型）\"></a>Go JSON示例2（用户定义的数据类型）</h2><p>示例</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;encoding/json&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Response1 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Position   <span class=\"keyword\">int</span></span><br><span class=\"line\">    Planet []<span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Response2 <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Position   <span class=\"keyword\">int</span>      <span class=\"string\">&#x27;json:&quot;position&quot;&#x27;</span></span><br><span class=\"line\">    Planet []<span class=\"keyword\">string</span> <span class=\"string\">&#x27;json:&quot;planet&quot;&#x27;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    res1A := &amp;Response1&#123;</span><br><span class=\"line\">        Position:   <span class=\"number\">1</span>,</span><br><span class=\"line\">        Planet: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;mercury&quot;</span>, <span class=\"string\">&quot;venus&quot;</span>, <span class=\"string\">&quot;earth&quot;</span>&#125;&#125;</span><br><span class=\"line\">    res1B, _ := json.Marshal(res1A)</span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(res1B))</span><br><span class=\"line\"></span><br><span class=\"line\">    res2D := &amp;Response2&#123;</span><br><span class=\"line\">        Position:   <span class=\"number\">1</span>,</span><br><span class=\"line\">        Planet: []<span class=\"keyword\">string</span>&#123;<span class=\"string\">&quot;mercury&quot;</span>, <span class=\"string\">&quot;venus&quot;</span>, <span class=\"string\">&quot;earth&quot;</span>&#125;&#125;</span><br><span class=\"line\">    res2B, _ := json.Marshal(res2D)</span><br><span class=\"line\">    fmt.Println(<span class=\"keyword\">string</span>(res2B))</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    byt := []<span class=\"keyword\">byte</span>(<span class=\"string\">&#x27;&#123;&quot;pi&quot;:6.13,&quot;place&quot;:[&quot;New York&quot;,&quot;New Delhi&quot;]&#125;`)</span></span><br><span class=\"line\"><span class=\"string\">    var dat map[string]interface&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    if err := json.Unmarshal(byt, &amp;dat); err != nil &#123;</span></span><br><span class=\"line\"><span class=\"string\">        panic(err)</span></span><br><span class=\"line\"><span class=\"string\">    &#125;</span></span><br><span class=\"line\"><span class=\"string\">    fmt.Println(dat)</span></span><br><span class=\"line\"><span class=\"string\">    num := dat[&quot;pi&quot;].(float64)</span></span><br><span class=\"line\"><span class=\"string\">    fmt.Println(num)</span></span><br><span class=\"line\"><span class=\"string\">    strs := dat[&quot;place&quot;].([]interface&#123;&#125;)</span></span><br><span class=\"line\"><span class=\"string\">    str1 := strs[0].(string)</span></span><br><span class=\"line\"><span class=\"string\">    fmt.Println(str1)</span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    </span></span><br><span class=\"line\"><span class=\"string\">    str := `&#123;&quot;Position&quot;: 1, &quot;Planet&quot;: [&quot;mercury&quot;, &quot;venus&quot;]&#125;`</span></span><br><span class=\"line\"><span class=\"string\">    res := Response2&#123;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    json.Unmarshal([]byte(str), &amp;res)</span></span><br><span class=\"line\"><span class=\"string\">    fmt.Println(res)</span></span><br><span class=\"line\"><span class=\"string\">    fmt.Println(res.Planet[1])</span></span><br><span class=\"line\"><span class=\"string\">    enc := json.NewEncoder(os.Stdout)</span></span><br><span class=\"line\"><span class=\"string\">    d := map[string]string&#123;&quot;1&quot;:&quot;mercury&quot; , &quot;2&quot;: &quot;venus&quot;&#125;</span></span><br><span class=\"line\"><span class=\"string\">    enc.Encode(d)</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<p>输出：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;<span class=\"string\">&quot;Position&quot;</span>:<span class=\"number\">1</span>,<span class=\"string\">&quot;Planet&quot;</span>:[<span class=\"string\">&quot;mercury&quot;</span>,<span class=\"string\">&quot;venus&quot;</span>,<span class=\"string\">&quot;earth&quot;</span>]&#125;</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;position&quot;</span>:<span class=\"number\">1</span>,<span class=\"string\">&quot;planet&quot;</span>:[<span class=\"string\">&quot;mercury&quot;</span>,<span class=\"string\">&quot;venus&quot;</span>,<span class=\"string\">&quot;earth&quot;</span>]&#125;</span><br><span class=\"line\"><span class=\"keyword\">map</span>[pi:<span class=\"number\">6.13</span> place:[New York New Delhi]]</span><br><span class=\"line\"><span class=\"number\">6.13</span></span><br><span class=\"line\">New York</span><br><span class=\"line\">&#123;<span class=\"number\">1</span> [mercury venus]&#125;</span><br><span class=\"line\">venus</span><br><span class=\"line\">&#123;<span class=\"string\">&quot;1&quot;</span>:<span class=\"string\">&quot;mercury&quot;</span>,<span class=\"string\">&quot;2&quot;</span>:<span class=\"string\">&quot;venus&quot;</span>&#125;</span><br></pre></td></tr></table></figure>","categories":["技术","Go"],"tags":["Go","JSON","Marshal","Unmarshal"]},{"title":"Go 操作RabbitMQ","url":"/2022/05/30/Go-%E6%93%8D%E4%BD%9CRabbitMQ/","content":"<p>在 Go 语言 中，我们要操作 RabbitMQ，我们可以使用 amqp 库，具体地址如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">github.com/streadway/amqp</span><br></pre></td></tr></table></figure>\n\n<p>这里，我们使用 GoMod 工程，直接操作。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"Go语言操作RabbitMQ程序\"><a href=\"#Go语言操作RabbitMQ程序\" class=\"headerlink\" title=\"Go语言操作RabbitMQ程序\"></a>Go语言操作RabbitMQ程序</h3><h4 id=\"生产者\"><a href=\"#生产者\" class=\"headerlink\" title=\"生产者\"></a>生产者</h4><p>我们实现生产者向 RabbitMQ 中写入一条消息，然后消费者获取该消息这么一个简单的功能，具体流程图如下：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/30/gtsAxZl58K7zj6G.png\" alt=\"image.png\"></p>\n<p>需要操作 RabbitMQ，那么我们首先需要连接 RabbitMQ 的服务器，具体代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 尝试连接RabbitMQ，建立连接</span></span><br><span class=\"line\"><span class=\"comment\">// 该连接抽象了套接字连接，并为我们处理协议版本协商和认证等</span></span><br><span class=\"line\">conn, err := amqp.Dial(<span class=\"string\">&quot;amqp://guest:guest@localhost:5672/&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br></pre></td></tr></table></figure>\n\n<p>连接抽象了 socket 连接，并为我们处理协议版本协商和认证等。接下来，我们创建一个通道，这是大多数用于完成任务的 API 所在的位置：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 接下来，我们创建一个通道，大多数API都是用过该通道操作的</span></span><br><span class=\"line\">ch, err := conn.Channel()</span><br><span class=\"line\"><span class=\"keyword\">defer</span> ch.Close()</span><br></pre></td></tr></table></figure>\n\n<p>要发送，我们必须声明要发送到的队列。然后我们可以将消息发布到队列：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 声明消息要发送到的队列</span></span><br><span class=\"line\">q, err := ch.QueueDeclare(</span><br><span class=\"line\">  <span class=\"string\">&quot;hello&quot;</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// delete when unused</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">  <span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">)</span><br><span class=\"line\">body := <span class=\"string\">&quot;Hello World!&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 将消息发布到声明的队列</span></span><br><span class=\"line\">err = ch.Publish(</span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;</span>,     <span class=\"comment\">// exchange</span></span><br><span class=\"line\">  q.Name, <span class=\"comment\">// routing key</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,  <span class=\"comment\">// mandatory</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,  <span class=\"comment\">// immediate</span></span><br><span class=\"line\">  amqp.Publishing &#123;</span><br><span class=\"line\">    ContentType: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">    Body:        []<span class=\"keyword\">byte</span>(body),</span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<p>声明队列是幂等的——仅当队列不存在时才创建。消息内容是一个字节数组，因此你可以在此处编码任何内容。</p>\n<h4 id=\"消费者\"><a href=\"#消费者\" class=\"headerlink\" title=\"消费者\"></a>消费者</h4><p>设置与发布者相同；我们打开一个连接和一个通道，并声明要消耗的队列。请注意，这与 send 发布到的队列匹配。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 建立连接</span></span><br><span class=\"line\">conn, err := amqp.Dial(<span class=\"string\">&quot;amqp://guest:guest@localhost:5672/&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\"><span class=\"comment\">// 获取channel</span></span><br><span class=\"line\">ch, err := conn.Channel()</span><br><span class=\"line\"><span class=\"keyword\">defer</span> ch.Close()</span><br><span class=\"line\"><span class=\"comment\">// 声明队列</span></span><br><span class=\"line\">q, err := ch.QueueDeclare(</span><br><span class=\"line\">  <span class=\"string\">&quot;hello&quot;</span>, <span class=\"comment\">// name</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// durable</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// delete when unused</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,   <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">  <span class=\"literal\">nil</span>,     <span class=\"comment\">// arguments</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>请注意，我们也在这里声明队列。因为我们可能在发布者之前启动使用者，所以我们希望在尝试使用队列中的消息之前确保队列存在。</p>\n<p>我们将告诉服务器将队列中的消息传递给我们。由于它将异步地向我们发送消息，因此我们将在 goroutine 中从通道（由 amqp::Consume 返回）中读取消息。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 获取接收消息的Delivery通道</span></span><br><span class=\"line\">msgs, err := ch.Consume(</span><br><span class=\"line\">  q.Name, <span class=\"comment\">// queue</span></span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;</span>,     <span class=\"comment\">// consumer</span></span><br><span class=\"line\">  <span class=\"literal\">true</span>,   <span class=\"comment\">// auto-ack</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,  <span class=\"comment\">// exclusive</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,  <span class=\"comment\">// no-local</span></span><br><span class=\"line\">  <span class=\"literal\">false</span>,  <span class=\"comment\">// no-wait</span></span><br><span class=\"line\">  <span class=\"literal\">nil</span>,    <span class=\"comment\">// args</span></span><br><span class=\"line\">)</span><br><span class=\"line\">forever := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">bool</span>)</span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">for</span> d := <span class=\"keyword\">range</span> msgs &#123;</span><br><span class=\"line\">    log.Printf(<span class=\"string\">&quot;Received a message: %s&quot;</span>, d.Body)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;()</span><br><span class=\"line\">log.Printf(<span class=\"string\">&quot; [*] Waiting for messages. To exit press CTRL+C&quot;</span>)</span><br><span class=\"line\">&lt;-forever</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h4><p>生产者代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/streadway/amqp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    addr = <span class=\"string\">&quot;amqp://guest:guest@localhost:5672/&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;haicoder(www.haicoder.net)&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span>(</span><br><span class=\"line\">        conn *amqp.Connection</span><br><span class=\"line\">        channel *amqp.Channel</span><br><span class=\"line\">        queue amqp.Queue</span><br><span class=\"line\">        msg = <span class=\"string\">&quot;Hello HaiCoder&quot;</span></span><br><span class=\"line\">        err error</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\">//连接MQServer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> conn, err = amqp.Dial(addr); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Connect RabbitMQ Err =&quot;</span>, err, <span class=\"string\">&quot;Addr =&quot;</span>, addr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//需要关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Channel，所有的连接都是通过Channel管理的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> channel, err = conn.Channel(); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Create Channel Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> queue, err = channel.QueueDeclare(<span class=\"string\">&quot;haicoder&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;QueueDeclare Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//发送数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err = channel.Publish(<span class=\"string\">&quot;&quot;</span>, queue.Name, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, amqp.Publishing&#123;</span><br><span class=\"line\">        ContentType: <span class=\"string\">&quot;text/plain&quot;</span>,</span><br><span class=\"line\">        Body:        []<span class=\"keyword\">byte</span>(msg),</span><br><span class=\"line\">    &#125;); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Publish Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;Send msg ok, msg =&quot;</span>, msg)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>消费者代码如下：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;github.com/streadway/amqp&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"keyword\">const</span>(</span><br><span class=\"line\">    serverAddr = <span class=\"string\">&quot;amqp://guest:guest@localhost:5672/&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;haicoder(www.haicoder.net)&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">var</span>(</span><br><span class=\"line\">        conn *amqp.Connection</span><br><span class=\"line\">        channel *amqp.Channel</span><br><span class=\"line\">        queue amqp.Queue</span><br><span class=\"line\">        msgs &lt;-<span class=\"keyword\">chan</span> amqp.Delivery</span><br><span class=\"line\">        err error</span><br><span class=\"line\">    )</span><br><span class=\"line\">    <span class=\"comment\">//连接MQServer</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> conn, err = amqp.Dial(serverAddr); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Connect RabbitMQ Err =&quot;</span>, err, <span class=\"string\">&quot;Addr =&quot;</span>, serverAddr)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//需要关闭</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> conn.Close()</span><br><span class=\"line\">    <span class=\"comment\">//创建一个Channel，所有的连接都是通过Channel管理的</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> channel, err = conn.Channel(); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Create Channel Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//创建队列</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> queue, err = channel.QueueDeclare(<span class=\"string\">&quot;haicoder&quot;</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;QueueDeclare Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//读取数据</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> msgs, err = channel.Consume(queue.Name, <span class=\"string\">&quot;&quot;</span>, <span class=\"literal\">true</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">false</span>, <span class=\"literal\">nil</span>); err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(<span class=\"string\">&quot;Consume Err =&quot;</span>, err)</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> msgs&#123;</span><br><span class=\"line\">            fmt.Println(<span class=\"string\">&quot;Receive Msg =&quot;</span>, <span class=\"keyword\">string</span>(msg.Body))</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    time.Sleep(<span class=\"number\">100</span>*time.Second)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>现在，我们首先运行生产者，运行后，结果如下：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/30/gcGRp46PEkx9Nns.png\" alt=\"image.png\"></p>\n<p>接着，我们再次启动消费者，运行后，结果如下：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/30/MuNcOJArL3QTG42.png\" alt=\"image.png\"></p>\n<p>同时，我们打开网页，如果没有消费的话，可以看到显示了队列以及有一条消息，如下：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/30/MqWcEVpGwl9NXoH.png\" alt=\"image.png\"></p>\n<h4 id=\"参数说明\"><a href=\"#参数说明\" class=\"headerlink\" title=\"参数说明\"></a>参数说明</h4><p>创建队列的函数 QueueDeclare，相关参数说明如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">name</td>\n<td align=\"left\">队列名，如果为空，则系统自己创建一个名字。</td>\n</tr>\n<tr>\n<td align=\"left\">durable</td>\n<td align=\"left\">是否是持久队列，如果是，那么重启 MQ 之后，该队列不会被删除，否则，该队列会被删除。</td>\n</tr>\n<tr>\n<td align=\"left\">autoDelete</td>\n<td align=\"left\">是否自动删除。如果为true，当没有 Consumer</td>\n</tr>\n<tr>\n<td align=\"left\">exclusive</td>\n<td align=\"left\">是否独占。如果为true，只能有一个消费者监听这队列。</td>\n</tr>\n<tr>\n<td align=\"left\">noWait</td>\n<td align=\"left\">如果为True，那么其他连接尝试修改该队列，将会触发异常。</td>\n</tr>\n<tr>\n<td align=\"left\">args</td>\n<td align=\"left\">额外参数。</td>\n</tr>\n</tbody></table>\n<p>使用 Channel 的发送消息函数 Publish 的相关参数如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">exchange</td>\n<td align=\"left\">交换机名称。简单模式下交换机会使用默认的 “”。</td>\n</tr>\n<tr>\n<td align=\"left\">key</td>\n<td align=\"left\">路由名称。</td>\n</tr>\n<tr>\n<td align=\"left\">mandatory</td>\n<td align=\"left\">如果为 true，那么当没有合适的 RoutingKey 时，将会触发 Channel 的 NotifyReturn。</td>\n</tr>\n<tr>\n<td align=\"left\">immediate</td>\n<td align=\"left\">如果为 true，那么当没有合适的消费着时，将会触发 Channel 的 NotifyReturn。</td>\n</tr>\n<tr>\n<td align=\"left\">msg</td>\n<td align=\"left\">具体要发送消息的结构体。</td>\n</tr>\n</tbody></table>\n<p>使用 Chanel 消费函数 Consume 的相关参数如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">参数</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">queue</td>\n<td align=\"left\">队列名称。</td>\n</tr>\n<tr>\n<td align=\"left\">consumer</td>\n<td align=\"left\">路由名称。</td>\n</tr>\n<tr>\n<td align=\"left\">autoAck</td>\n<td align=\"left\">是否自动确认。</td>\n</tr>\n<tr>\n<td align=\"left\">exclusive</td>\n<td align=\"left\">是否独占。</td>\n</tr>\n<tr>\n<td align=\"left\">noLocal</td>\n<td align=\"left\">未使用的参数。</td>\n</tr>\n<tr>\n<td align=\"left\">noWait</td>\n<td align=\"left\">如果为 True，那么其他连接尝试修改该队列，将会触发异常。</td>\n</tr>\n<tr>\n<td align=\"left\">args</td>\n<td align=\"left\">额外参数。</td>\n</tr>\n</tbody></table>\n","categories":["技术","Go","RabbitMQ"],"tags":["Go","RabbitMQ","amqp 库"]},{"title":"Go 错误、异常处理详解 更详细的使用和细节查看：Go 关键字defer、panic、recover详解","url":"/2022/05/31/Go-%E9%94%99%E8%AF%AF%E3%80%81%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E8%AF%A6%E8%A7%A3-%E6%9B%B4%E8%AF%A6%E7%BB%86%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E7%BB%86%E8%8A%82%E6%9F%A5%E7%9C%8B%EF%BC%9AGo-%E5%85%B3%E9%94%AE%E5%AD%97defer%E3%80%81panic%E3%80%81recover%E8%AF%A6%E8%A7%A3/","content":"<p>错误</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> error <span class=\"keyword\">interface</span> &#123;</span><br><span class=\"line\">    Error() <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>内建error接口类型是约定用于表示错误信息，nil值表示无错误。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"获取error信息\"><a href=\"#获取error信息\" class=\"headerlink\" title=\"获取error信息\"></a>获取error信息</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">_, err := os.Create(<span class=\"string\">&quot;./.??&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">&quot;%v %T\\n&quot;</span>,err,err)</span><br><span class=\"line\">    fmt.Println(err.Error())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<blockquote>\n<p>open ./.??: The filename, directory name, or volume label syntax is incorrect. *fs.PathError<br>open ./.??: The filename, directory name, or volume label syntax is incorrect.</p>\n</blockquote>\n<p>源代码</p>\n<p> src-&gt;os-&gt;error.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PathError = fs.PathError</span><br></pre></td></tr></table></figure>\n\n<p>src-&gt;io-&gt;fs-&gt;fs.go</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> PathError <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Op   <span class=\"keyword\">string</span></span><br><span class=\"line\">    Path <span class=\"keyword\">string</span></span><br><span class=\"line\">    Err  error</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *PathError)</span> <span class=\"title\">Error</span><span class=\"params\">()</span> <span class=\"title\">string</span></span> &#123; <span class=\"keyword\">return</span> e.Op + <span class=\"string\">&quot; &quot;</span> + e.Path + <span class=\"string\">&quot;: &quot;</span> + e.Err.Error() &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *PathError)</span> <span class=\"title\">Unwrap</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123; <span class=\"keyword\">return</span> e.Err &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"params\">(e *PathError)</span> <span class=\"title\">Timeout</span><span class=\"params\">()</span> <span class=\"title\">bool</span></span> &#123;</span><br><span class=\"line\">    t, ok := e.Err.(<span class=\"keyword\">interface</span>&#123; Timeout() <span class=\"keyword\">bool</span> &#125;)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> ok &amp;&amp; t.Timeout()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>PathError是结构体实现了error接口，可以看到结果和源代码的格式一样</p>\n<h3 id=\"error统一定义\"><a href=\"#error统一定义\" class=\"headerlink\" title=\"error统一定义\"></a>error统一定义</h3><p>errors包有</p>\n<blockquote>\n<p>func New(text string) error</p>\n</blockquote>\n<p>使用字符串创建一个错误</p>\n<p>部分朋友一样的错误，每次都New，例如，errors.New(“b can not be zero”)、errors.New(“division by zero”)、errors.New(“division by zero！！！”)</p>\n<p>我们应该学习go的开发者们的写法，将error统一定义，如果比较多，可以单独写一个文件（例如,errors.go）放在包中，比较少的话可以写在本文件</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> divisionByZeroError = errors.New(<span class=\"string\">&quot;division by zero&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"error放在返回值类型列表的最后\"><a href=\"#error放在返回值类型列表的最后\" class=\"headerlink\" title=\"error放在返回值类型列表的最后\"></a>error放在返回值类型列表的最后</h3><p>error放在返回值类型列表的最后</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">division</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>,divisionByZeroError</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a/b,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"多次尝试可避免失败，不必立即返回error\"><a href=\"#多次尝试可避免失败，不必立即返回error\" class=\"headerlink\" title=\"多次尝试可避免失败，不必立即返回error\"></a>多次尝试可避免失败，不必立即返回error</h3><p>这个常见的情况就是写爬虫，由于网络原因，导致连接失败，一般情况下都是用户传一个重试次数retries，或者超时时间timeout，达到条件时才会返回错误或抛出异常。</p>\n<h3 id=\"多层嵌套，给error添加日志-出错位置\"><a href=\"#多层嵌套，给error添加日志-出错位置\" class=\"headerlink\" title=\"多层嵌套，给error添加日志/出错位置\"></a>多层嵌套，给error添加日志/出错位置</h3><p>go的标准库的日志不是很强大，这里就不展示日志了，可以标出出错位置</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">positionError</span><span class=\"params\">(file,line <span class=\"keyword\">string</span>,err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(file+<span class=\"string\">&quot; &quot;</span>+ line + <span class=\"string\">&quot;:&quot;</span>+err.Error())</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>我们写一个正整数除法，调用前面的函数（有修改，查看全部代码）</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>,positionError(<span class=\"string\">&quot;err.go&quot;</span>,<span class=\"string\">&quot;28&quot;</span>,negativeError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">       _, err = cal(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">fmt.Println(err)</span><br><span class=\"line\">_,err = cal(<span class=\"number\">-3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">fmt.Println(err)</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<blockquote>\n<p>err.go 20:division by zero<br>err.go 28:calculate negative number</p>\n</blockquote>\n<p>异常</p>\n<p>有时程序出错是不可控的或很难判断的，如数组越界、空指针，这是就需要用到panic</p>\n<h3 id=\"panic\"><a href=\"#panic\" class=\"headerlink\" title=\"panic\"></a>panic</h3><blockquote>\n<p>func panic(v interface{})</p>\n</blockquote>\n<p>内建函数panic停止当前goroutine的正常执行。当函数F调用panic时，F的正常执行就会立刻停止。F中defer的所有函数先入后出执行后，F返回给其调用者G。G如同F一样行动，层层返回，直到该Go程中所有函数都按相反的顺序停止执行。之后，程序被终止，而错误情况会被报告，包括引发该panic的实参值，此终止序列称为panic过程。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用panic</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal2</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;cannot use negative number&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<blockquote>\n<p>panic: cannot use negative number</p>\n</blockquote>\n<p>goroutine 1 [running]:<br>main.cal2(0x1, 0xffffffffffffffff, 0xc0000d5f28, 0x1, 0x1)<br>        E:/Workspace/Go_workspace/learn_go/src/learnerr/main/err.go:36 +0x8a<br>main.main()<br>        E:/Workspace/Go_workspace/learn_go/src/learnerr/main/err.go:52 +0x2af<br>exit status 2</p>\n<h3 id=\"recover\"><a href=\"#recover\" class=\"headerlink\" title=\"recover\"></a>recover</h3><p>有时异常是我们意料之外的，需要进行恢复，不影响后序程序的执行，这时，就需要recover</p>\n<blockquote>\n<p>func recover() interface{}</p>\n</blockquote>\n<p>内建函数recover允许程序管理panic过程中的goroutine。在defer的函数中，执行recover调用会取回传至panic调用的错误值，恢复正常执行，停止恐慌过程。若recover在defer的函数之外被调用，它将不会停止panic过程序列。在此情况下，或当该goroutine不在panic过程中时，或提供给panic的实参为nil时，recover就会返回nil。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal2</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;cannot use negative number&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    err := <span class=\"built_in\">recover</span>()</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>,err.(error)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">       res,err := cal2(<span class=\"number\">1</span>,<span class=\"number\">-1</span>)</span><br><span class=\"line\">fmt.Println(res)</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<blockquote>\n<p>panic: cannot use negative number<br>goroutine 1 [running]:<br>main.cal2(0x1, 0xffffffffffffffff, 0xc0000d5f28, 0x1, 0x1)<br>        E:/Workspace/Go_workspace/learn_go/src/learnerr/main/err.go:37 +0x185<br>main.main()<br>        E:/Workspace/Go_workspace/learn_go/src/learnerr/main/err.go:59 +0x2bb<br>exit status 2</p>\n</blockquote>\n<p>可见，不在defer 的函数中使用recover是没有意义的</p>\n<p>修改到defer的函数中</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal2</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>();err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;cannot use negative number&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>结果：</p>\n<blockquote>\n<p>cannot use negative number<br>0</p>\n</blockquote>\n<p>可以看到，虽然输出了panic函数中的话，但是没有panic，程序继续执行，输出了res</p>\n<p>更详细的使用和细节查看：Go-关键字defer、panic、recover详解</p>\n<p>全部代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">    <span class=\"string\">&quot;errors&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">    <span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// error统一定义</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> divisionByZeroError = errors.New(<span class=\"string\">&quot;division by zero&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">var</span> negativeError = errors.New(<span class=\"string\">&quot;calculate negative number&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 记录错误发生的文件和函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">positionError</span><span class=\"params\">(file,line <span class=\"keyword\">string</span>,err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> errors.New(file+<span class=\"string\">&quot; &quot;</span>+ line + <span class=\"string\">&quot;:&quot;</span>+err.Error())</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 除法函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">division</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> b == <span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>,positionError(<span class=\"string\">&quot;err.go&quot;</span>,<span class=\"string\">&quot;20&quot;</span>,divisionByZeroError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> a/b,<span class=\"literal\">nil</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 计算正整数除法</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>,positionError(<span class=\"string\">&quot;err.go&quot;</span>,<span class=\"string\">&quot;28&quot;</span>,negativeError)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用panic</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">cal2</span><span class=\"params\">(a,b <span class=\"keyword\">int</span>)</span> <span class=\"params\">(<span class=\"keyword\">int</span>,error)</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err := <span class=\"built_in\">recover</span>();err!=<span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">            fmt.Println(err)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a&lt;=<span class=\"number\">0</span> || b&lt;<span class=\"number\">0</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(<span class=\"string\">&quot;cannot use negative number&quot;</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//不在defer中使用recover是没有意义的</span></span><br><span class=\"line\">    <span class=\"comment\">//err := recover()</span></span><br><span class=\"line\">    <span class=\"comment\">//fmt.Println(err)</span></span><br><span class=\"line\">    <span class=\"comment\">//if err != nil&#123;</span></span><br><span class=\"line\">    <span class=\"comment\">//    return 0,err.(error)</span></span><br><span class=\"line\">    <span class=\"comment\">//&#125;</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> division(a,b)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span>  &#123;</span><br><span class=\"line\">    <span class=\"comment\">//-----------获取err信息------------</span></span><br><span class=\"line\">    _, err := os.Create(<span class=\"string\">&quot;./.??&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span>&#123;</span><br><span class=\"line\">        fmt.Printf(<span class=\"string\">&quot;%v %T\\n&quot;</span>,err,err)</span><br><span class=\"line\">        fmt.Println(err.Error())</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//----------嵌套error，标明位置</span></span><br><span class=\"line\">    _, err = cal(<span class=\"number\">3</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    _,err = cal(<span class=\"number\">-3</span>,<span class=\"number\">3</span>)</span><br><span class=\"line\">    fmt.Println(err)</span><br><span class=\"line\">    res,err := cal2(<span class=\"number\">1</span>,<span class=\"number\">2</span>)</span><br><span class=\"line\">    fmt.Println(res)</span><br><span class=\"line\">    fmt.Println(fmt.Errorf(<span class=\"string\">&quot;line %d, error:%s&quot;</span>,<span class=\"number\">69</span>,negativeError))</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>运行截图</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/31/xkiZVwvRa3Adog1.png\" alt=\"image.png\"></p>\n<p>总结<br>错误是可控的，是程序定义的<br>异常是未意料到的<br>尽量使用error显式返回错误，而不是panic<br>error应该统一定义，添加位置等信息</p>\n<p>————————-2021年5月29日 更新—————————–</p>\n<p>fmt中有生成error的函数，</p>\n<blockquote>\n<p>func Errorf(format string, a …interface{}) error</p>\n</blockquote>\n<p>Errorf根据format参数生成格式化字符串并返回一个包含该字符串的错误。</p>\n<p> 测试代码</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">fmt.Println(fmt.Errorf(<span class=\"string\">&quot;line %d, error:%s&quot;</span>,<span class=\"number\">69</span>,negativeError))</span><br></pre></td></tr></table></figure>\n<p>结果</p>\n<blockquote>\n<p>line 69, error:calculate negative number</p>\n</blockquote>\n","categories":["技术","Go"],"tags":["Go","Go 异常处理","defer","panic","recover"]},{"title":"Go 操作Redis","url":"/2022/05/30/Go-%E6%93%8D%E4%BD%9CRedis/","content":"<p>我们平时开发会经常用到redis。redis的应用场景有很多，在这就不介绍了，也不是本文的重点，接下来带大家了解一下如何用golang操作redis。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"1-安装依赖包\"><a href=\"#1-安装依赖包\" class=\"headerlink\" title=\"1.安装依赖包\"></a>1.安装依赖包</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> get -u github.com/<span class=\"keyword\">go</span>-redis/redis</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-golang连接redis\"><a href=\"#2-golang连接redis\" class=\"headerlink\" title=\"2.golang连接redis\"></a>2.golang连接redis</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 根据redis配置初始化一个客户端</span></span><br><span class=\"line\">client := redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">        Addr:     <span class=\"string\">&quot;localhost:6379&quot;</span>, <span class=\"comment\">// redis地址</span></span><br><span class=\"line\">        Password: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">// redis密码，没有则留空</span></span><br><span class=\"line\">        DB:       <span class=\"number\">0</span>,  <span class=\"comment\">// 默认数据库，默认是0</span></span><br><span class=\"line\">    &#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-简单的例子\"><a href=\"#3-简单的例子\" class=\"headerlink\" title=\"3.简单的例子\"></a>3.简单的例子</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\">// 根据redis配置初始化一个客户端</span></span><br><span class=\"line\">client := redis.NewClient(&amp;redis.Options&#123;</span><br><span class=\"line\">    Addr:     <span class=\"string\">&quot;10.14.181.120:6379&quot;</span>, <span class=\"comment\">// redis地址</span></span><br><span class=\"line\">    Password: <span class=\"string\">&quot;&quot;</span>, <span class=\"comment\">// redis密码，没有则留空</span></span><br><span class=\"line\">    DB:       <span class=\"number\">0</span>,  <span class=\"comment\">// 默认数据库，默认是0</span></span><br><span class=\"line\">    PoolSize: <span class=\"number\">10</span>,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//ping := client.Ping()</span></span><br><span class=\"line\"><span class=\"comment\">//fmt.Println(ping)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置一个key，过期时间为0，意思就是永远不过期</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"number\">100</span>; i++ &#123;</span><br><span class=\"line\">    err := client.Set(<span class=\"string\">&quot;key&quot;</span>+strconv.Itoa(i), <span class=\"string\">&quot;value&quot;</span>+strconv.Itoa(i), time.Hour*<span class=\"number\">1</span>).Err()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 检测设置是否成功</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 根据key查询缓存，通过Result函数返回两个值</span></span><br><span class=\"line\"><span class=\"comment\">//  第一个代表key的值，第二个代表查询错误信息</span></span><br><span class=\"line\">val := client.Get(<span class=\"string\">&quot;key&quot;</span>).Val()</span><br><span class=\"line\"><span class=\"keyword\">if</span> val == <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;取值是null&quot;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;key&quot;</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\">keys := client.Keys(<span class=\"string\">&quot;*&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> e,v := <span class=\"keyword\">range</span> keys.Val() &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;------&quot;</span>,e,v)</span><br><span class=\"line\">    <span class=\"comment\">//client.Del(v)</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>接下来我们具体详细的讲解一下相关参数：</p>\n<p>通过例子，我们知道主要通过Options配置redis的连接参数，下面对Options参数进行详细说明。</p>\n<blockquote>\n<p>提示：go-redis包自带了连接池，会自动维护redis连接，因此创建一次client即可，不要查询一次redis就关闭client。</p>\n</blockquote>\n<h3 id=\"4-Options参数详解\"><a href=\"#4-Options参数详解\" class=\"headerlink\" title=\"4.Options参数详解\"></a>4.Options参数详解</h3><figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Options <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 网络类型 tcp 或者 unix.</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 tcp.</span></span><br><span class=\"line\">    Network <span class=\"keyword\">string</span></span><br><span class=\"line\">    <span class=\"comment\">// redis地址，格式 host:port</span></span><br><span class=\"line\">    Addr <span class=\"keyword\">string</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 新建一个redis连接的时候，会回调这个函数</span></span><br><span class=\"line\">    OnConnect <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(*Conn)</span> <span class=\"title\">error</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// redis密码，redis server没有设置可以为空。</span></span><br><span class=\"line\">    Password <span class=\"keyword\">string</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// redis数据库，序号从0开始，默认是0，可以不用设置</span></span><br><span class=\"line\">    DB <span class=\"keyword\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// redis操作失败最大重试次数，默认不重试。</span></span><br><span class=\"line\">    MaxRetries <span class=\"keyword\">int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最小重试时间间隔.</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 8ms ; -1 表示关闭.</span></span><br><span class=\"line\">    MinRetryBackoff time.Duration</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 最大重试时间间隔</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 512ms; -1 表示关闭.</span></span><br><span class=\"line\">    MaxRetryBackoff time.Duration</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// redis连接超时时间.</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 5 秒.</span></span><br><span class=\"line\">    DialTimeout time.Duration</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// socket读取超时时间</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认 3 秒.</span></span><br><span class=\"line\">    ReadTimeout time.Duration</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// socket写超时时间</span></span><br><span class=\"line\">    WriteTimeout time.Duration</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// redis连接池的最大连接数.</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认连接池大小等于 cpu个数 * 10</span></span><br><span class=\"line\">    PoolSize <span class=\"keyword\">int</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// redis连接池最小空闲连接数.</span></span><br><span class=\"line\">    MinIdleConns <span class=\"keyword\">int</span></span><br><span class=\"line\">    <span class=\"comment\">// redis连接最大的存活时间，默认不会关闭过时的连接.</span></span><br><span class=\"line\">    MaxConnAge time.Duration</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">// 当你从redis连接池获取一个连接之后，连接池最多等待这个拿出去的连接多长时间。</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是等待 ReadTimeout + 1 秒.</span></span><br><span class=\"line\">    PoolTimeout time.Duration</span><br><span class=\"line\">    <span class=\"comment\">// redis连接池多久会关闭一个空闲连接.</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 5 分钟. -1 则表示关闭这个配置项</span></span><br><span class=\"line\">    IdleTimeout time.Duration</span><br><span class=\"line\">    <span class=\"comment\">// 多长时间检测一下，空闲连接</span></span><br><span class=\"line\">    <span class=\"comment\">// 默认是 1 分钟. -1 表示关闭空闲连接检测</span></span><br><span class=\"line\">    IdleCheckFrequency time.Duration</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 只读设置，如果设置为true， redis只能查询缓存不能更新。</span></span><br><span class=\"line\">    readOnly <span class=\"keyword\">bool</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"5-基本操作\"><a href=\"#5-基本操作\" class=\"headerlink\" title=\"5.基本操作\"></a>5.基本操作</h3><p>redis基本的key/value操作，指的是针对value值的类型为字符串或者数字类型的读写操作。</p>\n<p>golang redis常用函数列表：</p>\n<ul>\n<li>Set - 设置一个key的值</li>\n<li>Get - 查询key的值</li>\n<li>GetSet - 设置一个key的值，并返回这个key的旧值</li>\n<li>SetNX - 如果key不存在，则设置这个key的值</li>\n<li>MGet - 批量查询key的值</li>\n<li>MSet - 批量设置key的值</li>\n<li>Incr,IncrBy,IncrByFloat - 针对一个key的数值进行递增操作</li>\n<li>Decr,DecrBy - 针对一个key的数值进行递减操作</li>\n<li>Del - 删除key操作，可以批量删除</li>\n<li>Expire - 设置key的过期时间</li>\n</ul>\n<h4 id=\"1-Set\"><a href=\"#1-Set\" class=\"headerlink\" title=\"1.Set\"></a>1.Set</h4><p>设置一个key的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三个参数代表key的过期时间，0代表不会过期。</span></span><br><span class=\"line\">err := client.Set(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-Get\"><a href=\"#2-Get\" class=\"headerlink\" title=\"2.Get\"></a>2.Get</h4><p>查询key的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Result函数返回两个值，第一个是key的值，第二个是错误信息</span></span><br><span class=\"line\">oldVal, err := client.GetSet(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;new value&quot;</span>).Result()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印key的旧值</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;key&quot;</span>, oldVal)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-GetSet\"><a href=\"#3-GetSet\" class=\"headerlink\" title=\"3.GetSet\"></a>3.GetSet</h4><p>设置一个key的值，并返回这个key的旧值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Result函数返回两个值，第一个是key的值，第二个是错误信息</span></span><br><span class=\"line\">oldVal, err := client.GetSet(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;new value&quot;</span>).Result()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 打印key的旧值</span></span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;key&quot;</span>, oldVal)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-SetNX\"><a href=\"#4-SetNX\" class=\"headerlink\" title=\"4.SetNX\"></a>4.SetNX</h4><p>如果key不存在，则设置这个key的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 第三个参数代表key的过期时间，0代表不会过期。</span></span><br><span class=\"line\">err := client.SetNX(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;value&quot;</span>, <span class=\"number\">0</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-MGet\"><a href=\"#5-MGet\" class=\"headerlink\" title=\"5.MGet\"></a>5.MGet</h4><p>批量查询key的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// MGet函数可以传入任意个key，一次性返回多个值。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里Result返回两个值，第一个值是一个数组，第二个值是错误信息</span></span><br><span class=\"line\">vals, err := client.MGet(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>, <span class=\"string\">&quot;key3&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(vals)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-MSet\"><a href=\"#6-MSet\" class=\"headerlink\" title=\"6.MSet\"></a>6.MSet</h4><p>批量设置key的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err := client.MSet(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;value1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>, <span class=\"string\">&quot;value2&quot;</span>, <span class=\"string\">&quot;key3&quot;</span>, <span class=\"string\">&quot;value3&quot;</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-Incr-IncrBy\"><a href=\"#7-Incr-IncrBy\" class=\"headerlink\" title=\"7.Incr,IncrBy\"></a>7.Incr,IncrBy</h4><p>针对一个key的数值进行递增操作</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Incr函数每次加一</span></span><br><span class=\"line\">val, err := client.Incr(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;最新值&quot;</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IncrBy函数，可以指定每次递增多少</span></span><br><span class=\"line\">val, err := client.IncrBy(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;最新值&quot;</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// IncrByFloat函数，可以指定每次递增多少，跟IncrBy的区别是累加的是浮点数</span></span><br><span class=\"line\">val, err := client.IncrByFloat(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;最新值&quot;</span>, val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-Decr-DecrBy\"><a href=\"#8-Decr-DecrBy\" class=\"headerlink\" title=\"8.Decr,DecrBy\"></a>8.Decr,DecrBy</h4><p>针对一个key的数值进行递减操作</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Decr函数每次减一</span></span><br><span class=\"line\">val, err := client.Decr(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;最新值&quot;</span>, val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// DecrBy函数，可以指定每次递减多少</span></span><br><span class=\"line\">val, err := client.DecrBy(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(<span class=\"string\">&quot;最新值&quot;</span>, val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-Del\"><a href=\"#9-Del\" class=\"headerlink\" title=\"9.Del\"></a>9.Del</h4><p>删除key操作，支持批量删除</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除key</span></span><br><span class=\"line\">client.Del(<span class=\"string\">&quot;key&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除多个key, Del函数支持删除多个key</span></span><br><span class=\"line\">err := client.Del(<span class=\"string\">&quot;key1&quot;</span>, <span class=\"string\">&quot;key2&quot;</span>, <span class=\"string\">&quot;key3&quot;</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-Expire\"><a href=\"#10-Expire\" class=\"headerlink\" title=\"10.Expire\"></a>10.Expire</h4><p>设置key的过期时间,单位秒</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">client.Expire(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"6-hash相关\"><a href=\"#6-hash相关\" class=\"headerlink\" title=\"6.hash相关\"></a>6.hash相关</h3><p>如果你希望key/value的值也能作为hash结构进行操作，可以选择redis hash类型。</p>\n<p>使用场景举例：<br>如果我们希望缓存一条用户信息(包括用户id、用户名、email字段)，希望能够做到局部读写用户信息（例如：读写用户名），也能够读取整条用户信息，那么hash类型就支持这些操作。</p>\n<p>redis hash操作主要有2-3个元素组成：</p>\n<ul>\n<li>key - redis key 唯一标识</li>\n<li>field - hash数据的字段名</li>\n<li>value - 值，有些操作不需要值</li>\n</ul>\n<p>go redis hash数据常用函数：</p>\n<ul>\n<li>HSet - 根据key和field字段设置，field字段的值</li>\n<li>HGet - 根据key和field字段，查询field字段的值</li>\n<li>HGetAll - 根据key查询所有字段和值</li>\n<li>HIncrBy - 根据key和field字段，累加数值。</li>\n<li>HKeys - 根据key返回所有字段名</li>\n<li>HLen - 根据key，查询hash的字段数量</li>\n<li>HMGet - 根据key和多个字段名，批量查询多个hash字段值</li>\n<li>HMSet - 根据key和多个字段名和字段值，批量设置hash字段值</li>\n<li>HSetNX - 如果field字段不存在，则设置hash字段值</li>\n<li>HDel - 根据key和字段名，删除hash字段，支持批量删除hash字段</li>\n<li>HExists - 检测hash字段名是否存在。</li>\n</ul>\n<blockquote>\n<p>提示：不管我们选择redis什么类型的数据，操作的时候都必须要有一个唯一的Key, 用来唯一标识一个数据。</p>\n</blockquote>\n<h4 id=\"1-HSet\"><a href=\"#1-HSet\" class=\"headerlink\" title=\"1.HSet\"></a>1.HSet</h4><p>根据key和field字段设置，field字段的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user_1 是hash key，username 是字段名, tizi365是字段值</span></span><br><span class=\"line\">err := client.HSet(<span class=\"string\">&quot;user_1&quot;</span>, <span class=\"string\">&quot;username&quot;</span>, <span class=\"string\">&quot;tizi365&quot;</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-HGet\"><a href=\"#2-HGet\" class=\"headerlink\" title=\"2.HGet\"></a>2.HGet</h4><p>根据key和field字段，查询field字段的值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// user_1 是hash key，username是字段名</span></span><br><span class=\"line\">username, err := client.HGet(<span class=\"string\">&quot;user_1&quot;</span>, <span class=\"string\">&quot;username&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(username)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-HGetAll\"><a href=\"#3-HGetAll\" class=\"headerlink\" title=\"3.HGetAll\"></a>3.HGetAll</h4><p>根据key查询所有字段和值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 一次性返回key=user_1的所有hash字段和值</span></span><br><span class=\"line\">data, err := client.HGetAll(<span class=\"string\">&quot;user_1&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// data是一个map类型，这里使用使用循环迭代输出</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> field, val := <span class=\"keyword\">range</span> data &#123;</span><br><span class=\"line\">    fmt.Println(field,val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-HIncrBy\"><a href=\"#4-HIncrBy\" class=\"headerlink\" title=\"4.HIncrBy\"></a>4.HIncrBy</h4><p>根据key和field字段，累加字段的数值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 累加count字段的值，一次性累加2， user_1为hash key</span></span><br><span class=\"line\">count, err := client.HIncrBy(<span class=\"string\">&quot;user_1&quot;</span>, <span class=\"string\">&quot;count&quot;</span>, <span class=\"number\">2</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(count)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-HKeys\"><a href=\"#5-HKeys\" class=\"headerlink\" title=\"5.HKeys\"></a>5.HKeys</h4><p>根据key返回所有字段名</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// keys是一个string数组</span></span><br><span class=\"line\">keys, err := client.HKeys(<span class=\"string\">&quot;user_1&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(keys)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-HLen\"><a href=\"#6-HLen\" class=\"headerlink\" title=\"6.HLen\"></a>6.HLen</h4><p>根据key，查询hash的字段数量</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">size, err := client.HLen(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(size)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-HMGet\"><a href=\"#7-HMGet\" class=\"headerlink\" title=\"7.HMGet\"></a>7.HMGet</h4><p>根据key和多个字段名，批量查询多个hash字段值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// HMGet支持多个field字段名，意思是一次返回多个字段值</span></span><br><span class=\"line\">vals, err := client.HMGet(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;field1&quot;</span>, <span class=\"string\">&quot;field2&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vals是一个数组</span></span><br><span class=\"line\">fmt.Println(vals)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-HMSet\"><a href=\"#8-HMSet\" class=\"headerlink\" title=\"8.HMSet\"></a>8.HMSet</h4><p>根据key和多个字段名和字段值，批量设置hash字段值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化hash数据的多个字段值</span></span><br><span class=\"line\">data := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]<span class=\"keyword\">interface</span>&#123;&#125;)</span><br><span class=\"line\">data[<span class=\"string\">&quot;id&quot;</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">data[<span class=\"string\">&quot;username&quot;</span>] = <span class=\"string\">&quot;tizi&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 一次性保存多个hash字段值</span></span><br><span class=\"line\">err := client.HMSet(<span class=\"string\">&quot;key&quot;</span>, data).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-HSetNX\"><a href=\"#9-HSetNX\" class=\"headerlink\" title=\"9.HSetNX\"></a>9.HSetNX</h4><p>如果field字段不存在，则设置hash字段值</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">err := client.HSetNX(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;id&quot;</span>, <span class=\"number\">100</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-HDel\"><a href=\"#10-HDel\" class=\"headerlink\" title=\"10.HDel\"></a>10.HDel</h4><p>根据key和字段名，删除hash字段，支持批量删除hash字段</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除一个字段id</span></span><br><span class=\"line\">client.HDel(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;id&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除多个字段</span></span><br><span class=\"line\">client.HDel(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;id&quot;</span>, <span class=\"string\">&quot;username&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-HExists\"><a href=\"#11-HExists\" class=\"headerlink\" title=\"11.HExists\"></a>11.HExists</h4><p>检测hash字段名是否存在。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测id字段是否存在</span></span><br><span class=\"line\">err := client.HExists(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;id&quot;</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-list的相关用法\"><a href=\"#7-list的相关用法\" class=\"headerlink\" title=\"7.list的相关用法\"></a>7.list的相关用法</h3><p>Redis列表是简单的字符串列表，列表是有序的，列表中的元素可以重复。</p>\n<p>可以添加一个元素到列表的头部（左边）或者尾部（右边）</p>\n<p>golang redis list数据操作常用函数：</p>\n<ul>\n<li>LPush - 从列表左边插入数据</li>\n<li>LPushX - 跟LPush的区别是，仅当列表存在的时候才插入数据</li>\n<li>RPop - 从列表的右边删除第一个数据，并返回删除的数据</li>\n<li>RPush - 从列表右边插入数据</li>\n<li>RPushX - 跟RPush的区别是，仅当列表存在的时候才插入数据</li>\n<li>LPop - 从列表左边删除第一个数据，并返回删除的数据</li>\n<li>LLen - 返回列表的大小</li>\n<li>LRange - 返回列表的一个范围内的数据，也可以返回全部数据</li>\n<li>LRem - 删除列表中的数据</li>\n<li>LIndex - 根据索引坐标，查询列表中的数据</li>\n<li>LInsert - 在指定位置插入数据</li>\n</ul>\n<h4 id=\"1-LPush\"><a href=\"#1-LPush\" class=\"headerlink\" title=\"1.LPush\"></a>1.LPush</h4><p>从列表左边插入数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入一个数据</span></span><br><span class=\"line\">client.LPush(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;data1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// LPush支持一次插入任意个数据</span></span><br><span class=\"line\">err := client.LPush(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-LPushX\"><a href=\"#2-LPushX\" class=\"headerlink\" title=\"2.LPushX\"></a>2.LPushX</h4><p>跟LPush的区别是，仅当列表存在的时候才插入数据,用法完全一样。</p>\n<h4 id=\"3-RPop\"><a href=\"#3-RPop\" class=\"headerlink\" title=\"3.RPop\"></a>3.RPop</h4><p>从列表的右边删除第一个数据，并返回删除的数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">val, err := client.RPop(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-RPush\"><a href=\"#4-RPush\" class=\"headerlink\" title=\"4.RPush\"></a>4.RPush</h4><p>从列表右边插入数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 插入一个数据</span></span><br><span class=\"line\">client.RPush(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;data1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 支持一次插入任意个数据</span></span><br><span class=\"line\">err := client.RPush(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-RPushX\"><a href=\"#5-RPushX\" class=\"headerlink\" title=\"5.RPushX\"></a>5.RPushX</h4><p>跟RPush的区别是，仅当列表存在的时候才插入数据, 他们用法一样</p>\n<h4 id=\"6-LPop\"><a href=\"#6-LPop\" class=\"headerlink\" title=\"6.LPop\"></a>6.LPop</h4><p>从列表左边删除第一个数据，并返回删除的数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">val, err := client.LPop(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-LLen\"><a href=\"#7-LLen\" class=\"headerlink\" title=\"7.LLen\"></a>7.LLen</h4><p>返回列表的大小</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">val, err := client.LLen(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"8-LRange\"><a href=\"#8-LRange\" class=\"headerlink\" title=\"8.LRange\"></a>8.LRange</h4><p>返回列表的一个范围内的数据，也可以返回全部数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回从0开始到-1位置之间的数据，意思就是返回全部数据</span></span><br><span class=\"line\">vals, err := client.LRange(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">0</span>,<span class=\"number\">-1</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(vals)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-LRem\"><a href=\"#9-LRem\" class=\"headerlink\" title=\"9.LRem\"></a>9.LRem</h4><p>删除列表中的数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从列表左边开始，删除100， 如果出现重复元素，仅删除1次，也就是删除第一个</span></span><br><span class=\"line\">dels, err := client.LRem(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">1</span>,<span class=\"number\">100</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果存在多个100，则从列表左边开始删除2个100</span></span><br><span class=\"line\">client.LRem(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">2</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果存在多个100，则从列表右边开始删除2个100</span></span><br><span class=\"line\"><span class=\"comment\">// 第二个参数负数表示从右边开始删除几个等于100的元素</span></span><br><span class=\"line\">client.LRem(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">-2</span>,<span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 如果存在多个100，第二个参数为0，表示删除所有元素等于100的数据</span></span><br><span class=\"line\">client.LRem(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">0</span>,<span class=\"number\">100</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-LIndex\"><a href=\"#10-LIndex\" class=\"headerlink\" title=\"10.LIndex\"></a>10.LIndex</h4><p>根据索引坐标，查询列表中的数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 列表索引从0开始计算，这里返回第6个元素</span></span><br><span class=\"line\">val, err := client.LIndex(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">5</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">fmt.Println(val)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-LInsert\"><a href=\"#11-LInsert\" class=\"headerlink\" title=\"11.LInsert\"></a>11.LInsert</h4><p>在指定位置插入数据</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 在列表中5的前面插入4</span></span><br><span class=\"line\"><span class=\"comment\">// before是之前的意思</span></span><br><span class=\"line\">err := client.LInsert(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;before&quot;</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在列表中 tizi365 元素的前面插入 欢迎你</span></span><br><span class=\"line\">client.LInsert(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;before&quot;</span>, <span class=\"string\">&quot;tizi365&quot;</span>, <span class=\"string\">&quot;欢迎你&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 在列表中 tizi365 元素的后面插入 2019</span></span><br><span class=\"line\">client.LInsert(<span class=\"string\">&quot;key&quot;</span>,<span class=\"string\">&quot;after&quot;</span>, <span class=\"string\">&quot;tizi365&quot;</span>, <span class=\"string\">&quot;2019&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"8-set的相关用法\"><a href=\"#8-set的相关用法\" class=\"headerlink\" title=\"8.set的相关用法\"></a>8.set的相关用法</h3><p>redis的set类型（集合）是string类型数值的无序集合，并且集合元素唯一。</p>\n<p>下面介绍go redis的集合用法。</p>\n<p>go redis 集合（set）常用函数列表：</p>\n<ul>\n<li>SAdd - 添加集合元素</li>\n<li>SCard - 获取集合元素个数</li>\n<li>SIsMember - 判断元素是否在集合中</li>\n<li>SMembers - 获取集合中所有的元素</li>\n<li>SRem - 删除集合元素</li>\n<li>SPop,SPopN - 随机返回集合中的元素，并且删除返回的元素</li>\n</ul>\n<h4 id=\"1-SAdd\"><a href=\"#1-SAdd\" class=\"headerlink\" title=\"1.SAdd\"></a>1.SAdd</h4><p>添加集合元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加100到集合中</span></span><br><span class=\"line\">err := client.SAdd(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">100</span>).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 将100,200,300添加到集合中</span></span><br><span class=\"line\">client.SAdd(<span class=\"string\">&quot;key&quot;</span>,<span class=\"number\">100</span>, <span class=\"number\">200</span>, <span class=\"number\">300</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-SCard\"><a href=\"#2-SCard\" class=\"headerlink\" title=\"2.SCard\"></a>2.SCard</h4><p>获取集合元素个数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">size, err := client.SCard(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(size)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-SIsMember\"><a href=\"#3-SIsMember\" class=\"headerlink\" title=\"3.SIsMember\"></a>3.SIsMember</h4><p>判断元素是否在集合中</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 检测100是否包含在集合中</span></span><br><span class=\"line\">ok, _ := client.SIsMember(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">100</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> ok &#123;</span><br><span class=\"line\">    fmt.Println(<span class=\"string\">&quot;集合包含指定元素&quot;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-SMembers\"><a href=\"#4-SMembers\" class=\"headerlink\" title=\"4.SMembers\"></a>4.SMembers</h4><p>获取集合中所有的元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">es, _ := client.SMembers(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"comment\">// 返回的es是string数组</span></span><br><span class=\"line\">fmt.Println(es)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-SRem\"><a href=\"#5-SRem\" class=\"headerlink\" title=\"5.SRem\"></a>5.SRem</h4><p>删除集合元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除集合中的元素100</span></span><br><span class=\"line\">client.SRem(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">100</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除集合中的元素tizi和2019</span></span><br><span class=\"line\">client.SRem(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;tizi&quot;</span>, <span class=\"string\">&quot;2019&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"6-SPop-SPopN\"><a href=\"#6-SPop-SPopN\" class=\"headerlink\" title=\"6.SPop,SPopN\"></a>6.SPop,SPopN</h4><p>随机返回集合中的元素，并且删除返回的元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 随机返回集合中的一个元素，并且删除这个元素</span></span><br><span class=\"line\">val, _ := client.SPop(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\">fmt.Println(val)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 随机返回集合中的5个元素，并且删除这些元素</span></span><br><span class=\"line\">vals, _ := client.SPopN(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">5</span>).Result()</span><br><span class=\"line\">fmt.Println(vals)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"9-zset的相关用法\"><a href=\"#9-zset的相关用法\" class=\"headerlink\" title=\"9.zset的相关用法\"></a>9.zset的相关用法</h3><p>Redis 有序集合（sorted set）和集合一样也是string类型元素的集合,且不允许重复的成员，不同的是每个元素都会关联一个double类型的分数，这个分数主要用于集合元素排序。</p>\n<p>下面介绍golang redis 有序集合的用法</p>\n<p>go redis有序集合常用函数:</p>\n<ul>\n<li>ZAdd - 添加一个或者多个元素到集合，如果元素已经存在则更新分数</li>\n<li>ZCard - 返回集合元素个数</li>\n<li>ZCount - 统计某个分数范围内的元素个数</li>\n<li>ZIncrBy - 增加元素的分数</li>\n<li>ZRange,ZRevRange - 返回集合中某个索引范围的元素，根据分数从小到大排序</li>\n<li>ZRangeByScore,ZRevRangeByScore - 根据分数范围返回集合元素，元素根据分数从小到大排序，支持分页。</li>\n<li>ZRem - 删除集合元素</li>\n<li>ZRemRangeByRank - 根据索引范围删除元素</li>\n<li>ZRemRangeByScore - 根据分数范围删除元素</li>\n<li>ZScore - 查询元素对应的分数</li>\n<li>ZRank, ZRevRank - 查询元素的排名</li>\n</ul>\n<h4 id=\"1-ZAdd\"><a href=\"#1-ZAdd\" class=\"headerlink\" title=\"1.ZAdd\"></a>1.ZAdd</h4><p>添加一个或者多个元素到集合，如果元素已经存在则更新分数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 添加一个集合元素到集合中， 这个元素的分数是2.5，元素名是tizi</span></span><br><span class=\"line\">err := client.ZAdd(<span class=\"string\">&quot;key&quot;</span>, redis.Z&#123;<span class=\"number\">2.5</span>,<span class=\"string\">&quot;tizi&quot;</span>&#125;).Err()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>下面是redis.Z结构体说明：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Z <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">    Score  <span class=\"keyword\">float64</span> <span class=\"comment\">// 分数</span></span><br><span class=\"line\">    Member <span class=\"keyword\">interface</span>&#123;&#125; <span class=\"comment\">// 元素名</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-ZCard\"><a href=\"#2-ZCard\" class=\"headerlink\" title=\"2.ZCard\"></a>2.ZCard</h4><p>返回集合元素个数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">size, err := client.ZCard(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(size)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-ZCount\"><a href=\"#3-ZCount\" class=\"headerlink\" title=\"3.ZCount\"></a>3.ZCount</h4><p>统计某个分数范围内的元素个数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回： 1&lt;=分数&lt;=5 的元素个数, 注意：&quot;1&quot;, &quot;5&quot;两个参数是字符串</span></span><br><span class=\"line\">size, err := client.ZCount(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;1&quot;</span>,<span class=\"string\">&quot;5&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fmt.Println(size)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 返回： 1&lt;分数&lt;=5 的元素个数</span></span><br><span class=\"line\"><span class=\"comment\">// 说明：默认第二，第三个参数是大于等于和小于等于的关系。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果加上（ 则表示大于或者小于，相当于去掉了等于关系。</span></span><br><span class=\"line\">size, err := client.ZCount(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;(1&quot;</span>,<span class=\"string\">&quot;5&quot;</span>).Result()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-ZIncrBy\"><a href=\"#4-ZIncrBy\" class=\"headerlink\" title=\"4.ZIncrBy\"></a>4.ZIncrBy</h4><p>增加元素的分数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 给元素5，加上2分</span></span><br><span class=\"line\">client.ZIncrBy(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">2</span>,<span class=\"string\">&quot;5&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-ZRange-ZRevRange\"><a href=\"#5-ZRange-ZRevRange\" class=\"headerlink\" title=\"5.ZRange,ZRevRange\"></a>5.ZRange,ZRevRange</h4><p>返回集合中某个索引范围的元素，根据分数从小到大排序</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 返回从0到-1位置的集合元素， 元素按分数从小到大排序</span></span><br><span class=\"line\"><span class=\"comment\">// 0到-1代表则返回全部数据</span></span><br><span class=\"line\">vals, err := client.ZRange(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">0</span>,<span class=\"number\">-1</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> vals &#123;</span><br><span class=\"line\">    fmt.Println(val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>ZRevRange用法跟ZRange一样，区别是ZRevRange的结果是按分数从大到小排序。</p>\n<h4 id=\"6-ZRangeByScore\"><a href=\"#6-ZRangeByScore\" class=\"headerlink\" title=\"6.ZRangeByScore\"></a>6.ZRangeByScore</h4><p>根据分数范围返回集合元素，元素根据分数从小到大排序，支持分页。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化查询条件， Offset和Count用于分页</span></span><br><span class=\"line\">op := redis.ZRangeBy&#123;</span><br><span class=\"line\">    Min:<span class=\"string\">&quot;2&quot;</span>, <span class=\"comment\">// 最小分数</span></span><br><span class=\"line\">    Max:<span class=\"string\">&quot;10&quot;</span>, <span class=\"comment\">// 最大分数</span></span><br><span class=\"line\">    Offset:<span class=\"number\">0</span>, <span class=\"comment\">// 类似sql的limit, 表示开始偏移量</span></span><br><span class=\"line\">    Count:<span class=\"number\">5</span>, <span class=\"comment\">// 一次返回多少数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">vals, err := client.ZRangeByScore(<span class=\"string\">&quot;key&quot;</span>, op).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> vals &#123;</span><br><span class=\"line\">    fmt.Println(val)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"7-ZRevRangeByScore\"><a href=\"#7-ZRevRangeByScore\" class=\"headerlink\" title=\"7.ZRevRangeByScore\"></a>7.ZRevRangeByScore</h4><p>用法类似ZRangeByScore，区别是元素根据分数从大到小排序。</p>\n<h4 id=\"8-ZRangeByScoreWithScores\"><a href=\"#8-ZRangeByScoreWithScores\" class=\"headerlink\" title=\"8.ZRangeByScoreWithScores\"></a>8.ZRangeByScoreWithScores</h4><p>用法跟ZRangeByScore一样，区别是除了返回集合元素，同时也返回元素对应的分数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 初始化查询条件， Offset和Count用于分页</span></span><br><span class=\"line\">op := redis.ZRangeBy&#123;</span><br><span class=\"line\">    Min:<span class=\"string\">&quot;2&quot;</span>, <span class=\"comment\">// 最小分数</span></span><br><span class=\"line\">    Max:<span class=\"string\">&quot;10&quot;</span>, <span class=\"comment\">// 最大分数</span></span><br><span class=\"line\">    Offset:<span class=\"number\">0</span>, <span class=\"comment\">// 类似sql的limit, 表示开始偏移量</span></span><br><span class=\"line\">    Count:<span class=\"number\">5</span>, <span class=\"comment\">// 一次返回多少数据</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">vals, err := client.ZRangeByScoreWithScores(<span class=\"string\">&quot;key&quot;</span>, op).Result()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(err)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> _, val := <span class=\"keyword\">range</span> vals &#123;</span><br><span class=\"line\">    fmt.Println(val.Member) <span class=\"comment\">// 集合元素</span></span><br><span class=\"line\">    fmt.Println(val.Score) <span class=\"comment\">// 分数</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"9-ZRem\"><a href=\"#9-ZRem\" class=\"headerlink\" title=\"9.ZRem\"></a>9.ZRem</h4><p>删除集合元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除集合中的元素tizi</span></span><br><span class=\"line\">client.ZRem(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;tizi&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除集合中的元素tizi和xiaoli</span></span><br><span class=\"line\"><span class=\"comment\">// 支持一次删除多个元素</span></span><br><span class=\"line\">client.ZRem(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;tizi&quot;</span>, <span class=\"string\">&quot;xiaoli&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"10-ZRemRangeByRank\"><a href=\"#10-ZRemRangeByRank\" class=\"headerlink\" title=\"10.ZRemRangeByRank\"></a>10.ZRemRangeByRank</h4><p>根据索引范围删除元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 集合元素按分数排序，从最低分到高分，删除第0个元素到第5个元素。</span></span><br><span class=\"line\"><span class=\"comment\">// 这里相当于删除最低分的几个元素</span></span><br><span class=\"line\">client.ZRemRangeByRank(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">0</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 位置参数写成负数，代表从高分开始删除。</span></span><br><span class=\"line\"><span class=\"comment\">// 这个例子，删除最高分数的两个元素，-1代表最高分数的位置，-2第二高分，以此类推。</span></span><br><span class=\"line\">client.ZRemRangeByRank(<span class=\"string\">&quot;key&quot;</span>, <span class=\"number\">-1</span>, <span class=\"number\">-2</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"11-ZRemRangeByScore\"><a href=\"#11-ZRemRangeByScore\" class=\"headerlink\" title=\"11.ZRemRangeByScore\"></a>11.ZRemRangeByScore</h4><p>根据分数范围删除元素</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 删除范围： 2&lt;=分数&lt;=5 的元素</span></span><br><span class=\"line\">client.ZRemRangeByScore(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;5&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 删除范围： 2&lt;=分数&lt;5 的元素</span></span><br><span class=\"line\">client.ZRemRangeByScore(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;2&quot;</span>, <span class=\"string\">&quot;(5&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"12-ZScore\"><a href=\"#12-ZScore\" class=\"headerlink\" title=\"12.ZScore\"></a>12.ZScore</h4><p>查询元素对应的分数</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询集合元素tizi的分数</span></span><br><span class=\"line\">score, _ := client.ZScore(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;tizi&quot;</span>).Result()</span><br><span class=\"line\">fmt.Println(score)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"13-ZRank\"><a href=\"#13-ZRank\" class=\"headerlink\" title=\"13.ZRank\"></a>13.ZRank</h4><p>根据元素名，查询集合元素在集合中的排名，从0开始算，集合元素按分数从小到大排序</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">rk, _ := client.ZRank(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;tizi&quot;</span>).Result()</span><br><span class=\"line\">fmt.Println(rk)</span><br></pre></td></tr></table></figure>\n\n<p>ZRevRank的作用跟ZRank一样，区别是ZRevRank是按分数从大到小排序。</p>\n<h3 id=\"10-发布订阅\"><a href=\"#10-发布订阅\" class=\"headerlink\" title=\"10.发布订阅\"></a>10.发布订阅</h3><p>Redis提供了发布订阅功能，可以用于消息的传输，Redis的发布订阅机制包括三个部分，发布者，订阅者和Channel。</p>\n<p>发布订阅架构图：</p>\n<p><img data-src=\"https://s2.loli.net/2022/05/28/5ADR6KbaYPkyICx.png\" alt=\"image.png\"></p>\n<p>发布者和订阅者都是Redis客户端，Channel则为Redis服务器端，发布者将消息发送到某个的频道，订阅了这个频道的订阅者就能接收到这条消息。Redis的这种发布订阅机制与基于主题的发布订阅类似，Channel相当于主题。</p>\n<p>下面介绍golang如何使用redis的发布订阅功能。</p>\n<p>go redis发布订阅常用函数：</p>\n<ul>\n<li>Subscribe - 订阅channel</li>\n<li>PSubscribe - 订阅channel支持通配符匹配</li>\n<li>Publish - 将信息发送到指定的channel。</li>\n<li>PubSubChannels - 查询活跃的channel</li>\n<li>PubSubNumSub - 查询指定的channel有多少个订阅者</li>\n</ul>\n<h4 id=\"1-Subscribe\"><a href=\"#1-Subscribe\" class=\"headerlink\" title=\"1.Subscribe\"></a>1.Subscribe</h4><p>订阅channel</p>\n<p>例子1：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅channel1这个channel</span></span><br><span class=\"line\">sub := client.Subscribe(<span class=\"string\">&quot;channel1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读取channel消息</span></span><br><span class=\"line\">iface, err := sub.Receive()</span><br><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 检测收到的消息类型</span></span><br><span class=\"line\"><span class=\"keyword\">switch</span> iface.(<span class=\"keyword\">type</span>) &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> *redis.Subscription:</span><br><span class=\"line\">    <span class=\"comment\">// 订阅成功</span></span><br><span class=\"line\"><span class=\"keyword\">case</span> *redis.Message:</span><br><span class=\"line\">    <span class=\"comment\">// 处理收到的消息</span></span><br><span class=\"line\">    <span class=\"comment\">// 这里需要做一下类型转换</span></span><br><span class=\"line\">    m := iface.(redis.Message)</span><br><span class=\"line\">    <span class=\"comment\">// 打印收到的小</span></span><br><span class=\"line\">    fmt.Println(m.Payload)</span><br><span class=\"line\"><span class=\"keyword\">case</span> *redis.Pong:</span><br><span class=\"line\">    <span class=\"comment\">// 收到Pong消息</span></span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">    <span class=\"comment\">// handle error</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子2： 使用golang channel的方式处理消息</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅channel1这个channel</span></span><br><span class=\"line\">sub := client.Subscribe(<span class=\"string\">&quot;channel1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sub.Channel() 返回go channel，可以循环读取redis服务器发过来的消息</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> msg := <span class=\"keyword\">range</span> sub.Channel() &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 打印收到的消息</span></span><br><span class=\"line\">    fmt.Println(msg.Channel)</span><br><span class=\"line\">    fmt.Println(msg.Payload)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>例子3： 取消订阅</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅channel1这个channel</span></span><br><span class=\"line\">sub := client.Subscribe(<span class=\"string\">&quot;channel1&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 忽略其他处理逻辑</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">// 取消订阅</span></span><br><span class=\"line\">sub.Unsubscribe(<span class=\"string\">&quot;channel1&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-PSubscribe\"><a href=\"#2-PSubscribe\" class=\"headerlink\" title=\"2.PSubscribe\"></a>2.PSubscribe</h4><p>用法跟Subscribe一样，区别是PSubscribe订阅通道(channel)支持模式匹配。</p>\n<p>例子：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 订阅channel1这个channel</span></span><br><span class=\"line\">sub := client.PSubscribe(<span class=\"string\">&quot;ch_user_*&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 可以匹配ch_user_开头的任意channel</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-Publish\"><a href=\"#3-Publish\" class=\"headerlink\" title=\"3.Publish\"></a>3.Publish</h4><p>将消息发送到指定的channel</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 将&quot;message&quot;消息发送到channel1这个通道上</span></span><br><span class=\"line\">client.Publish(<span class=\"string\">&quot;channel1&quot;</span>,<span class=\"string\">&quot;message&quot;</span>)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"4-PubSubChannels\"><a href=\"#4-PubSubChannels\" class=\"headerlink\" title=\"4.PubSubChannels\"></a>4.PubSubChannels</h4><p>查询活跃的channel</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 没有指定查询channel的匹配模式，则返回所有的channel</span></span><br><span class=\"line\">chs, _ := client.PubSubChannels(<span class=\"string\">&quot;&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">for</span> _, ch := <span class=\"keyword\">range</span> chs &#123;</span><br><span class=\"line\">    fmt.Println(ch)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 匹配user_开头的channel</span></span><br><span class=\"line\">chs, _ := client.PubSubChannels(<span class=\"string\">&quot;user_*&quot;</span>).Result()</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"5-PubSubNumSub\"><a href=\"#5-PubSubNumSub\" class=\"headerlink\" title=\"5.PubSubNumSub\"></a>5.PubSubNumSub</h4><p>查询指定的channel有多少个订阅者</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询channel1，channel2两个通道的订阅者数量</span></span><br><span class=\"line\">chs, _ := client.PubSubNumSub(<span class=\"string\">&quot;channel1&quot;</span>, <span class=\"string\">&quot;channel2&quot;</span>).Result()</span><br><span class=\"line\"><span class=\"keyword\">for</span> ch, count := <span class=\"keyword\">range</span> chs &#123;</span><br><span class=\"line\">    fmt.Println(ch) <span class=\"comment\">// channel名字</span></span><br><span class=\"line\">    fmt.Println(count) <span class=\"comment\">// channel的订阅者数量</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"11-事务相关\"><a href=\"#11-事务相关\" class=\"headerlink\" title=\"11.事务相关\"></a>11.事务相关</h3><p>redis事务可以一次执行多个命令， 并且带有以下两个重要的保证：</p>\n<ul>\n<li>事务是一个单独的隔离操作：事务中的所有命令都会序列化、按顺序地执行。事务在执行的过程中，不会被其他客户端发送来的命令请求所打断。</li>\n<li>事务是一个原子操作：事务中的命令要么全部被执行，要么全部都不执行。</li>\n</ul>\n<p>下面介绍golang redis事务用法。</p>\n<p>go redis事务常用函数：</p>\n<ul>\n<li>TxPipeline - 以Pipeline的方式操作事务</li>\n<li>Watch - redis乐观锁支持</li>\n</ul>\n<h4 id=\"1-TxPipeline\"><a href=\"#1-TxPipeline\" class=\"headerlink\" title=\"1.TxPipeline\"></a>1.TxPipeline</h4><p>以Pipeline的方式操作事务</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 开启一个TxPipeline事务</span></span><br><span class=\"line\">pipe := client.TxPipeline()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行事务操作，可以通过pipe读写redis</span></span><br><span class=\"line\">incr := pipe.Incr(<span class=\"string\">&quot;tx_pipeline_counter&quot;</span>)</span><br><span class=\"line\">pipe.Expire(<span class=\"string\">&quot;tx_pipeline_counter&quot;</span>, time.Hour)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 上面代码等同于执行下面redis命令</span></span><br><span class=\"line\"><span class=\"comment\">//</span></span><br><span class=\"line\"><span class=\"comment\">//     MULTI</span></span><br><span class=\"line\"><span class=\"comment\">//     INCR pipeline_counter</span></span><br><span class=\"line\"><span class=\"comment\">//     EXPIRE pipeline_counts 3600</span></span><br><span class=\"line\"><span class=\"comment\">//     EXEC</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 通过Exec函数提交redis事务</span></span><br><span class=\"line\">_, err := pipe.Exec()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 提交事务后，我们可以查询事务操作的结果</span></span><br><span class=\"line\"><span class=\"comment\">// 前面执行Incr函数，在没有执行exec函数之前，实际上还没开始运行。</span></span><br><span class=\"line\">fmt.Println(incr.Val(), err)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-watch\"><a href=\"#2-watch\" class=\"headerlink\" title=\"2.watch\"></a>2.watch</h4><p>redis乐观锁支持，可以通过watch监听一些Key, 如果这些key的值没有被其他人改变的话，才可以提交事务。</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义一个回调函数，用于处理事务逻辑</span></span><br><span class=\"line\">fn := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(tx *redis.Tx)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 先查询下当前watch监听的key的值</span></span><br><span class=\"line\">        v, err := tx.Get(<span class=\"string\">&quot;key&quot;</span>).Result()</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &amp;&amp; err != redis.Nil &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> err</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这里可以处理业务</span></span><br><span class=\"line\">        fmt.Println(v)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 如果key的值没有改变的话，Pipelined函数才会调用成功</span></span><br><span class=\"line\">        _, err = tx.Pipelined(<span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(pipe redis.Pipeliner)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在这里给key设置最新值</span></span><br><span class=\"line\">            pipe.Set(<span class=\"string\">&quot;key&quot;</span>, <span class=\"string\">&quot;new value&quot;</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 使用Watch监听一些Key, 同时绑定一个回调函数fn, 监听Key后的逻辑写在fn这个回调函数里面</span></span><br><span class=\"line\"><span class=\"comment\">// 如果想监听多个key，可以这么写：client.Watch(fn, &quot;key1&quot;, &quot;key2&quot;, &quot;key3&quot;)</span></span><br><span class=\"line\">client.Watch(fn, <span class=\"string\">&quot;key&quot;</span>)</span><br></pre></td></tr></table></figure>","categories":["技术","Go","Redis"],"tags":["Go","Redis","go-redis包"]},{"title":"Java 基本数据类型","url":"/2021/07/30/Java-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/","content":"<h2 id=\"内置数据类型\"><a href=\"#内置数据类型\" class=\"headerlink\" title=\"内置数据类型\"></a>内置数据类型</h2><h3 id=\"提炼：\"><a href=\"#提炼：\" class=\"headerlink\" title=\"提炼：\"></a><strong>提炼：</strong></h3><h4 id=\"基本类型：byte-二进制位数：8\"><a href=\"#基本类型：byte-二进制位数：8\" class=\"headerlink\" title=\"* 基本类型：byte 二进制位数：8\"></a>* 基本类型：byte 二进制位数：8</h4><pre><code>包装类：java.lang.Byte\n最小值：Byte.MIN_VALUE=-128\n最大值：Byte.MAX_VALUE=127</code></pre>\n<a id=\"more\"></a>\n\n<h4 id=\"基本类型：short-二进制位数：16\"><a href=\"#基本类型：short-二进制位数：16\" class=\"headerlink\" title=\"* 基本类型：short 二进制位数：16\"></a>* 基本类型：short 二进制位数：16</h4><pre><code>包装类：java.lang.Short\n最小值：Short.MIN_VALUE=-32768\n最大值：Short.MAX_VALUE=32767</code></pre>\n<h4 id=\"基本类型：int-二进制位数：32\"><a href=\"#基本类型：int-二进制位数：32\" class=\"headerlink\" title=\"* 基本类型：int 二进制位数：32\"></a>* 基本类型：int 二进制位数：32</h4><pre><code>包装类：java.lang.Integer\n最小值：Integer.MIN_VALUE=-2147483648\n最大值：Integer.MAX_VALUE=2147483647</code></pre>\n<h4 id=\"基本类型：long-二进制位数：64\"><a href=\"#基本类型：long-二进制位数：64\" class=\"headerlink\" title=\"* 基本类型：long 二进制位数：64\"></a>* 基本类型：long 二进制位数：64</h4><pre><code>包装类：java.lang.Long\n最小值：Long.MIN_VALUE=-9223372036854775808\n最大值：Long.MAX_VALUE=9223372036854775807</code></pre>\n<h4 id=\"基本类型：float-二进制位数：32\"><a href=\"#基本类型：float-二进制位数：32\" class=\"headerlink\" title=\"* 基本类型：float 二进制位数：32\"></a>* 基本类型：float 二进制位数：32</h4><pre><code>包装类：java.lang.Float\n最小值：Float.MIN_VALUE=1.4E-45\n最大值：Float.MAX_VALUE=3.4028235E38</code></pre>\n<h4 id=\"基本类型：double-二进制位数：64\"><a href=\"#基本类型：double-二进制位数：64\" class=\"headerlink\" title=\"* 基本类型：double 二进制位数：64\"></a>* 基本类型：double 二进制位数：64</h4><pre><code>包装类：java.lang.Double\n最小值：Double.MIN_VALUE=4.9E-324\n最大值：Double.MAX_VALUE=1.7976931348623157E308</code></pre>\n<h4 id=\"基本类型：char-二进制位数：16\"><a href=\"#基本类型：char-二进制位数：16\" class=\"headerlink\" title=\"* 基本类型：char 二进制位数：16\"></a>* 基本类型：char 二进制位数：16</h4><pre><code>包装类：java.lang.Character\n最小值：Character.MIN_VALUE=0\n最大值：Character.MAX_VALUE=65535</code></pre>\n<h3 id=\"详细：\"><a href=\"#详细：\" class=\"headerlink\" title=\"详细：\"></a><strong>详细：</strong></h3><p><strong>Java语言提供了八种基本类型。六种数字类型（四个整数型，两个浮点型），一种字符类型，还有一种布尔型。</strong></p>\n<h4 id=\"byte：\"><a href=\"#byte：\" class=\"headerlink\" title=\"* byte：\"></a>* byte：</h4><pre><code>byte 数据类型是8位、有符号的，以二进制补码表示的整数；\n最小值是 -128（-2^7）；\n最大值是 127（2^7-1）；\n默认值是 0；\nbyte 类型用在大型数组中节约空间，主要代替整数，因为 byte 变量占用的空间只有 int 类型的四分之一；\n例子：byte a = 100，byte b = -50。</code></pre>\n<h4 id=\"short：\"><a href=\"#short：\" class=\"headerlink\" title=\"* short：\"></a>* short：</h4><pre><code>short 数据类型是 16 位、有符号的以二进制补码表示的整数\n最小值是 -32768（-2^15）；\n最大值是 32767（2^15 - 1）；\nShort 数据类型也可以像 byte 那样节省空间。一个short变量是int型变量所占空间的二分之一；\n默认值是 0；\n例子：short s = 1000，short r = -20000。</code></pre>\n<h4 id=\"int：\"><a href=\"#int：\" class=\"headerlink\" title=\"* int：\"></a>* int：</h4><pre><code>int 数据类型是32位、有符号的以二进制补码表示的整数；\n最小值是 -2,147,483,648（-2^31）；\n最大值是 2,147,483,647（2^31 - 1）；\n一般地整型变量默认为 int 类型；\n默认值是 0 ；\n例子：int a = 100000, int b = -200000。</code></pre>\n<h4 id=\"long：\"><a href=\"#long：\" class=\"headerlink\" title=\"* long：\"></a>* long：</h4><pre><code>long 数据类型是 64 位、有符号的以二进制补码表示的整数；\n最小值是 -9,223,372,036,854,775,808（-2^63）；\n最大值是 9,223,372,036,854,775,807（2^63 -1）；\n这种类型主要使用在需要比较大整数的系统上；\n默认值是 0L；\n例子： long a = 100000L，Long b = -200000L。\n&quot;L&quot;理论上不分大小写，但是若写成&quot;l&quot;容易与数字&quot;1&quot;混淆，不容易分辩。所以最好大写。</code></pre>\n<h4 id=\"float：\"><a href=\"#float：\" class=\"headerlink\" title=\"* float：\"></a>* float：</h4><pre><code>float 数据类型是单精度、32位、符合IEEE 754标准的浮点数；\nfloat 在储存大型浮点数组的时候可节省内存空间；\n默认值是 0.0f；\n浮点数不能用来表示精确的值，如货币；\n例子：float f1 = 234.5f。</code></pre>\n<h4 id=\"double：\"><a href=\"#double：\" class=\"headerlink\" title=\"* double：\"></a>* double：</h4><pre><code>double 数据类型是双精度、64 位、符合 IEEE 754 标准的浮点数；\n浮点数的默认类型为 double 类型；\ndouble类型同样不能表示精确的值，如货币；\n默认值是 0.0d；\n例子：\n\ndouble   d1  = 7D ;\ndouble   d2  = 7.; \ndouble   d3  =  8.0; \ndouble   d4  =  8.D; \ndouble   d5  =  12.9867; \n7 是一个 int 字面量，而 7D，7. 和 8.0 是 double 字面量。</code></pre>\n<h4 id=\"boolean：\"><a href=\"#boolean：\" class=\"headerlink\" title=\"* boolean：\"></a>* boolean：</h4><pre><code>boolean数据类型表示一位的信息；\n只有两个取值：true 和 false；\n这种类型只作为一种标志来记录 true/false 情况；\n默认值是 false；\n例子：boolean one = true。</code></pre>\n<h4 id=\"char：\"><a href=\"#char：\" class=\"headerlink\" title=\"* char：\"></a>* char：</h4><pre><code>char 类型是一个单一的 16 位 Unicode 字符；\n最小值是 \\u0000（十进制等效值为 0）；\n最大值是 \\uffff（即为 65535）；\nchar 数据类型可以储存任何字符；\n例子：char letter = &#39;A&#39;;。</code></pre>\n<h3 id=\"类型默认值\"><a href=\"#类型默认值\" class=\"headerlink\" title=\"类型默认值\"></a><strong>类型默认值</strong></h3><p><strong>下表列出了 Java 各个类型的默认值：</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>默认值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>0</td>\n</tr>\n<tr>\n<td>short</td>\n<td>0</td>\n</tr>\n<tr>\n<td>int</td>\n<td>0</td>\n</tr>\n<tr>\n<td>long</td>\n<td>0L</td>\n</tr>\n<tr>\n<td>float</td>\n<td>0.0f</td>\n</tr>\n<tr>\n<td>double</td>\n<td>0.0d</td>\n</tr>\n<tr>\n<td>char</td>\n<td>‘u0000’</td>\n</tr>\n<tr>\n<td>String (or any object)</td>\n<td>null</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>false</td>\n</tr>\n</tbody></table>\n<h1 id=\"Java-常量\"><a href=\"#Java-常量\" class=\"headerlink\" title=\"Java 常量\"></a>Java 常量</h1><p><strong>常量在程序运行时是不能被修改的。</strong></p>\n<p><strong>在 Java 中使用 final 关键字来修饰常量，声明方式和变量类似：</strong></p>\n<pre><code>final double PI = 3.1415927; </code></pre>\n<p><strong>虽然常量名也可以用小写，但为了便于识别，通常使用大写字母表示常量。</strong></p>\n<p><strong>字面量可以赋给任何内置类型的变量。例如：</strong></p>\n<pre><code>byte a = 68;\nchar a = &#39;A&#39;</code></pre>\n<p><strong>byte、int、long、和short都可以用十进制、16进制以及8进制的式来表示。</strong></p>\n<p><strong>当使用字面量的时候，前缀 0 表示 8 进制，而前缀 0x 代表 16 进制, 例如：</strong></p>\n<pre><code>int decimal = 100;\nint octal = 0144;\nint hexa =  0x64;</code></pre>\n<p><strong>和其他语言一样，Java的字符串常量也是包含在两个引号之间的字符序列。下面是字符串型字面量的例子：</strong></p>\n<pre><code>&quot;Hello World&quot;\n&quot;two\\nlines&quot;\n&quot;\\&quot;This is in quotes\\&quot;&quot;</code></pre>\n<p><strong>字符串常量和字符常量都可以包含任何Unicode字符。例如：</strong></p>\n<pre><code>char a = &#39;\\u0001&#39;;\nString a = &quot;\\u0001&quot;;</code></pre>\n<p><strong>Java语言支持一些特殊的转义字符序列。</strong></p>\n<table>\n<thead>\n<tr>\n<th>符号</th>\n<th>字符含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\n</td>\n<td>换行 (0x0a)</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车 (0x0d)</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>换页符(0x0c)</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>退格 (0x08)</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>空字符 (0x0)</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>空格 (0x20)</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表符</td>\n</tr>\n<tr>\n<td>&quot;</td>\n<td>双引号</td>\n</tr>\n<tr>\n<td>&#39;</td>\n<td>单引号</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>反斜杠</td>\n</tr>\n<tr>\n<td>\\ddd</td>\n<td>八进制字符 (ddd)</td>\n</tr>\n<tr>\n<td>\\uxxxx</td>\n<td>16进制Unicode字符 (xxxx)</td>\n</tr>\n</tbody></table>\n","categories":["技术","Java后端"],"tags":["Java","Java内置数据类型","Java常量"]},{"title":"JavaWeb之BaseServlet简化Servlet操作","url":"/2021/12/12/JavaWeb%E4%B9%8BBaseServlet%E7%AE%80%E5%8C%96Servlet%E6%93%8D%E4%BD%9C/","content":"<h1 id=\"1-BaseServlet是什么？\"><a href=\"#1-BaseServlet是什么？\" class=\"headerlink\" title=\"1. BaseServlet是什么？\"></a>1. <strong>BaseServlet是什么？</strong></h1><p>BaseServlet是通过重写Servlet的service()方法，以达到可以控制所有Servlet的目的，同时简化了Servlet的一些操作。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>为什么要重写service()方法？  因为客户端向服务端发送的每一次请求，服务器都会调用service()方法，重写它可以控制所有的请求。</p>\n</li>\n<li><p>service()可以写什么？ Servlet中常有的对象(比如session)可以在service()中进行获取。</p>\n</li>\n<li><p>BaseServlet主要完成对当前类中的方法进行调用的操作(因为不知道当前类中以后会有哪些方法，所以就要用到反射机制，以后BaseServlet的子类中不管有什么样的方法，都可以被当前类所调用)。</p>\n</li>\n</ul>\n<h1 id=\"2-BaseServlet的代码实现以及用法\"><a href=\"#2-BaseServlet的代码实现以及用法\" class=\"headerlink\" title=\"2. BaseServlet的代码实现以及用法\"></a>2. <strong>BaseServlet的代码实现以及用法</strong></h1><h2 id=\"2-1-在编写BaseServlet之前，我们先来看看初学时Servlet的用法：\"><a href=\"#2-1-在编写BaseServlet之前，我们先来看看初学时Servlet的用法：\" class=\"headerlink\" title=\"2.1 在编写BaseServlet之前，我们先来看看初学时Servlet的用法：\"></a>2.1 <strong>在编写BaseServlet之前，我们先来看看初学时Servlet的用法：</strong></h2><p><u>需求：有一个index.jsp页面，点击登录按钮，客户端发送请求到Servlet,Servlet处理登录请求并进行逻辑判断将结果响应给客户端。点击查询按钮，客户端发送请求到Servlet,Servlet处理查询请求并将结果响应给客户端。</u></p>\n<h3 id=\"2-1-1-给出index-jsp页面：\"><a href=\"#2-1-1-给出index-jsp页面：\" class=\"headerlink\" title=\"2.1.1 给出index.jsp页面：\"></a><font color=#3399EA>2.1.1 <strong>给出index.jsp页面：</strong></font></h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;hello jsp&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;!-- $&#123;pageContext.request.contextPath&#125; 是当前项目名 --&gt;</span><br><span class=\"line\">        &lt;!-- 发送请求给LoginServlet --&gt;</span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/LoginServlet&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;$&#123;session_username&#125; &lt;!--用EL表达式全域查找属性 --&gt;</span><br><span class=\"line\">        &lt;/form&gt;&lt;br/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;!-- 发送请求给FindServlet --&gt;</span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/FindServlet&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;findname&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;查询&quot;</span>&gt;$&#123;request_findname&#125;&lt;!--用EL表达式全域查找属性 --&gt;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<center>\n\n<p><img data-src=\"https://s2.loli.net/2021/12/12/cIGly7rQ6aMowZ1.png\" alt=\"image.png\"></p>\n<p>index.jsp</p>\n</center>\n\n<h3 id=\"2-1-2-LoginServlet：\"><a href=\"#2-1-2-LoginServlet：\" class=\"headerlink\" title=\"2.1.2 LoginServlet：\"></a><font color=#3399EA>2.1.2 <strong>LoginServlet：</strong></font></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/LoginServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">LoginServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);  <span class=\"comment\">//获取username参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username);    <span class=\"comment\">//打印username</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(username))&#123;   <span class=\"comment\">//如果username是&quot;admin&quot;  就将它保存到session域中</span></span><br><span class=\"line\">            request.getSession().setAttribute(<span class=\"string\">&quot;session_username&quot;</span>,username);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重定向到index.jsp页面   request.getContextPath()获取的是项目名</span></span><br><span class=\"line\"><span class=\"comment\">//        response.sendRedirect(request.getContextPath()+&quot;/index.jsp&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-3-FindServlet\"><a href=\"#2-1-3-FindServlet\" class=\"headerlink\" title=\"2.1.3 FindServlet\"></a><font color=#3399EA>2.1.3 <strong>FindServlet</strong></font></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/FindServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">FindServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String findname = request.getParameter(<span class=\"string\">&quot;findname&quot;</span>);  <span class=\"comment\">//获取findname参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;findname:&quot;</span>+findname);    <span class=\"comment\">//打印findname</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(findname))&#123;   <span class=\"comment\">//如果findname是&quot;admin&quot;  就将它保存到request域中</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">&quot;request_findname&quot;</span>,findname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-1-4-运行结果\"><a href=\"#2-1-4-运行结果\" class=\"headerlink\" title=\"2.1.4 运行结果\"></a><font color=#3399EA>2.1.4 <strong>运行结果</strong></font></h3><p>两个输入框都输入admin，点击登录按钮，点击查询按钮</p>\n<p>1）页面显示结果：</p>\n<center>\n\n<p><img data-src=\"https://s2.loli.net/2021/12/12/KxBZaSiHkyq3t7D.png\" alt=\"image.png\"></p>\n<p>页面显示</p>\n</center>\n\n<p>2）控制台打印结果：</p>\n<center>\n\n<p><img data-src=\"https://s2.loli.net/2021/12/12/JYVLHpBvgjdzi52.png\" alt=\"image.png\"></p>\n<p>控制台打印</p>\n</center>\n\n<h3 id=\"2-1-5-总结\"><a href=\"#2-1-5-总结\" class=\"headerlink\" title=\"2.1.5 总结\"></a><font color=#3399EA>2.1.5 <strong>总结</strong></font></h3><p>上面的是初始的Servlet用法，由代码可见，这里需要两个功能（登录和查找），那么就要写两个独立的Servlet来完成，试想一下如果需要100个功能或者是1000个功能，那我们岂不是要写那么多个Servlet。</p>\n<p>当然我们不会去写成百上千个Servlet，为了简化操作，我们通过在请求url中添加参数的方法，来确定我们要调用的功能，这样一个Servlet中就可以写多个功能，每次发送请求要调用什么功能由url中的参数来决定。</p>\n<hr>\n<h2 id=\"2-2-传递参数确定调用功能\"><a href=\"#2-2-传递参数确定调用功能\" class=\"headerlink\" title=\"2.2 传递参数确定调用功能\"></a>2.2 <strong>传递参数确定调用功能</strong></h2><u>\n需求：有一个index.jsp页面，点击登录按钮，客户端发送请求到Servlet,Servlet处理登录请求并进行逻辑判断将结果响应给客户端。点击查询按钮，客户端发送请求到Servlet,Servlet处理查询请求并将结果响应给客户端。\n</u>\n\n<h3 id=\"2-2-1-给出index-jsp页面-还是上面那个页面，但是我们要对请求url做一些修改-：\"><a href=\"#2-2-1-给出index-jsp页面-还是上面那个页面，但是我们要对请求url做一些修改-：\" class=\"headerlink\" title=\"2.2.1 给出index.jsp页面(还是上面那个页面，但是我们要对请求url做一些修改)：\"></a><font color=#3399EA>2.2.1 <strong>给出index.jsp页面(还是上面那个页面，但是我们要对请求url做一些修改)：</strong></font></h3><figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;hello jsp&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=login&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;$&#123;session_username&#125;</span><br><span class=\"line\">        &lt;/form&gt;&lt;br/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=find&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;findname&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;查询&quot;</span>&gt;$&#123;request_findname&#125;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<p>这次给出的url里面带有method参数，这个参数就是你要调用UserServlet中的那个方法的方法名。</p>\n<p>比如你要发送请求给服务器调用登录功能，那么method=login,UserServlet中会通过你传递的方法名来调用对应方法。</p>\n<h3 id=\"2-2-2-UserServlet\"><a href=\"#2-2-2-UserServlet\" class=\"headerlink\" title=\"2.2.2 UserServlet\"></a><font color=#3399EA>2.2.2 <strong>UserServlet</strong></font></h3><p>由上面index.jsp页面中的action=””可以看出，我们将要把以前的两个功能(2个Servlet)整合在一个Servlet中，通过传递method参数来调用。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/UserServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doGet</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String method = request.getParameter(<span class=\"string\">&quot;method&quot;</span>);  <span class=\"comment\">//获取method参数的值</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(method == <span class=\"keyword\">null</span>)    <span class=\"comment\">//method如果为null就抛异常</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;您没有传递method值，无法确定您要调用的功能&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span>(method)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;login&quot;</span>:</span><br><span class=\"line\">            login(request, response);  </span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        <span class=\"keyword\">case</span> <span class=\"string\">&quot;find&quot;</span>:</span><br><span class=\"line\">            find(request, response);</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;找不到&quot;</span>+method+<span class=\"string\">&quot;(HttpServletRequest request, HttpServletResponse response)方法&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">doPost</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        doGet(request, response);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);  <span class=\"comment\">//获取username参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username);    <span class=\"comment\">//打印username</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(username))&#123;   <span class=\"comment\">//如果username是&quot;admin&quot;  就将它保存到session域中</span></span><br><span class=\"line\">            request.getSession().setAttribute(<span class=\"string\">&quot;session_username&quot;</span>,username);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重定向到index.jsp页面   request.getContextPath()获取的是项目名</span></span><br><span class=\"line\"><span class=\"comment\">//        response.sendRedirect(request.getContextPath()+&quot;/index.jsp&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String findname = request.getParameter(<span class=\"string\">&quot;findname&quot;</span>);  <span class=\"comment\">//获取findname参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;findname:&quot;</span>+findname);    <span class=\"comment\">//打印findname</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(findname))&#123;   <span class=\"comment\">//如果findname是&quot;admin&quot;  就将它保存到request域中</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">&quot;request_findname&quot;</span>,findname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-2-3-运行结果\"><a href=\"#2-2-3-运行结果\" class=\"headerlink\" title=\"2.2.3 运行结果\"></a><font color=#3399EA>2.2.3 <strong>运行结果</strong></h3></font>\n\n<p>Servlet和调用Servlet的方法改变了，但是结果不会有丝毫的变化，还是以前的结果。</p>\n<h3 id=\"2-2-4-总结\"><a href=\"#2-2-4-总结\" class=\"headerlink\" title=\"2.2.4 总结\"></a><font color=#3399EA>2.2.4 <strong>总结</strong></font></h3><p><font color=#77BDF3>改进之处</font>：不用再像以前那样需要n个功能就必须要写n个Servlet了，现在可以按某规律来将功能进行分类，同一类的功能全部写在一个Servlet中。</p>\n<p><font color=#f33b55>存在不足</font>：从UserServlet代码中不难看出，每增加一个方法，就要修改源代码，这样显得耦合性高，不便于开发。</p>\n<p>当然这已经有了解决办法，那就是写一个BaseServlet,重写其中的service()方法，通过反射来调用当前类中已有的方法。后期开发中，所有的Servlet只要继承这个BaseServlet，就可以随意的增删功能而不需要修改源代码。</p>\n<hr>\n<h2 id=\"2-3-BaseServlet：\"><a href=\"#2-3-BaseServlet：\" class=\"headerlink\" title=\"2.3 BaseServlet：\"></a>2.3 <strong>BaseServlet</strong>：</h2><p>可以将Servlet都需要用的东西在BaseServlet中创建并初始化，当然BaseServlet最大的功能是：能够使子类增删方法，而不需要修改BaseServlet源代码。</p>\n<h3 id=\"2-3-1-下面我们先来编写一个具有基本功能的BaseServlet：\"><a href=\"#2-3-1-下面我们先来编写一个具有基本功能的BaseServlet：\" class=\"headerlink\" title=\"2.3.1 下面我们先来编写一个具有基本功能的BaseServlet：\"></a><font color=#3399EA>2.3.1 <strong>下面我们先来编写一个具有基本功能的BaseServlet：</strong></font></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpSession session = <span class=\"keyword\">null</span>;   <span class=\"comment\">//创建一个session对象，让BaseServlet的子类可以直接拿来用</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> String rootPath = <span class=\"keyword\">null</span>;  <span class=\"comment\">//同理创建一个项目名变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 重写HttpServlet的service方法</span></span><br><span class=\"line\"><span class=\"comment\">     *    为什么要重写HttpServlet的service方法呢？ 因为每次请求服务器都会调用service()方法</span></span><br><span class=\"line\"><span class=\"comment\">     *         doGet()和doPost()也不例外，底层都会调用service()方法</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request , HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">        <span class=\"keyword\">throws</span> ServletException,IOException</span>&#123;</span><br><span class=\"line\">        session = request.getSession();  <span class=\"comment\">//得到session</span></span><br><span class=\"line\">        rootPath = request.getContextPath();   <span class=\"comment\">//得到项目名</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//处理编码问题</span></span><br><span class=\"line\">        request.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 1. 获取method参数的值，它是用户想调用的方法名称</span></span><br><span class=\"line\">        String methodName = request.getParameter(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(methodName == <span class=\"keyword\">null</span>)&#123;    <span class=\"comment\">//如果method参数为空</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;请传递method参数以确定您要调用的方法！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Method method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 2. 通过方法名称methodName来获取Method对象</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * this.getClass()  :   得到当前类</span></span><br><span class=\"line\"><span class=\"comment\">             * this.getClass.getMethod()  : 调用当前类的getMethod()来获取当前类的方法</span></span><br><span class=\"line\"><span class=\"comment\">             * methodName : 要获取的方法名称</span></span><br><span class=\"line\"><span class=\"comment\">             * HttpServletRequest.class和HttpServletResponse.class : 要获取的方法的参数的类型</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * 由下面的参数我们不难看出，我们以后写的继承了BaseServlet的子类Servlet中：</span></span><br><span class=\"line\"><span class=\"comment\">             *   1）形参必须是(HttpServletRequest request,HttpServletResponse response)</span></span><br><span class=\"line\"><span class=\"comment\">             *   2）必须抛出与service()方法抛出的相同的异常</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            method = <span class=\"keyword\">this</span>.getClass().getMethod(methodName , HttpServletRequest.class , HttpServletResponse.class);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(NoSuchMethodException e)&#123;</span><br><span class=\"line\">            <span class=\"comment\">//如果没有找到就说明你写的Servlet中没有此方法</span></span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;您调用的&quot;</span>+methodName+</span><br><span class=\"line\">            <span class=\"string\">&quot;(HttpServletRequest request , HttpServletResponse response)方法不存在&quot;</span>,e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">//如果程序能够继续执行到这里，说明要调用的方法存在</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"comment\">// 3. 通过Method对象来调用它</span></span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * 通过反射来调用当前类的方法：</span></span><br><span class=\"line\"><span class=\"comment\">             * method : 你要调用的方法的Method实例对象</span></span><br><span class=\"line\"><span class=\"comment\">             * this : 谁来调用(当前类就是this)</span></span><br><span class=\"line\"><span class=\"comment\">             * request,response : method方法的参数</span></span><br><span class=\"line\"><span class=\"comment\">             *</span></span><br><span class=\"line\"><span class=\"comment\">             * 本来是 this.method(request,response);</span></span><br><span class=\"line\"><span class=\"comment\">             *     现在method是一个变量，不能确定，所以用反射来调用。</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            method.invoke(<span class=\"keyword\">this</span>,request,response);</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;<span class=\"keyword\">catch</span>(Exception e)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的BaseServlet已经完成了，可以被其他Servlet所继承</p>\n<p>下面我们继续以同一个需求来展示BaseServlet用法：</p>\n<u>\n需求：有一个登录页面，点击登录按钮，客户端发送请求到Servlet,Servlet处理登录请求并进行逻辑判断将结果响应给客户端。点击查询按钮，客户端发送请求到Servlet,Servlet处理查询请求并将结果响应给客户端。\n</u>\n\n<h3 id=\"2-3-2-给出index-jsp页面\"><a href=\"#2-3-2-给出index-jsp页面\" class=\"headerlink\" title=\"2.3.2 给出index.jsp页面\"></a><font color=#3399EA>2.3.2 <strong>给出index.jsp页面</strong></font></h3><p>jsp页面没变，还是刚才那个页面：</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;hello jsp&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=login&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;$&#123;session_username&#125;</span><br><span class=\"line\">        &lt;/form&gt;&lt;br/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=find&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;findname&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;查询&quot;</span>&gt;$&#123;request_findname&#125;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-3-给出UserServlet\"><a href=\"#2-3-3-给出UserServlet\" class=\"headerlink\" title=\"2.3.3 给出UserServlet\"></a><font color=#3399EA>2.3.3 <strong>给出UserServlet</strong></font></h3><p>现在的UserServlet需要继承BaseServlet，UserServlet中只增加或删除功能(注意：这里的所有功能都必须和service()参数一致，抛出异常一致)，而负责调用功能的操作则有BaseServlet通过反射来完成。</p>\n<figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * UserServlet继承BaseServlet   UserServlet中的方法必须和service()方法格式一样(抛相同的异常，参数相同)</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/UserServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">login</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);  <span class=\"comment\">//获取username参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username);    <span class=\"comment\">//打印username</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(username))&#123;   <span class=\"comment\">//如果username是&quot;admin&quot;  就将它保存到session域中</span></span><br><span class=\"line\">            <span class=\"comment\">//session对象在BaseServlet中已经获取好了  直接可以用</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;session_username&quot;</span>,username);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重定向到index.jsp页面   rootPath是项目名  BaseServlet中已经获取好了</span></span><br><span class=\"line\"><span class=\"comment\">//        response.sendRedirect(rootPath+&quot;/index.jsp&quot;);</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> request</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> response</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> ServletException</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@throws</span> IOException</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">find</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String findname = request.getParameter(<span class=\"string\">&quot;findname&quot;</span>);  <span class=\"comment\">//获取findname参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;findname:&quot;</span>+findname);    <span class=\"comment\">//打印findname</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(findname))&#123;   <span class=\"comment\">//如果findname是&quot;admin&quot;  就将它保存到request域中</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">&quot;request_findname&quot;</span>,findname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        request.getRequestDispatcher(<span class=\"string\">&quot;/index.jsp&quot;</span>).forward(request,response);  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-3-4-运行结果\"><a href=\"#2-3-4-运行结果\" class=\"headerlink\" title=\"2.3.4 运行结果\"></a><font color=#3399EA>2.3.4 <strong>运行结果</strong></font></h3><p>运行结果与2.1和2.2中的结果完全相同。</p>\n<h3 id=\"2-3-5-总结\"><a href=\"#2-3-5-总结\" class=\"headerlink\" title=\"2.3.5 总结\"></a><font color=#3399EA>2.3.5 <strong>总结</strong></font></h3><p><font color=#77BDF3>改进之处</font>：Servlet中增删方法，不需要去改BaseServlet中调用方法的源代码，极大地降低了耦合性，使开发变得更加简便。</p>\n<hr>\n<p><font color=#F44C54>BaseServlet介绍到这里，最基本的功能就可以实现了，下面是简化转发和重定向操作的介绍。</font></p>\n<hr>\n<h1 id=\"3-BaseServlet的功能拓展\"><a href=\"#3-BaseServlet的功能拓展\" class=\"headerlink\" title=\"3. BaseServlet的功能拓展\"></a>3. <strong>BaseServlet的功能拓展</strong></h1><p>拓展功能：简化转发和重定向：</p>\n<h2 id=\"3-1-修改完的BaseServlet：\"><a href=\"#3-1-修改完的BaseServlet：\" class=\"headerlink\" title=\"3.1 修改完的BaseServlet：\"></a>3.1 <strong>修改完的BaseServlet：</strong></h2><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.lang.reflect.Method;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpSession;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">HttpServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> HttpSession session = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> String rootPath = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">service</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span></span></span><br><span class=\"line\"><span class=\"function\">            <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        session = request.getSession();</span><br><span class=\"line\">        rootPath = request.getServletContext().getContextPath();</span><br><span class=\"line\"> </span><br><span class=\"line\">        request.setCharacterEncoding(<span class=\"string\">&quot;UTF-8&quot;</span>);</span><br><span class=\"line\">        response.setContentType(<span class=\"string\">&quot;text/html;charset=UTF-8&quot;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">        String methodName = request.getParameter(<span class=\"string\">&quot;method&quot;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (methodName == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(<span class=\"string\">&quot;请传递method参数以确定您要调用的方法！&quot;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        Method method = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            method = <span class=\"keyword\">this</span>.getClass().getMethod(methodName, HttpServletRequest.class, HttpServletResponse.class);</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (NoSuchMethodException e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(</span><br><span class=\"line\">                    <span class=\"string\">&quot;您调用的&quot;</span> + methodName + <span class=\"string\">&quot;(HttpServletRequest request , HttpServletResponse response)方法不存在&quot;</span>, e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">            method.setAccessible(<span class=\"keyword\">true</span>); <span class=\"comment\">//使用单一安全性检查（为了提高效率）</span></span><br><span class=\"line\">            </span><br><span class=\"line\">            String result = (String) method.invoke(<span class=\"keyword\">this</span>, request, response);</span><br><span class=\"line\">            </span><br><span class=\"line\">            <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * 简化重定向和转发操作 </span></span><br><span class=\"line\"><span class=\"comment\">             * r:/index.jsp  重定向</span></span><br><span class=\"line\"><span class=\"comment\">             * f:/index.jsp  转发 </span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (result != <span class=\"keyword\">null</span> &amp;&amp; !result.trim().isEmpty()) &#123;</span><br><span class=\"line\">                </span><br><span class=\"line\">                String begin = result.substring(<span class=\"number\">0</span>, <span class=\"number\">1</span>);  <span class=\"comment\">//分割出前缀  r或f</span></span><br><span class=\"line\">                String path = result.substring(<span class=\"number\">2</span>);    <span class=\"comment\">//分割出路径</span></span><br><span class=\"line\">                <span class=\"keyword\">if</span>(<span class=\"string\">&quot;f&quot;</span>.equals(begin))&#123;    <span class=\"comment\">//前缀为f  表示转发</span></span><br><span class=\"line\">                    request.getRequestDispatcher(path).forward(request, response);</span><br><span class=\"line\">                &#125;<span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(<span class=\"string\">&quot;r&quot;</span>.equals(begin))&#123;    <span class=\"comment\">//前缀为r 表示重定向</span></span><br><span class=\"line\">                    response.sendRedirect(request.getContextPath() + path);  <span class=\"comment\">//request.getContextPath()：项目名</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> RuntimeException(e);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-2-用法\"><a href=\"#3-2-用法\" class=\"headerlink\" title=\"3.2 用法\"></a>3.2 <strong>用法</strong></h2><u>\n需求：有一个登录页面，点击登录按钮，客户端发送请求到Servlet,Servlet处理登录请求并进行逻辑判断将结果响应给客户端。点击查询按钮，客户端发送请求到Servlet,Servlet处理查询请求并将结果响应给客户端。\n</u>\n\n<h3 id=\"3-2-1-给出index-jsp\"><a href=\"#3-2-1-给出index-jsp\" class=\"headerlink\" title=\"3.2.1 给出index.jsp\"></a><font color=#3399EA>3.2.1 <strong>给出index.jsp</strong></font></h3><p>页面还是不变，和上面的一样</p>\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;%@ page language=<span class=\"string\">&quot;java&quot;</span> contentType=<span class=\"string\">&quot;text/html; charset=UTF-8&quot;</span></span><br><span class=\"line\">    pageEncoding=<span class=\"string\">&quot;UTF-8&quot;</span>%&gt;</span><br><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">    &lt;head&gt;</span><br><span class=\"line\">        &lt;meta http-equiv=<span class=\"string\">&quot;Content-Type&quot;</span> content=<span class=\"string\">&quot;text/html; charset=utf-8&quot;</span>&gt;</span><br><span class=\"line\">        &lt;title&gt;hello jsp&lt;/title&gt;</span><br><span class=\"line\">    &lt;/head&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;body&gt;</span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=login&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;username&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;登录&quot;</span>&gt;$&#123;session_username&#125;</span><br><span class=\"line\">        &lt;/form&gt;&lt;br/&gt;</span><br><span class=\"line\">        </span><br><span class=\"line\">        &lt;form action=<span class=\"string\">&quot;$&#123;pageContext.request.contextPath&#125;/UserServlet?method=find&quot;</span> method=<span class=\"string\">&quot;POST&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;text&quot;</span> name=<span class=\"string\">&quot;findname&quot;</span>&gt;</span><br><span class=\"line\">            &lt;input type=<span class=\"string\">&quot;submit&quot;</span> value=<span class=\"string\">&quot;查询&quot;</span>&gt;$&#123;request_findname&#125;</span><br><span class=\"line\">        &lt;/form&gt;</span><br><span class=\"line\">    &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-2-给出UserServlet\"><a href=\"#3-2-2-给出UserServlet\" class=\"headerlink\" title=\"3.2.2 给出UserServlet\"></a><font color=#3399EA>3.2.2 <strong>给出UserServlet</strong></font></h3><figure class=\"highlight java\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> java.io.IOException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.ServletException;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.annotation.WebServlet;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class=\"line\"><span class=\"keyword\">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">@WebServlet(&quot;/UserServlet&quot;)</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserServlet</span> <span class=\"keyword\">extends</span> <span class=\"title\">BaseServlet</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 登录    (将返回值类型改为String， 因为BaseServlet中的方法返回值为String)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">login</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String username = request.getParameter(<span class=\"string\">&quot;username&quot;</span>);  <span class=\"comment\">//获取username参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;username:&quot;</span>+username);    <span class=\"comment\">//打印username</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(username))&#123;   <span class=\"comment\">//如果username是&quot;admin&quot;  就将它保存到session域中</span></span><br><span class=\"line\">            <span class=\"comment\">//session对象在BaseServlet中已经获取好了  直接可以用</span></span><br><span class=\"line\">            session.setAttribute(<span class=\"string\">&quot;session_username&quot;</span>,username);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\"><span class=\"comment\">//        return &quot;f:/index.jsp&quot;;  //转发到index.jsp页面</span></span><br><span class=\"line\">        </span><br><span class=\"line\">        <span class=\"comment\">//重定向到index.jsp页面   rootPath是项目名  BaseServlet中已经获取好了</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;r:/index.jsp&quot;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 查找        (将返回值类型改为String， 因为BaseServlet中的方法返回值为String)</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">find</span><span class=\"params\">(HttpServletRequest request, HttpServletResponse response)</span> <span class=\"keyword\">throws</span> ServletException, IOException </span>&#123;</span><br><span class=\"line\">        String findname = request.getParameter(<span class=\"string\">&quot;findname&quot;</span>);  <span class=\"comment\">//获取findname参数的值</span></span><br><span class=\"line\">        System.out.println(<span class=\"string\">&quot;findname:&quot;</span>+findname);    <span class=\"comment\">//打印findname</span></span><br><span class=\"line\"> </span><br><span class=\"line\">        <span class=\"keyword\">if</span>(<span class=\"string\">&quot;admin&quot;</span>.equals(findname))&#123;   <span class=\"comment\">//如果findname是&quot;admin&quot;  就将它保存到request域中</span></span><br><span class=\"line\">            request.setAttribute(<span class=\"string\">&quot;request_findname&quot;</span>,findname);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"string\">&quot;f:/index.jsp&quot;</span>;  <span class=\"comment\">//转发到index.jsp页面</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-2-3-运行结果\"><a href=\"#3-2-3-运行结果\" class=\"headerlink\" title=\"3.2.3 运行结果\"></a><font color=#3399EA>3.2.3 <strong>运行结果</strong></font></h3><p>运行结果不变</p>\n<h3 id=\"3-2-4-总结\"><a href=\"#3-2-4-总结\" class=\"headerlink\" title=\"3.2.4 总结\"></a><font color=#3399EA>3.2.4 <strong>总结</strong></font></h3><p>改进功能：用返回值来代替转发和重定向操作，代码得到了简化。</p>\n","categories":["技术","Java后端"],"tags":["JavaWeb","BaseServlet"]},{"title":"Java后端开发：（侧重点学习）","url":"/2021/01/07/Java%E5%90%8E%E7%AB%AF%E5%BC%80%E5%8F%91%EF%BC%9A%EF%BC%88%E4%BE%A7%E9%87%8D%E7%82%B9%E5%AD%A6%E4%B9%A0%EF%BC%89/","content":"<h1 id=\"Java后端开发学习路线-主流技术点\"><a href=\"#Java后端开发学习路线-主流技术点\" class=\"headerlink\" title=\"Java后端开发学习路线:(主流技术点)\"></a><strong>Java后端开发学习路线:(主流技术点)</strong></h1><p><img data-src=\"https://i.loli.net/2021/01/07/NJYxng4QV5CuzmS.jpg\" alt=\"Java后端开发学习路线-高清版.jpg\"></p>\n<a id=\"more\"></a>\n<h1 id=\"侧重点\"><a href=\"#侧重点\" class=\"headerlink\" title=\"侧重点:\"></a><strong>侧重点:</strong></h1><ul>\n<li><strong>1. 编程基础</strong><ul>\n<li><strong>1.1 Java语言    (重中之重)</strong><ul>\n<li><strong>1.1.1 语言基础</strong></li>\n<li><strong>1.1.2 JVM</strong></li>\n<li><strong>1.1.3 并发/多线程</strong></li>\n</ul>\n</li>\n<li><strong>1.2 数据结构和算法    (重中之重)</strong><ul>\n<li><strong>1.2.1 数据结构</strong></li>\n<li><strong>1.2.2 算法</strong></li>\n</ul>\n</li>\n<li><strong>1.3 计算机网络    (重中之重)</strong></li>\n<li><strong>1.4 数据库/SQL    (重中之重)</strong></li>\n<li><strong>1.5 操作系统    (重中之重)</strong></li>\n<li><strong>1.6 设计模式</strong> </li>\n</ul>\n</li>\n<li><strong>2. 研发工具</strong><ul>\n<li><strong>2.1 集成开发环境    (重中之重)</strong></li>\n<li><strong>2.2 Linux系统    (重中之重)</strong></li>\n<li><strong>2.3 代码管理工具    (重中之重)</strong></li>\n<li><strong>2.4 项目管理/构建工具    (重中之重)</strong></li>\n</ul>\n</li>\n<li><strong>3. 应用框架</strong><ul>\n<li><strong>3.1 后端</strong><ul>\n<li><strong>3.1.1 Spring家族    (重中之重)</strong></li>\n<li><strong>3.1.2 服务器软件    (重中之重)</strong></li>\n<li><strong>3.1.3 中间件</strong><ul>\n<li><strong>3.1.3.1 缓存    (重中之重)</strong><ul>\n<li><strong>3.1.3.1.1 Redis</strong></li>\n</ul>\n</li>\n<li><strong>3.1.3.2 消息队列</strong></li>\n</ul>\n</li>\n<li><strong>3.1.4 数据库</strong><ul>\n<li><strong>3.1.4.1 ORM层框架</strong></li>\n<li><strong>3.1.4.2 连接池</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>3.2 前端</strong><ul>\n<li><strong>3.2.1 基础套餐    (重中之重)</strong><ul>\n<li><strong>3.2.1.1 三大件</strong></li>\n<li><strong>3.2.1.2 基础库</strong></li>\n</ul>\n</li>\n<li><strong>3.2.2 模版框架    (重中之重)</strong></li>\n<li><strong>3.2.3 组件化框架    (重中之重)</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h1 id=\"一、语言基础-重中之重\"><a href=\"#一、语言基础-重中之重\" class=\"headerlink\" title=\"一、语言基础    (重中之重)\"></a><strong>一、语言基础    (重中之重)</strong></h1><ol>\n<li><strong>基础语法</strong></li>\n<li><strong>面向对象</strong></li>\n<li><strong>接口</strong></li>\n<li><strong>容器</strong></li>\n<li><strong>异常</strong></li>\n<li><strong>泛型</strong></li>\n<li><strong>反射</strong></li>\n<li><strong>注解</strong></li>\n<li><strong>I/O</strong></li>\n<li><strong><del>图形化</del></strong></li>\n</ol>\n<h1 id=\"二、JVM-重中之重\"><a href=\"#二、JVM-重中之重\" class=\"headerlink\" title=\"二、JVM    (重中之重)\"></a><strong>二、JVM    (重中之重)</strong></h1><ol>\n<li><strong>类加载机制</strong></li>\n<li><strong>字节码执行机制</strong></li>\n<li><strong>JVM内存模式</strong></li>\n<li><strong>GC垃圾回收</strong></li>\n<li><strong>JVM性能监控与故障定位</strong></li>\n<li><strong>JVM调优</strong></li>\n</ol>\n<h1 id=\"三、并发-多线程-重中之重\"><a href=\"#三、并发-多线程-重中之重\" class=\"headerlink\" title=\"三、并发/多线程    (重中之重)\"></a><strong>三、并发/多线程    (重中之重)</strong></h1><ol>\n<li><strong>并发编程基础</strong></li>\n<li><strong>线程池</strong></li>\n<li><strong>锁</strong></li>\n<li><strong>并发容器</strong></li>\n<li><strong>原子类</strong></li>\n<li><strong>JUC并发工具类</strong></li>\n</ol>\n<h1 id=\"四、数据结构-重中之重\"><a href=\"#四、数据结构-重中之重\" class=\"headerlink\" title=\"四、数据结构    (重中之重)\"></a><strong>四、数据结构    (重中之重)</strong></h1><ol>\n<li><strong>字符串</strong></li>\n<li><strong>数组</strong></li>\n<li><strong>链表</strong></li>\n<li><strong>二叉树</strong></li>\n<li><strong>堆、栈、队列</strong></li>\n<li><strong>哈希</strong></li>\n</ol>\n<h1 id=\"五、算法-重中之重\"><a href=\"#五、算法-重中之重\" class=\"headerlink\" title=\"五、算法    (重中之重)\"></a><strong>五、算法    (重中之重)</strong></h1><ol>\n<li><strong>查找</strong></li>\n<li><strong>排序</strong></li>\n<li><strong>贪心</strong></li>\n<li><strong>分治</strong></li>\n<li><strong>动态规划</strong></li>\n<li><strong>回溯</strong></li>\n</ol>\n<h1 id=\"六、计算机网络-重中之重\"><a href=\"#六、计算机网络-重中之重\" class=\"headerlink\" title=\"六、计算机网络    (重中之重)\"></a><strong>六、计算机网络    (重中之重)</strong></h1><ol>\n<li><strong>ARP协议</strong></li>\n<li><strong>IP/ICMP协议</strong></li>\n<li><strong>TCPUDP协议</strong></li>\n<li><strong>DNS/HTTP/HTTPS协议</strong></li>\n<li><strong>Session/Cookie</strong></li>\n</ol>\n<h1 id=\"七、数据库-SQL-重中之重\"><a href=\"#七、数据库-SQL-重中之重\" class=\"headerlink\" title=\"七、数据库/SQL    (重中之重)\"></a><strong>七、数据库/SQL    (重中之重)</strong></h1><ol>\n<li><strong>SQL语句书写</strong></li>\n<li><strong>SQL语句优化</strong></li>\n<li><strong>事务以及隔离级别</strong></li>\n<li><strong>索引</strong></li>\n<li><strong>锁</strong></li>\n</ol>\n<h1 id=\"八、操作系统-重中之重\"><a href=\"#八、操作系统-重中之重\" class=\"headerlink\" title=\"八、操作系统    (重中之重)\"></a><strong>八、操作系统    (重中之重)</strong></h1><ol>\n<li><strong>进程/线程</strong></li>\n<li><strong>并发/锁</strong></li>\n<li><strong>内存管理和调度</strong></li>\n<li><strong>I/O原理</strong></li>\n</ol>\n<h1 id=\"九、设计模式\"><a href=\"#九、设计模式\" class=\"headerlink\" title=\"九、设计模式\"></a><strong>九、设计模式</strong></h1><ol>\n<li><strong>单例</strong></li>\n<li><strong>工厂</strong></li>\n<li><strong>代理</strong></li>\n<li><strong>策略</strong></li>\n<li><strong>模版方法</strong></li>\n<li><strong>观察者</strong></li>\n<li><strong>适配器</strong></li>\n<li><strong>责任链</strong></li>\n<li><strong>建造者</strong></li>\n</ol>\n<h1 id=\"十、集成开发环境-重中之重\"><a href=\"#十、集成开发环境-重中之重\" class=\"headerlink\" title=\"十、集成开发环境    (重中之重)\"></a><strong>十、集成开发环境    (重中之重)</strong></h1><ol>\n<li><strong>Eclipse</strong></li>\n<li><strong>Intellij IDEA</strong></li>\n<li><strong>VS Code</strong></li>\n</ol>\n<h1 id=\"十一、Linux系统-重中之重\"><a href=\"#十一、Linux系统-重中之重\" class=\"headerlink\" title=\"十一、Linux系统    (重中之重)\"></a><strong>十一、Linux系统    (重中之重)</strong></h1><ol>\n<li><strong>Linux常用命令</strong></li>\n<li><strong>基本Shell脚本</strong></li>\n</ol>\n<h1 id=\"十二、代码管理工具-重中之重\"><a href=\"#十二、代码管理工具-重中之重\" class=\"headerlink\" title=\"十二、代码管理工具    (重中之重)\"></a><strong>十二、代码管理工具    (重中之重)</strong></h1><ol>\n<li><strong>Git</strong></li>\n<li><strong>SVN</strong></li>\n</ol>\n<h1 id=\"十三、项目管理-构建工具-重中之重\"><a href=\"#十三、项目管理-构建工具-重中之重\" class=\"headerlink\" title=\"十三、项目管理/构建工具    (重中之重)\"></a><strong>十三、项目管理/构建工具    (重中之重)</strong></h1><ol>\n<li><strong>Maven</strong></li>\n<li><strong>Gradle</strong></li>\n</ol>\n<h1 id=\"十四、Spring家族-重中之重\"><a href=\"#十四、Spring家族-重中之重\" class=\"headerlink\" title=\"十四、Spring家族    (重中之重)\"></a><strong>十四、Spring家族    (重中之重)</strong></h1><ol>\n<li><strong>Spring</strong><ol>\n<li><strong>IoC</strong></li>\n<li><strong>AOP</strong></li>\n</ol>\n</li>\n<li><strong>Spring MVC</strong></li>\n<li><strong>Spring Boot</strong><ol>\n<li><strong>自动配置、开箱即用</strong></li>\n<li><strong>整合Web</strong></li>\n<li><strong>整合数据库(事务问题)</strong></li>\n<li><strong>整合权限</strong><ol>\n<li><strong>Shiro</strong></li>\n<li><strong>Spring Security</strong></li>\n</ol>\n</li>\n<li><strong>整合各种中间件:缓存、MQ、RPC框架、NIO框架等</strong></li>\n<li><strong>整合其他组件</strong></li>\n</ol>\n</li>\n<li><strong>Spring Cloud——见「微服务」部分</strong></li>\n</ol>\n<h1 id=\"十五、服务器软件-重中之重\"><a href=\"#十五、服务器软件-重中之重\" class=\"headerlink\" title=\"十五、服务器软件    (重中之重)\"></a><strong>十五、服务器软件    (重中之重)</strong></h1><ol>\n<li><strong>Web服务器——Nginx</strong></li>\n<li><strong>应用服务器</strong><ol>\n<li><strong>Tomcat</strong></li>\n<li><strong>Jetty</strong></li>\n<li><strong>Undertow</strong></li>\n</ol>\n</li>\n</ol>\n<h1 id=\"十六、缓存-重中之重\"><a href=\"#十六、缓存-重中之重\" class=\"headerlink\" title=\"十六、缓存    (重中之重)\"></a><strong>十六、缓存    (重中之重)</strong></h1><ol>\n<li><strong>Redis</strong><ol>\n<li><strong>5大数据类型</strong></li>\n<li><strong>事务</strong></li>\n<li><strong>消息通知</strong></li>\n<li><strong>管道</strong></li>\n<li><strong>持久化</strong></li>\n<li><strong>集群</strong></li>\n</ol>\n</li>\n<li><strong>memcache</strong></li>\n</ol>\n<h1 id=\"十七、消息队列\"><a href=\"#十七、消息队列\" class=\"headerlink\" title=\"十七、消息队列\"></a><strong>十七、消息队列</strong></h1><ol>\n<li><strong>RocketMQ</strong></li>\n<li><strong>RabbitMQ</strong></li>\n<li><strong>Kafka</strong></li>\n</ol>\n<h1 id=\"十八、RPC框架\"><a href=\"#十八、RPC框架\" class=\"headerlink\" title=\"十八、RPC框架\"></a><strong>十八、RPC框架</strong></h1><ol>\n<li><strong>Dubbo</strong></li>\n<li><strong>gRPC</strong></li>\n<li><strong>Thrift</strong></li>\n<li><strong>Netty</strong></li>\n</ol>\n<h1 id=\"十九、ORM层框架\"><a href=\"#十九、ORM层框架\" class=\"headerlink\" title=\"十九、ORM层框架\"></a><strong>十九、ORM层框架</strong></h1><ol>\n<li><strong>MyBatis</strong></li>\n<li><strong>Hibernate</strong></li>\n<li><strong>JPA</strong></li>\n</ol>\n<h1 id=\"二十、连接池\"><a href=\"#二十、连接池\" class=\"headerlink\" title=\"二十、连接池\"></a><strong>二十、连接池</strong></h1><ol>\n<li><strong>Druid</strong></li>\n<li><strong>HikariCP</strong></li>\n<li><strong>c3PO</strong></li>\n</ol>\n<h1 id=\"二十一、三大件-重中之重\"><a href=\"#二十一、三大件-重中之重\" class=\"headerlink\" title=\"二十一、三大件    (重中之重)\"></a><strong>二十一、三大件    (重中之重)</strong></h1><ol>\n<li><strong>HTML</strong></li>\n<li><strong>JavaScript</strong></li>\n<li><strong>CSS</strong></li>\n</ol>\n<h1 id=\"二十二、基础库-重中之重\"><a href=\"#二十二、基础库-重中之重\" class=\"headerlink\" title=\"二十二、基础库    (重中之重)\"></a><strong>二十二、基础库    (重中之重)</strong></h1><ol>\n<li><strong>jQuery</strong></li>\n<li><strong>Ajax</strong></li>\n</ol>\n<h1 id=\"二十三、模版框架-重中之重\"><a href=\"#二十三、模版框架-重中之重\" class=\"headerlink\" title=\"二十三、模版框架    (重中之重)\"></a><strong>二十三、模版框架    (重中之重)</strong></h1><ol>\n<li><strong>JSP/JSTL</strong></li>\n<li><strong>Thymeleaf</strong></li>\n<li><strong>FreeMarker</strong></li>\n</ol>\n<h1 id=\"二十四、组件化框架-重中之重\"><a href=\"#二十四、组件化框架-重中之重\" class=\"headerlink\" title=\"二十四、组件化框架    (重中之重)\"></a><strong>二十四、组件化框架    (重中之重)</strong></h1><ol>\n<li><strong>Vue</strong></li>\n<li><strong>React</strong></li>\n<li><strong>Angular</strong></li>\n</ol>\n<hr>\n<h1 id=\"编程基础\"><a href=\"#编程基础\" class=\"headerlink\" title=\"编程基础\"></a><strong>编程基础</strong></h1><p>到底我们口口声声所说的编程基础是什么？</p>\n<p>这次在上面的脑图中已经完全展现了！</p>\n<p>即使后面的东西都没学，基础部分是肯定需要完成的，这也是后面所有应用框架学习的基石；反之，在应用框架的学习时如果感觉吃力，可能非常有必要回过头来再巩固对应的基础知识。</p>\n<p>然而基础的确不是一蹴而就的，确实需要一定的反复和回炉，才能做到真正的融会贯通，这需要一个过程，所以珍惜每一次复习基础的机会。</p>\n<h1 id=\"学了哪些才能找（到）工作？\"><a href=\"#学了哪些才能找（到）工作？\" class=\"headerlink\" title=\"学了哪些才能找（到）工作？\"></a><strong>学了哪些才能找（到）工作？</strong></h1><p>啊，这个问题有点难。</p>\n<p>只能这样说，优先把编程基础准备充分，不留纰漏；其次，应用框架部分内容能学则学，尽力准备，在熟练使用的同时能了解原理，就基本很稳了。</p>\n<h1 id=\"后端开发需要学前端吗？\"><a href=\"#后端开发需要学前端吗？\" class=\"headerlink\" title=\"后端开发需要学前端吗？\"></a><strong>后端开发需要学前端吗？</strong></h1><p>完全不懂肯定是不行的，会太过于被动，但钻牛角尖也的确没必要。</p>\n<p>如果目标在后端开发相关岗位，还是优先掌握后端领域的东西为好，毕竟本领域的东西就太多了，而对于前端的知识，大致技术轮廓和概念了解一下还是有必要的。</p>\n<h1 id=\"咋没有Java-Web？\"><a href=\"#咋没有Java-Web？\" class=\"headerlink\" title=\"咋没有Java Web？\"></a><strong>咋没有Java Web？</strong></h1><p>有人问，为什么图中没有Java Web学习路线相关的东西呢？</p>\n<p>本来所谓的Java Web无非也就是：HTTP协议、Servlet、Web容器、JSP、Cookie和Session等等这些内容。</p>\n<p>所以这几点对照到上面的脑图会发现，其实已经包含在上图的诸如：「计算机网络」、「Spring框架」、「模板框架」等等这些部分里了，所以这些掌握了，所谓的Java Web就自然过关了。</p>\n<h1 id=\"学完如何能保证留下东西？\"><a href=\"#学完如何能保证留下东西？\" class=\"headerlink\" title=\"学完如何能保证留下东西？\"></a><strong>学完如何能保证留下东西？</strong></h1><p>我坚信：学习不在入，而在出。</p>\n<p>所以勤于做笔记、善于写博客，做好技术输出非常重要，这样后面复习、回顾、自查都有章可循了。</p>\n<h1 id=\"共-勉\"><a href=\"#共-勉\" class=\"headerlink\" title=\"共 勉\"></a><strong>共 勉</strong></h1><p>在没有这样总结之前，总感觉东西很乱，但经过这一番梳理和串接之后，会发现虽然东西是不少，但好在路线也非常清晰，按照这个路线去扎实推进一般问题就不大了。</p>\n<h1 id=\"平稳降落\"><a href=\"#平稳降落\" class=\"headerlink\" title=\"平稳降落\"></a><strong>平稳降落</strong></h1><p>飞得多快，非得多高，不是目的，重点是如何平稳降落，小伙伴们也记得调整心态、注意健康，徐图长期发展。</p>\n","categories":["技术","Java后端"],"tags":["Java","后端","学习路线"]},{"title":"Java开源项目推荐","url":"/2021/11/08/Java%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E6%8E%A8%E8%8D%90/","content":"<p>推荐几个优秀的开源项目，包含Java项目学习，Java程序员面试等等，帮助你打好基础，提升能力，扩展视野，以及更好地应对面试。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"项目学习相关\"><a href=\"#项目学习相关\" class=\"headerlink\" title=\"项目学习相关\"></a><strong>项目学习相关</strong></h1><h2 id=\"Java商城\"><a href=\"#Java商城\" class=\"headerlink\" title=\"Java商城\"></a><strong>Java商城</strong></h2><p>github地址：<a href=\"https://github.com/macrozheng/mall\">https://github.com/macrozheng/mall</a></p>\n<p>完整学习文档：<a href=\"http://www.macrozheng.com/#/\">http://www.macrozheng.com/#/</a></p>\n<p>mall项目是一套电商系统，包括前台商城系统及后台管理系统，基于SpringBoot+MyBatis实现，采用Docker容器化部署。前台商城系统包含首页门户、商品推荐、商品搜索、商品展示、购物车、订单流程、会员中心、客户服务、帮助中心等模块。后台管理系统包含商品管理、订单管理、会员管理、促销管理、运营管理、内容管理、统计报表、财务管理、权限管理、设置等模块。</p>\n<h2 id=\"Java秒杀\"><a href=\"#Java秒杀\" class=\"headerlink\" title=\"Java秒杀\"></a><strong>Java秒杀</strong></h2><p>github地址：<a href=\"https://github.com/qiurunze123/miaosha\">https://github.com/qiurunze123/miaosha</a></p>\n<p>高并发大流量如何进行秒杀架构，作者这部分知识做了一个系统的整理，写了一套系统。</p>\n<h2 id=\"后台管理系统\"><a href=\"#后台管理系统\" class=\"headerlink\" title=\"后台管理系统\"></a><strong>后台管理系统</strong></h2><p>github地址：<a href=\"https://github.com/elunez/eladmin\">https://github.com/elunez/eladmin</a></p>\n<p>项目基于 Spring Boot 2.1.0 、 Jpa、 Spring Security、redis、Vue的前后端分离的后台管理系统，项目采用分模块开发方式， 权限控制采用 RBAC，支持数据字典与数据权限管理，支持一键生成前后端代码，支持动态路由。</p>\n<h2 id=\"微人事\"><a href=\"#微人事\" class=\"headerlink\" title=\"微人事\"></a><strong>微人事</strong></h2><p>github地址：<a href=\"https://github.com/lenve/vhr\">https://github.com/lenve/vhr</a></p>\n<p>微人事是一个前后端分离的人力资源管理系统，项目采用SpringBoot+Vue开发。</p>\n<h2 id=\"Java实验室\"><a href=\"#Java实验室\" class=\"headerlink\" title=\"Java实验室\"></a><strong>Java实验室</strong></h2><p>github地址：<a href=\"https://github.com/YunaiV/SpringBoot-Labs\">https://github.com/YunaiV/SpringBoot-Labs</a></p>\n<p>一个涵盖六个专栏：Spring Boot 2.X、Spring Cloud、Spring Cloud Alibaba、Dubbo、分布式消息队列、分布式事务的仓库。有非常多的教程和代码demo。</p>\n<h2 id=\"springboot学习项目\"><a href=\"#springboot学习项目\" class=\"headerlink\" title=\"springboot学习项目\"></a><strong>springboot学习项目</strong></h2><p>github地址：</p>\n<ul>\n<li><a href=\"https://github.com/ZHENFENG13/spring-boot-projects\">https://github.com/ZHENFENG13/spring-boot-projects</a></li>\n<li><a href=\"https://github.com/YunaiV/SpringBoot-Labs\">https://github.com/YunaiV/SpringBoot-Labs</a></li>\n</ul>\n<p>该仓库中主要是 Spring Boot 的入门学习教程以及一些常用的 Spring Boot 实战项目教程，包括 Spring Boot 使用的各种示例代码，同时也包括一些实战项目的项目源码和效果展示，实战项目包括基本的 web 开发以及目前大家普遍使用的前后端分离实践项目等。</p>\n<h2 id=\"Java教程\"><a href=\"#Java教程\" class=\"headerlink\" title=\"Java教程\"></a><strong>Java教程</strong></h2><p>github地址：<a href=\"https://github.com/ZhongFuCheng3y/3y\">https://github.com/ZhongFuCheng3y/3y</a></p>\n<p>从Java基础、JavaWeb基础到常用的框架再到面试题都有完整的教程，几乎涵盖了Java后端必备的知识点。</p>\n<h1 id=\"面试相关\"><a href=\"#面试相关\" class=\"headerlink\" title=\"面试相关\"></a><strong>面试相关</strong></h1><h2 id=\"Java面试\"><a href=\"#Java面试\" class=\"headerlink\" title=\"Java面试\"></a><strong>Java面试</strong></h2><p>github地址：<a href=\"https://github.com/Snailclimb/JavaGuide\">https://github.com/Snailclimb/JavaGuide</a></p>\n<p>「Java学习+面试指南」一份涵盖大部分 Java 程序员所需要掌握的核心知识。准备 Java 面试，首选 JavaGuide！</p>\n<h2 id=\"系统设计面试\"><a href=\"#系统设计面试\" class=\"headerlink\" title=\"系统设计面试\"></a><strong>系统设计面试</strong></h2><p>github地址：<a href=\"https://github.com/donnemartin/system-design-primer\">https://github.com/donnemartin/system-design-primer</a><br>学习如何设计可扩展的系统将会有助于你成为一个更好的工程师。<br>系统设计是一个很宽泛的话题。在互联网上，关于系统设计原则的资源也是多如牛毛。<br>这个仓库就是这些资源的组织收集，它可以帮助你学习如何构建可扩展的系统。</p>\n<h2 id=\"计算机面试\"><a href=\"#计算机面试\" class=\"headerlink\" title=\"计算机面试\"></a><strong>计算机面试</strong></h2><p>github地址：<a href=\"https://github.com/CyC2018/CS-Notes\">https://github.com/CyC2018/CS-Notes</a></p>\n<p>技术面试必备基础知识、Leetcode、计算机操作系统、计算机网络、系统设计</p>\n<h1 id=\"合集相关\"><a href=\"#合集相关\" class=\"headerlink\" title=\"合集相关\"></a><strong>合集相关</strong></h1><h2 id=\"Java开源项目合集\"><a href=\"#Java开源项目合集\" class=\"headerlink\" title=\"Java开源项目合集\"></a><strong>Java开源项目合集</strong></h2><p>github地址：<a href=\"https://github.com/CodingDocs/awesome-java\">https://github.com/CodingDocs/awesome-java</a></p>\n<p>Github 上非常棒的 Java 开源项目整理，我前面提到的开源项目很多都在里面有收录</p>\n","categories":["技术","Java后端"],"tags":["Java","Java 项目"]},{"title":"Linux vi/vim——终端中的编辑器","url":"/2020/08/16/Linux-vi-vim%E2%80%94%E2%80%94%E7%BB%88%E7%AB%AF%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/","content":"<h1 id=\"什么是-vi-vim\"><a href=\"#什么是-vi-vim\" class=\"headerlink\" title=\"什么是 vi/vim?\"></a><strong>什么是 vi/vim?</strong></h1><h2 id=\"vi\"><a href=\"#vi\" class=\"headerlink\" title=\"vi\"></a><strong>vi</strong></h2><p>vi 是 Visual interface 的简称，是 Linux 中最经典的文本编辑器</p>\n<a id=\"more\"></a>\n\n<p>vi 的核心设计思想 —— 让程序员的手指始终保持在键盘的核心区域，就能完成所有的编辑操作</p>\n<p><img data-src=\"https://i.loli.net/2020/08/20/hQdzCk1THycsWuq.png\" alt=\"image.png\"></p>\n<p>vi 的特点：</p>\n<ul>\n<li><p>没有图形界面 的 功能强大 的编辑器</p>\n</li>\n<li><p>只能是编辑 文本内容，不能对字体、段落进行排版</p>\n</li>\n<li><p>不支持鼠标操作</p>\n</li>\n<li><p>没有菜单</p>\n</li>\n<li><p>只有命令</p>\n</li>\n</ul>\n<p>vi 编辑器在系统管理、服务器管理编辑文件时，其功能永远不是图形界面的编辑器能比拟的</p>\n<h2 id=\"vim\"><a href=\"#vim\" class=\"headerlink\" title=\"vim\"></a><strong>vim</strong></h2><p>vim = vi improved</p>\n<p>vim 是从 vi 发展出来的一个文本编辑器，支持代码补全、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用，被称为编辑器之神</p>\n<h2 id=\"学习的目的\"><a href=\"#学习的目的\" class=\"headerlink\" title=\"学习的目的\"></a><strong>学习的目的</strong></h2><p>在工作中，要对服务器上的文件进行简单的修改，可以使用 ssh 远程登录到服务器上，并且使用 vim 进行快速的编辑即可</p>\n<p>常见需要修改的文件包括：</p>\n<ul>\n<li><p>源程序</p>\n</li>\n<li><p>配置文件，例如 ssh 的配置文件 ~/.ssh/config</p>\n<blockquote>\n<ul>\n<li>在没有图形界面的环境下，要编辑文件，vim 是最佳选择！</li>\n<li>每一个要使用 Linux 的程序员，都应该或多或少的学习一些 vim 的常用命令</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<h1 id=\"vi-vim-的使用\"><a href=\"#vi-vim-的使用\" class=\"headerlink\" title=\"vi/vim 的使用\"></a><strong>vi/vim 的使用</strong></h1><h2 id=\"打开和新建文件\"><a href=\"#打开和新建文件\" class=\"headerlink\" title=\"打开和新建文件\"></a><strong>打开和新建文件</strong></h2><p>在终端中输入 vim 在后面跟上文件名 即可</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vim 文件名</span><br></pre></td></tr></table></figure>\n\n<p>如果文件已经存在，会直接打开该文件</p>\n<p>如果文件不存在，会新建一个文件</p>\n<h3 id=\"打开文件并且定位行\"><a href=\"#打开文件并且定位行\" class=\"headerlink\" title=\"打开文件并且定位行\"></a><strong>打开文件并且定位行</strong></h3><p>在日常工作中，有可能会遇到 打开一个文件，并定位到指定行 的情况</p>\n<p>例如：在开发时，知道某一行代码有错误，可以 快速定位 到出错代码的位置</p>\n<p>这个时候，可以使用以下命令打开文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vim 文件名 + 行数</span><br></pre></td></tr></table></figure>\n\n<p><strong>提示：</strong></p>\n<p>如果只带上 + 而不指定行号，会直接定位到文件末尾</p>\n<h3 id=\"异常处理\"><a href=\"#异常处理\" class=\"headerlink\" title=\"异常处理\"></a><strong>异常处理</strong></h3><p>如果 vim 异常退出，在磁盘上可能会保存有交换文件</p>\n<p>下次再使用 vim 编辑该文件时，会看到以下屏幕信息，按下字母 d 可以 删除交换文件 即可</p>\n<p><strong>提示：</strong></p>\n<p>按下键盘时，注意关闭输入法</p>\n<p><img data-src=\"https://i.loli.net/2020/08/20/SyDp1rMg8k26QUb.png\" alt=\"image.png\"></p>\n<h2 id=\"四种工作模式\"><a href=\"#四种工作模式\" class=\"headerlink\" title=\"四种工作模式\"></a><strong>四种工作模式</strong></h2><p><strong>vim 有四种基本工作模式：</strong></p>\n<ul>\n<li><h3 id=\"正常模式：Normal-Mode（命令模式-Command-Mode）-——-主要用来浏览和修改文本内容的\"><a href=\"#正常模式：Normal-Mode（命令模式-Command-Mode）-——-主要用来浏览和修改文本内容的\" class=\"headerlink\" title=\"正常模式：Normal Mode（命令模式 Command Mode） —— 主要用来浏览和修改文本内容的\"></a><strong>正常模式：Normal Mode（命令模式 Command Mode）</strong> —— 主要用来浏览和修改文本内容的</h3><ul>\n<li><p>打开文件首先进入命令模式，是使用 vim 的 <strong>入口</strong></p>\n</li>\n<li><p>通过 命令 对文件进行常规的编辑操作，例如：定位、翻页、复制、粘贴、删除……</p>\n</li>\n<li><p>在其他图形编辑器下，通过 快捷键 或者 鼠标 实现的操作，都在 命令模式 下实现</p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"底线命令模式：Last-Line-Mode（命令模式-Command-Mode）-——-用于操作文本文件（而不是操作文本文件的内容）\"><a href=\"#底线命令模式：Last-Line-Mode（命令模式-Command-Mode）-——-用于操作文本文件（而不是操作文本文件的内容）\" class=\"headerlink\" title=\"底线命令模式：Last Line Mode（命令模式 Command Mode） —— 用于操作文本文件（而不是操作文本文件的内容）\"></a><strong>底线命令模式：Last Line Mode（命令模式 Command Mode）</strong> —— 用于操作文本文件（而不是操作文本文件的内容）</h3><ul>\n<li><p>例如保存文件；或者用来改变编辑器本身的状态，例如设定多栏窗口、标签或者退出编辑器</p>\n</li>\n<li><p>要退出 vim 返回到控制台，需要在底线命令模式下输入命令</p>\n</li>\n<li><p>末行模式 是 vim 的 <strong>出口</strong></p>\n</li>\n</ul>\n</li>\n<li><h3 id=\"插入模式：Insert-Mode-——-用来向文本中添加内容的\"><a href=\"#插入模式：Insert-Mode-——-用来向文本中添加内容的\" class=\"headerlink\" title=\"插入模式：Insert Mode —— 用来向文本中添加内容的\"></a><strong>插入模式：Insert Mode</strong> —— 用来向文本中添加内容的</h3></li>\n<li><h3 id=\"视觉模式：Visual-Mode-——-相当于高亮选取文本后的普通模式\"><a href=\"#视觉模式：Visual-Mode-——-相当于高亮选取文本后的普通模式\" class=\"headerlink\" title=\"视觉模式：Visual Mode —— 相当于高亮选取文本后的普通模式\"></a><strong>视觉模式：Visual Mode</strong> —— 相当于高亮选取文本后的普通模式</h3><ul>\n<li>可视模式具有子模式，以行为单位进行选取的可视行模式，使用 “V” 键进入（也就是 Shift+v）；和以块为单位进行选取的可视块模式，使用 “Ctrl+v” 键进入。</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2020/08/21/VbRE3z4LXhx2ONw.png\" alt=\"image.png\"></p>\n<p><strong>提示：</strong><br>在 Touch Bar 的 Mac 电脑上 ，按 ESC 不方便，可以使用 CTRL + [ 替代</p>\n<h2 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a><strong>常用命令</strong></h2><h3 id=\"1-移动（基本）\"><a href=\"#1-移动（基本）\" class=\"headerlink\" title=\"1. 移动（基本）\"></a><strong>1. 移动（基本）</strong></h3><p>要熟练使用 vim，首先应该学会怎么在正常模式下样快速移动光标</p>\n<p>编辑操作命令，能够和移动命令结合在一起使用</p>\n<h4 id=\"1-上、下、左、右\"><a href=\"#1-上、下、左、右\" class=\"headerlink\" title=\"1) 上、下、左、右\"></a><strong>1) 上、下、左、右</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">手指</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">h</td>\n<td align=\"center\">向左</td>\n<td align=\"center\">食指</td>\n</tr>\n<tr>\n<td align=\"center\">j</td>\n<td align=\"center\">向下</td>\n<td align=\"center\">食指</td>\n</tr>\n<tr>\n<td align=\"center\">k</td>\n<td align=\"center\">向上</td>\n<td align=\"center\">中指</td>\n</tr>\n<tr>\n<td align=\"center\">l</td>\n<td align=\"center\">向右</td>\n<td align=\"center\">无名指</td>\n</tr>\n</tbody></table>\n<p><img data-src=\"https://i.loli.net/2020/08/21/Svy5MXh2UnxV73i.png\" alt=\"image.png\"></p>\n<h4 id=\"2-行内移动\"><a href=\"#2-行内移动\" class=\"headerlink\" title=\"2) 行内移动\"></a><strong>2) 行内移动</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">w</td>\n<td align=\"center\">word</td>\n<td align=\"center\">向后移动一个单词</td>\n</tr>\n<tr>\n<td align=\"center\">b</td>\n<td align=\"center\">back</td>\n<td align=\"center\">向前移动一个单词</td>\n</tr>\n<tr>\n<td align=\"center\">0</td>\n<td align=\"center\"></td>\n<td align=\"center\">行首</td>\n</tr>\n<tr>\n<td align=\"center\">^</td>\n<td align=\"center\"></td>\n<td align=\"center\">行首，第一个不是空白字符的位置</td>\n</tr>\n<tr>\n<td align=\"center\">$</td>\n<td align=\"center\"></td>\n<td align=\"center\">行尾</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-行数移动\"><a href=\"#3-行数移动\" class=\"headerlink\" title=\"3) 行数移动\"></a><strong>3) 行数移动</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">gg</td>\n<td align=\"center\">go</td>\n<td align=\"center\">文件顶部</td>\n</tr>\n<tr>\n<td align=\"center\">G</td>\n<td align=\"center\">go</td>\n<td align=\"center\">文件末尾</td>\n</tr>\n<tr>\n<td align=\"center\">数字gg</td>\n<td align=\"center\">go</td>\n<td align=\"center\">移动到 数字 对应行数</td>\n</tr>\n<tr>\n<td align=\"center\">数字G</td>\n<td align=\"center\">go</td>\n<td align=\"center\">移动到 数字 对应行数</td>\n</tr>\n<tr>\n<td align=\"center\">:数字</td>\n<td align=\"center\"></td>\n<td align=\"center\">移动到 数字 对应行数</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-屏幕移动\"><a href=\"#4-屏幕移动\" class=\"headerlink\" title=\"4) 屏幕移动\"></a><strong>4) 屏幕移动</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">Ctrl + b</td>\n<td align=\"center\">back</td>\n<td align=\"center\">向上翻页</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + f</td>\n<td align=\"center\">forward</td>\n<td align=\"center\">向下翻页</td>\n</tr>\n<tr>\n<td align=\"center\">H</td>\n<td align=\"center\">Head</td>\n<td align=\"center\">屏幕顶部</td>\n</tr>\n<tr>\n<td align=\"center\">M</td>\n<td align=\"center\">Middle</td>\n<td align=\"center\">屏幕中间</td>\n</tr>\n<tr>\n<td align=\"center\">L</td>\n<td align=\"center\">Low</td>\n<td align=\"center\">屏幕底部</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-移动（程序）\"><a href=\"#2-移动（程序）\" class=\"headerlink\" title=\"2. 移动（程序）\"></a><strong>2. 移动（程序）</strong></h3><h4 id=\"1-段落移动\"><a href=\"#1-段落移动\" class=\"headerlink\" title=\"1) 段落移动\"></a><strong>1) 段落移动</strong></h4><p>vim中使用空行来区分段落</p>\n<p>在程序开发时，通常一段功能相关的代码会写在一起 —— 之间没有空行</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">{</td>\n<td align=\"center\">上一段</td>\n</tr>\n<tr>\n<td align=\"center\">}</td>\n<td align=\"center\">下一段</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-括号切换\"><a href=\"#2-括号切换\" class=\"headerlink\" title=\"2) 括号切换\"></a><strong>2) 括号切换</strong></h4><p>在程序世界中，()、[]、{} 使用频率很高，而且都是成对出现的</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">%</td>\n<td align=\"center\">括号匹配及切换</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-标记\"><a href=\"#3-标记\" class=\"headerlink\" title=\"3) 标记\"></a><strong>3) 标记</strong></h4><p>在开发时，某一块代码可能需要稍后处理，例如：编辑、查看</p>\n<p>此时先使用 m 增加一个标记，这样可以在需要时快速地跳转回来或者执行其他编辑操作</p>\n<p>标记名称 可以是 a~z 或者 A~Z 之间的任意一个字母<br>添加了标记的行如果被删除，标记同时被删除</p>\n<p>如果在其他行添加了相同名称的标记，之前添加的标记也会被替换掉</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">mx</td>\n<td align=\"center\">mark</td>\n<td align=\"center\">添加标记 x，x 是 a~z 或者 A~Z 之间的任意一个字母</td>\n</tr>\n<tr>\n<td align=\"center\">‘x</td>\n<td align=\"center\"></td>\n<td align=\"center\">直接定位到标记 x 所在位置</td>\n</tr>\n</tbody></table>\n<h3 id=\"3-撤销和恢复撤销\"><a href=\"#3-撤销和恢复撤销\" class=\"headerlink\" title=\"3. 撤销和恢复撤销\"></a><strong>3. 撤销和恢复撤销</strong></h3><p>在学习编辑命令之前，先要知道怎样撤销之前一次 错误的 编辑动作！</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">u</td>\n<td align=\"center\">undo</td>\n<td align=\"center\">撤销上次命令</td>\n</tr>\n<tr>\n<td align=\"center\">CTRL + r</td>\n<td align=\"center\">redo</td>\n<td align=\"center\">恢复撤销的命令</td>\n</tr>\n</tbody></table>\n<h3 id=\"4-选中文本（可视模式）\"><a href=\"#4-选中文本（可视模式）\" class=\"headerlink\" title=\"4. 选中文本（可视模式）\"></a><strong>4. 选中文本（可视模式）</strong></h3><p>学习复制命令前，应该先学会怎么样选中要复制的代码</p>\n<p>在 vim 中要选择文本，需要先使用 Visual 命令切换到 可视模式</p>\n<p>vim 中提供了三种可视模式，可以方便程序员选择选中文本的方式</p>\n<p>按 ESC 可以放弃选中，返回到正常模式</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">模式</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">v</td>\n<td align=\"center\">可视模式</td>\n<td align=\"center\">从光标位置开始按照正常模式选择文本</td>\n</tr>\n<tr>\n<td align=\"center\">V</td>\n<td align=\"center\">可视行模式</td>\n<td align=\"center\">选中光标经过的完整行</td>\n</tr>\n<tr>\n<td align=\"center\">Ctrl + v</td>\n<td align=\"center\">可视块模式</td>\n<td align=\"center\">垂直方向选中文本</td>\n</tr>\n</tbody></table>\n<p>可视模式下，可以和 移动命令 连用，例如：ggVG 能够选中所有内容</p>\n<h3 id=\"5-复制、粘贴\"><a href=\"#5-复制、粘贴\" class=\"headerlink\" title=\"5. 复制、粘贴\"></a><strong>5. 复制、粘贴</strong></h3><p>vi 中提供有一个 被复制文本的缓冲区</p>\n<ul>\n<li><p>复制 命令会将选中的文字保存在缓冲区</p>\n</li>\n<li><p>删除 命令删除的文字会被保存在缓冲区</p>\n</li>\n<li><p>在需要的位置，使用 粘贴 命令可以将缓冲区的文字插入到光标所在位置</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">y(移动命令)</td>\n<td align=\"center\">copy</td>\n<td align=\"center\">复制</td>\n</tr>\n<tr>\n<td align=\"center\">yy</td>\n<td align=\"center\">copy</td>\n<td align=\"center\">复制一行，可以 nyy 复制多行</td>\n</tr>\n<tr>\n<td align=\"center\">p</td>\n<td align=\"center\">paste</td>\n<td align=\"center\">粘贴</td>\n</tr>\n</tbody></table>\n<p><strong>提示：</strong></p>\n<ul>\n<li><p>命令 d、x 类似于图形界面的 剪切操作 —— CTRL + X</p>\n</li>\n<li><p>命令 y 类似于图形界面的 复制操作 —— CTRL + C</p>\n</li>\n<li><p>命令 p 类似于图形界面的 粘贴操作 —— CTRL + V</p>\n</li>\n<li><p>vi 中的 文本缓冲区同样只有一个，如果后续做过 复制、剪切 操作，之前缓冲区中的内容会被替换</p>\n</li>\n</ul>\n<p><strong>注意：</strong></p>\n<ul>\n<li>vi 中的 文本缓冲区 和系统的 剪贴板 不是同一个</li>\n<li>所以在其他软件中使用 CTRL + C 复制的内容，不能在 vi 中通过 P 命令粘贴</li>\n<li>可以在 编辑模式 下使用 鼠标右键粘贴</li>\n</ul>\n<h3 id=\"6-删除文本\"><a href=\"#6-删除文本\" class=\"headerlink\" title=\"6. 删除文本\"></a><strong>6. 删除文本</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">x</td>\n<td align=\"center\">cut</td>\n<td align=\"center\">删除光标所在字符，或者选中文字</td>\n</tr>\n<tr>\n<td align=\"center\">d(移动命令)</td>\n<td align=\"center\">delete</td>\n<td align=\"center\">删除移动命令对应的内容</td>\n</tr>\n<tr>\n<td align=\"center\">dd</td>\n<td align=\"center\">delete</td>\n<td align=\"center\">删除光标所在行，可以 ndd 复制多行</td>\n</tr>\n<tr>\n<td align=\"center\">D</td>\n<td align=\"center\">delete</td>\n<td align=\"center\">删除至行尾</td>\n</tr>\n</tbody></table>\n<p><strong>提示：</strong><br>如果使用可视模式已经选中了一段文本，那么无论使用 d 还是 x，都可以删除选中文本</p>\n<p>删除命令可以和移动命令连用，以下是常见的组合命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">dw        # 从光标位置删除到单词末尾</span><br><span class=\"line\">d0        # 从光标位置删除到一行的起始位置</span><br><span class=\"line\">d&#125;        # 从光标位置删除到段落结尾</span><br><span class=\"line\">ndd       # 从光标位置向下连续删除 n 行</span><br><span class=\"line\">d代码行G   # 从光标所在行 删除到 指定代码行 之间的所有代码</span><br><span class=\"line\">d&#39;a       # 从光标所在行 删除到 标记a 之间的所有代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"7-替换\"><a href=\"#7-替换\" class=\"headerlink\" title=\"7. 替换\"></a><strong>7. 替换</strong></h3><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">工作模式</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">r</td>\n<td align=\"center\">replace</td>\n<td align=\"center\">替换当前字符</td>\n<td align=\"center\">命令模式</td>\n</tr>\n<tr>\n<td align=\"center\">R</td>\n<td align=\"center\">replace</td>\n<td align=\"center\">替换当前行光标后的字符</td>\n<td align=\"center\">替换模式</td>\n</tr>\n</tbody></table>\n<p>R 命令可以进入替换模式，替换完成后，按下 ESC 可以回到命令模式</p>\n<p>替换命令的作用就是不用进入编辑模式，对文件进行轻量级的修改</p>\n<h3 id=\"8-查找\"><a href=\"#8-查找\" class=\"headerlink\" title=\"8. 查找\"></a><strong>8. 查找</strong></h3><h4 id=\"1-常规查找\"><a href=\"#1-常规查找\" class=\"headerlink\" title=\"1) 常规查找\"></a><strong>1) 常规查找</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">/str</td>\n<td align=\"center\">查找 str</td>\n</tr>\n</tbody></table>\n<p>查找到指定内容之后，使用 Next 查找下一个出现的位置</p>\n<ul>\n<li>n: 查找下一个</li>\n<li>N: 查找上一个</li>\n</ul>\n<p>如果不想看到高亮显示，可以随便查找一个文件中不存在的内容即可</p>\n<h4 id=\"2-单词快速匹配\"><a href=\"#2-单词快速匹配\" class=\"headerlink\" title=\"2) 单词快速匹配\"></a><strong>2) 单词快速匹配</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">*</td>\n<td align=\"center\">向后查找当前光标所在单词</td>\n</tr>\n<tr>\n<td align=\"center\">#</td>\n<td align=\"center\">向前查找当前光标所在单词</td>\n</tr>\n</tbody></table>\n<p>在开发中，通过单词快速匹配，可以快速看到这个单词在其他什么位置使用过</p>\n<h3 id=\"9-查找并替换\"><a href=\"#9-查找并替换\" class=\"headerlink\" title=\"9. 查找并替换\"></a><strong>9. 查找并替换</strong></h3><p>在 vim 中查找和替换命令需要在底线命令模式下执行</p>\n<p>命令格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;&#x2F;&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"1-全局替换\"><a href=\"#1-全局替换\" class=\"headerlink\" title=\"1) 全局替换\"></a><strong>1) 全局替换</strong></h4><p>一次性替换文件中的所有出现的旧文本</p>\n<p>命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-可视区域替换\"><a href=\"#2-可视区域替换\" class=\"headerlink\" title=\"2) 可视区域替换\"></a><strong>2) 可视区域替换</strong></h4><p>先选中要替换文字的范围</p>\n<p>命令格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:s&#x2F;旧文本&#x2F;新文本&#x2F;g</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"3-确认替换\"><a href=\"#3-确认替换\" class=\"headerlink\" title=\"3) 确认替换\"></a><strong>3) 确认替换</strong></h4><p>如果把末尾的 g 改成 gc 在替换的时候，会有提示！推荐使用！</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">:%s&#x2F;旧文本&#x2F;新文本&#x2F;gc</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>y - yes 替换</p>\n</li>\n<li><p>n - no 不替换</p>\n</li>\n<li><p>a - all 替换所有</p>\n</li>\n<li><p>q - quit 退出替换</p>\n</li>\n<li><p>l - last 最后一个，并把光标移动到行首</p>\n</li>\n<li><p>^E 向下滚屏</p>\n</li>\n<li><p>^Y 向上滚屏</p>\n</li>\n</ul>\n<h3 id=\"10-插入命令\"><a href=\"#10-插入命令\" class=\"headerlink\" title=\"10. 插入命令\"></a><strong>10. 插入命令</strong></h3><p>在 vi 中除了常用的 i 进入 编辑模式 外，还提供了以下命令同样可以进入编辑模式：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n<th align=\"center\">常用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">i</td>\n<td align=\"center\">insert</td>\n<td align=\"center\">在当前字符前插入文本</td>\n<td align=\"center\">常用</td>\n</tr>\n<tr>\n<td align=\"center\">I</td>\n<td align=\"center\">insert</td>\n<td align=\"center\">在行首插入文本</td>\n<td align=\"center\">较常用</td>\n</tr>\n<tr>\n<td align=\"center\">a</td>\n<td align=\"center\">append</td>\n<td align=\"center\">在当前字符后添加文本</td>\n<td align=\"center\"></td>\n</tr>\n<tr>\n<td align=\"center\">A</td>\n<td align=\"center\">append</td>\n<td align=\"center\">在行末添加文本</td>\n<td align=\"center\">较常用</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\"></td>\n<td align=\"center\">在当前行后面插入一空行</td>\n<td align=\"center\">常用</td>\n</tr>\n<tr>\n<td align=\"center\">O</td>\n<td align=\"center\"></td>\n<td align=\"center\">在当前行前面插入一空行</td>\n<td align=\"center\">常用</td>\n</tr>\n</tbody></table>\n<p><img data-src=\"https://i.loli.net/2020/08/21/cUIH65GTzNqvjpA.png\" alt=\"image.png\"></p>\n<h4 id=\"1-演练-1-——-编辑命令和数字连用\"><a href=\"#1-演练-1-——-编辑命令和数字连用\" class=\"headerlink\" title=\"1) 演练 1 —— 编辑命令和数字连用\"></a><strong>1) 演练 1 —— 编辑命令和数字连用</strong></h4><p>在开发中，可能会遇到连续输入 N 个同样的字符</p>\n<p>在 Python 中有简单的方法，但是其他语言中通常需要自己输入</p>\n<p>例如：**<strong>****</strong> 连续 10 个星号</p>\n<p>要实现这个效果可以在正常模式下</p>\n<ol>\n<li><p>输入 10，表示要重复 10 次</p>\n</li>\n<li><p>输入 i 进入 插入模式</p>\n</li>\n<li><p>输入 * 也就是重复的文字</p>\n</li>\n<li><p>按下 ESC 返回到 正常模式，返回之后 vim 就会把第 2、3 两步的操作重复 10 次</p>\n</li>\n</ol>\n<p><strong>提示：</strong> 正常开发时，在 进入插入模式之前，不要按数字</p>\n<h4 id=\"2-演练-2-——-利用-可视块-给多行代码增加注释\"><a href=\"#2-演练-2-——-利用-可视块-给多行代码增加注释\" class=\"headerlink\" title=\"2) 演练 2 —— 利用 可视块 给多行代码增加注释\"></a><strong>2) 演练 2 —— 利用 可视块 给多行代码增加注释</strong></h4><p>在开发中，可能会遇到一次性给多行代码 增加注释 的情况</p>\n<p>在 Python 中，要给代码增加注释，可以在代码前增加一个 #</p>\n<p>要实现这个效果可以在正常模式下</p>\n<ol>\n<li><p>移动到要添加注释的 第 1 行代码，按 ^ 来到行首</p>\n</li>\n<li><p>按 CTRL + v 进入 可视块 模式</p>\n</li>\n<li><p>使用 j 向下连续选中要添加的代码行</p>\n</li>\n<li><p>输入 I 进入 插入模式，并在 行首插5. 入，注意：一定要使用 I</p>\n</li>\n<li><p>输入 # 也就是注释符号</p>\n</li>\n<li><p>按下 ESC 返回到 正常模式，返回之后 vi 会在之前选中的每一行代码 前 插入 #</p>\n</li>\n</ol>\n<h3 id=\"11-底线命令\"><a href=\"#11-底线命令\" class=\"headerlink\" title=\"11. 底线命令\"></a><strong>11. 底线命令</strong></h3><p>底线命令主要是针对文件进行操作的：保存、退出、保存&amp;退出、搜索&amp;替换、另存、新建、浏览文件</p>\n<h4 id=\"1-基本底线命令\"><a href=\"#1-基本底线命令\" class=\"headerlink\" title=\"1) 基本底线命令\"></a><strong>1) 基本底线命令</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:w</td>\n<td align=\"center\">write</td>\n<td align=\"center\">保存</td>\n</tr>\n<tr>\n<td align=\"center\">:q</td>\n<td align=\"center\">quit</td>\n<td align=\"center\">退出，如果没有保存，不允许退出</td>\n</tr>\n<tr>\n<td align=\"center\">:q!</td>\n<td align=\"center\">quit</td>\n<td align=\"center\">强行退出，不保存退出</td>\n</tr>\n<tr>\n<td align=\"center\">:wq</td>\n<td align=\"center\">write &amp; quit</td>\n<td align=\"center\">保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:x</td>\n<td align=\"center\"></td>\n<td align=\"center\">保存并退出</td>\n</tr>\n<tr>\n<td align=\"center\">:%s///gc</td>\n<td align=\"center\"></td>\n<td align=\"center\">确认搜索并替换</td>\n</tr>\n</tbody></table>\n<p><strong>提示：</strong> 在实际开发中，可以使用 w 命令阶段性的备份代码</p>\n<h4 id=\"2-底线命令扩展\"><a href=\"#2-底线命令扩展\" class=\"headerlink\" title=\"2) 底线命令扩展\"></a><strong>2) 底线命令扩展</strong></h4><table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:e .</td>\n<td align=\"center\">edit</td>\n<td align=\"center\">会打开内置的文件浏览器，浏览要当前目录下的文件</td>\n</tr>\n<tr>\n<td align=\"center\">:n 文件名</td>\n<td align=\"center\">new</td>\n<td align=\"center\">新建文件</td>\n</tr>\n<tr>\n<td align=\"center\">:w 文件名</td>\n<td align=\"center\">write</td>\n<td align=\"center\">另存为，但是仍然编辑当前文件，并不会切换文件</td>\n</tr>\n</tbody></table>\n<p><strong>注意：</strong> 切换文件之前，必须保证当前这个文件已经被保存！</p>\n<h2 id=\"分屏命令\"><a href=\"#分屏命令\" class=\"headerlink\" title=\"分屏命令\"></a><strong>分屏命令</strong></h2><p>属于 vim 的高级命令 —— 可以 同时编辑和查看多个文件</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">:sp [文件名]</td>\n<td align=\"center\">split</td>\n<td align=\"center\">横向增加分屏</td>\n</tr>\n<tr>\n<td align=\"center\">:vsp [文件名]</td>\n<td align=\"center\">vertical split</td>\n<td align=\"center\">纵向增加分屏</td>\n</tr>\n</tbody></table>\n<h4 id=\"1-切换分屏窗口\"><a href=\"#1-切换分屏窗口\" class=\"headerlink\" title=\"1) 切换分屏窗口\"></a><strong>1) 切换分屏窗口</strong></h4><p>分屏窗口都是基于 CTRL + W 这个快捷键的，w 对应的英文单词是 window</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">w</td>\n<td align=\"center\">window</td>\n<td align=\"center\">切换到下一个窗口</td>\n</tr>\n<tr>\n<td align=\"center\">r</td>\n<td align=\"center\">reverse</td>\n<td align=\"center\">互换窗口</td>\n</tr>\n<tr>\n<td align=\"center\">c</td>\n<td align=\"center\">close</td>\n<td align=\"center\">关闭当前窗口，但是不能关闭最后一个窗口</td>\n</tr>\n<tr>\n<td align=\"center\">q</td>\n<td align=\"center\">quit</td>\n<td align=\"center\">退出当前窗口，如果是最后一个窗口，则关闭 vi</td>\n</tr>\n<tr>\n<td align=\"center\">o</td>\n<td align=\"center\">other</td>\n<td align=\"center\">关闭其他窗口</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-调整窗口大小\"><a href=\"#2-调整窗口大小\" class=\"headerlink\" title=\"2) 调整窗口大小\"></a><strong>2) 调整窗口大小</strong></h4><p>分屏窗口都是基于 CTRL + W 这个快捷键的，w 对应的英文单词是 window</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">命令</th>\n<th align=\"center\">英文</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">+</td>\n<td align=\"center\"></td>\n<td align=\"center\">增加窗口高度</td>\n</tr>\n<tr>\n<td align=\"center\">-</td>\n<td align=\"center\"></td>\n<td align=\"center\">减少窗口高度</td>\n</tr>\n<tr>\n<td align=\"center\">&gt;</td>\n<td align=\"center\"></td>\n<td align=\"center\">增加窗口宽度</td>\n</tr>\n<tr>\n<td align=\"center\">&lt;</td>\n<td align=\"center\"></td>\n<td align=\"center\">减少窗口宽度</td>\n</tr>\n<tr>\n<td align=\"center\">=</td>\n<td align=\"center\"></td>\n<td align=\"center\">等分窗口大小</td>\n</tr>\n</tbody></table>\n<p>调整窗口宽高的命令可以和数字连用，例如：5 CTRL + W + 连续 5 次增加高度</p>\n<h1 id=\"常用命令速查图\"><a href=\"#常用命令速查图\" class=\"headerlink\" title=\"常用命令速查图\"></a><strong>常用命令速查图</strong></h1><p><img data-src=\"https://i.loli.net/2020/08/21/7Ver9Rl4IDAYEJx.png\" alt=\"image.png\"></p>\n<h1 id=\"vi-vim-使用实例\"><a href=\"#vi-vim-使用实例\" class=\"headerlink\" title=\"vi/vim 使用实例\"></a><strong>vi/vim 使用实例</strong></h1><p><strong>使用 vi/vim 进入正常模式</strong></p>\n<p>如果你想要使用 vim 来建立一个名为 runoob.txt 的文件时，你可以这样做：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ vim runoob.txt</span><br></pre></td></tr></table></figure>\n\n<p>直接输入 vim 文件名 就能够进入 vim 的一般模式了。请注意，记得 vim 后面一定要加文件名，不管该文件存在与否！</p>\n<p><img data-src=\"https://i.loli.net/2020/08/21/QFV1q8KalBnXL2S.png\" alt=\"image.png\"></p>\n<p><strong>按下 i 进入插入模式(也称为编辑模式)，开始编辑文字</strong></p>\n<p>在正常模式之中，只要按下 i, o, a 等字符就可以进入输插入模式了！</p>\n<p>在插入模式当中，你可以发现在左下角状态栏中会出现 –INSERT- 的字样，那就是可以输入任意字符的提示。</p>\n<p>这个时候，键盘上除了 Esc 这个按键之外，其他的按键都可以视作为一般的输入按钮了，所以你可以进行任何的编辑。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/21/2Vq7rIy5LvQnmuD.png\" alt=\"image.png\"></p>\n<p><strong>按下 ESC 按钮回到正常模式</strong></p>\n<p>好了，假设我已经按照上面的样式给他编辑完毕了，那么应该要如何退出呢？是的！没错！就是给他按下 Esc 这个按钮即可！马上你就会发现画面左下角的 – INSERT – 不见了！</p>\n<p><strong>在正常模式中按下 :wq 储存后离开 vim</strong></p>\n<p>OK，我们要存档了，存盘并离开的指令很简单，输入 :wq 即可保存离开！</p>\n<p><img data-src=\"https://i.loli.net/2020/08/21/gb4DR8tx9KB3nXp.png\" alt=\"image.png\"></p>\n<p>OK! 这样我们就成功创建了一个 runoob.txt 的文件。</p>\n","categories":["技术"],"tags":["Linux","vi","vim","终端"]},{"title":"MAC系统 - MAC 设置环境变量PATH 和 查看PATH","url":"/2021/08/04/MAC%E7%B3%BB%E7%BB%9F-MAC-%E8%AE%BE%E7%BD%AE%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8FPATH-%E5%92%8C-%E6%9F%A5%E7%9C%8BPATH/","content":"<h2 id=\"理论篇\"><a href=\"#理论篇\" class=\"headerlink\" title=\"理论篇\"></a>理论篇</h2><p>Mac系统的环境变量，加载顺序为：<br>/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc</p>\n<p>/etc/profile和/etc/paths是系统级别的，系统启动就会加载，后面几个是当前用户级的环境变量。后面3个按照从前往后的顺序读取，如果/.bash_profile文件存在，则后面的几个文件就会被忽略不读了，如果/.bash_profile文件不存在，才会以此类推读取后面的文件。~/.bashrc没有上述规则，它是bash shell打开的时候载入的。</p>\n<a id=\"more\"></a>\n\n<p>PATH的语法为如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#中间用冒号隔开</span><br><span class=\"line\">export PATH&#x3D;$PATH:&lt;PATH 1&gt;:&lt;PATH 2&gt;:&lt;PATH 3&gt;:------:&lt;PATH N&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"上述文件的科普\"><a href=\"#上述文件的科普\" class=\"headerlink\" title=\"上述文件的科普\"></a>上述文件的科普</h3><ul>\n<li><p>/etc/paths （全局建议修改这个文件 ）<br>编辑 paths，将环境变量添加到 paths文件中 ，一行一个路径<br>Hint：输入环境变量时，不用一个一个地输入，只要拖动文件夹到 Terminal 里就可以了。</p>\n</li>\n<li><p>/etc/profile （建议不修改这个文件 ）<br>全局（公有）配置，不管是哪个用户，登录时都会读取该文件。</p>\n</li>\n<li><p>/etc/bashrc （一般在这个文件中添加系统级环境变量）<br>全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件</p>\n</li>\n<li><p>.profile 文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置<br>使用注意：如果你有对/etc/profile有修改的话必须得重启你的修改才会生效，此修改对每个用户都生效。</p>\n</li>\n<li><p>./bashrc 每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.<br>使用注意 对所有的使用bash的用户修改某个配置并在以后打开的bash都生效的话可以修改这个文件，修改这个文件不用重启，重新打开一个bash即可生效。</p>\n</li>\n<li><p>./bash_profile 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该文件被读取.（每个用户都有一个.bashrc文件，在用户目录下）<br>使用注意 需要需要重启才会生效，/etc/profile对所有用户生效，~/.bash_profile只对当前用户生效。</p>\n</li>\n<li><p>source ./.bash_profile 或者 ./.profile 环境信息生效</p>\n</li>\n</ul>\n<h2 id=\"操作篇\"><a href=\"#操作篇\" class=\"headerlink\" title=\"操作篇\"></a>操作篇</h2><h3 id=\"全局设置\"><a href=\"#全局设置\" class=\"headerlink\" title=\"全局设置\"></a>全局设置</h3><ol>\n<li><p>创建一个文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo touch &#x2F;etc&#x2F;paths.d&#x2F;mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>用 vim 打开这个文件（如果是以 open -t 的方式打开，则不允许编辑）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo vim &#x2F;etc&#x2F;paths.d&#x2F;mysql</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>编辑该文件，键入路径并保存（关闭该 Terminal 窗口并重新打开一个，就能使用 mysql 命令了）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;mysql&#x2F;bin</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>$ source 相应的文件 生效配置环境</p>\n</li>\n</ol>\n<h3 id=\"单个用户设置\"><a href=\"#单个用户设置\" class=\"headerlink\" title=\"单个用户设置\"></a>单个用户设置</h3><ol>\n<li><p>cd ~</p>\n</li>\n<li><p>vim ~/.bash_profile （任意一个文件中添加用户级环境变量）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">export PATH&#x3D;&#x2F;opt&#x2F;local&#x2F;bin:&#x2F;opt&#x2F;local&#x2F;sbin:$PATH</span><br></pre></td></tr></table></figure>\n<p>把上述代码添加到~/.bash_profile上。</p>\n</li>\n<li><p>source 相应的文件 生效配置环境</p>\n</li>\n</ol>\n<h3 id=\"查看PATH\"><a href=\"#查看PATH\" class=\"headerlink\" title=\"查看PATH\"></a>查看PATH</h3><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo $PATH</span><br></pre></td></tr></table></figure>","categories":["技术"],"tags":["macOS","Path"]},{"title":"Mac Os系统中的根目录和家(home)目录分别指什么，它们有何关系？","url":"/2020/08/10/Mac-Os%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%92%8C%E5%AE%B6-home-%E7%9B%AE%E5%BD%95%E5%88%86%E5%88%AB%E6%8C%87%E4%BB%80%E4%B9%88%EF%BC%8C%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E5%85%B3%E7%B3%BB%EF%BC%9F/","content":"<h1 id=\"简单总结\"><a href=\"#简单总结\" class=\"headerlink\" title=\"简单总结\"></a><strong>简单总结</strong></h1><h2 id=\"家目录（home）与根目录分别指什么：\"><a href=\"#家目录（home）与根目录分别指什么：\" class=\"headerlink\" title=\"家目录（home）与根目录分别指什么：\"></a><strong>家目录（home）与根目录分别指什么：</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">家目录（home）  &#x3D;  ~  &#x3D;  &#x2F;Users／taigermos  # taigermos 为使用者自定义电脑名称</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">根目录  &#x3D;  &#x2F;  &#x3D;  Macintosh HD 下的目录</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n\n<h2 id=\"家目录（home）与根目录的关系：\"><a href=\"#家目录（home）与根目录的关系：\" class=\"headerlink\" title=\"家目录（home）与根目录的关系：\"></a><strong>家目录（home）与根目录的关系：</strong></h2><p>家目录在根目录下，但是中间还隔着一个Users目录（注意第一个字母是大写的），家目录其实是Users目录下的一个子目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">即： 根目录 --&gt; Users 目录 --&gt; 家目录（home)  # 此处根目录为 Macintosh HD，家目录（home）为 taigermos</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"以下为详细内容\"><a href=\"#以下为详细内容\" class=\"headerlink\" title=\"以下为详细内容\"></a><strong>以下为详细内容</strong></h1><h2 id=\"你打开终端时，默认在home目录中\"><a href=\"#你打开终端时，默认在home目录中\" class=\"headerlink\" title=\"你打开终端时，默认在home目录中\"></a><strong>你打开终端时，默认在home目录中</strong></h2><p>打开终端时，默认就是下面这个界面，也就是默认在home目录中，下面这是我的界面。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/10/r47YlbHwpXoQIst.png\" alt=\"image.png\"></p>\n<h2 id=\"波浪线～等于自定义的电脑名字\"><a href=\"#波浪线～等于自定义的电脑名字\" class=\"headerlink\" title=\"波浪线～等于自定义的电脑名字\"></a><strong>波浪线～等于自定义的电脑名字</strong></h2><p>如图中所说，输入pwd命令，用来查看终端目前所处的文件路径是怎么样的，如果按照刚刚的说法，我输入pwd应该显示～才对啊！</p>\n<p>其实他们两个是相等的。～  =  ／Users／mazhongxin 也就是说，你的home目录，也就是你的家目录的路径是图中标记为2的红框内显示的路径。（我之所以强调是你的home目录，是因为mazhongxin是我的目录名字，每台电脑都不一样，看你怎么起名字了）。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/10/t6aRBGylmJLc4wp.png\" alt=\"image.png\"></p>\n<h2 id=\"家目录其实是Users目录下的一个子目录\"><a href=\"#家目录其实是Users目录下的一个子目录\" class=\"headerlink\" title=\"家目录其实是Users目录下的一个子目录\"></a><strong>家目录其实是Users目录下的一个子目录</strong></h2><p>直接看上图你就发现了，其实home目录（在我的电脑上就是mazhongxin这个目录）</p>\n<p>是在Users目录下的一个子目录，如果你实在看不懂这个路径的话（看不懂应该没有吧），看到下图了没，你打开finder，找到用户这个目录，点击进去，是不是就发现以你电脑名命名的文件夹就在那里。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/10/wZL3zBnOMi9CWdb.png\" alt=\"image.png\"></p>\n<h2 id=\"那么Uers目录的上一级目录又是谁？\"><a href=\"#那么Uers目录的上一级目录又是谁？\" class=\"headerlink\" title=\"那么Uers目录的上一级目录又是谁？\"></a><strong>那么Uers目录的上一级目录又是谁？</strong></h2><p>Users目录的上一级就是根目录啦！根目录是咋表示的呢？就是一个／。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/10/5Ba8Z3XUedAL4NM.png\" alt=\"image.png\"></p>\n<h2 id=\"根目录下面有哪些目录？\"><a href=\"#根目录下面有哪些目录？\" class=\"headerlink\" title=\"根目录下面有哪些目录？\"></a><strong>根目录下面有哪些目录？</strong></h2><p>这样以来，你应该就明白了，家目录在根目录下，但是中间还隔着一个Users目录（注意第一个字母是大写的）。</p>\n","categories":["技术"],"tags":["Mac Os","根目录和家目录"]},{"title":"NumPy 图解教程","url":"/2021/09/28/NumPy-%E5%9B%BE%E8%A7%A3%E6%95%99%E7%A8%8B/","content":"<p>NumPy是Python中用于数据分析、机器学习、科学计算的重要软件包。它极大地简化了向量和矩阵的操作及处理。python的不少数据处理软件包依赖于NumPy作为其基础架构的核心部分（例如scikit-learn、SciPy、pandas和tensorflow）。除了数据切片和数据切块的功能之外，掌握numpy也使得开发者在使用各数据处理库调试和处理复杂用例时更具优势。</p>\n<a id=\"more\"></a>\n\n<p><img data-src=\"https://i.loli.net/2021/09/28/f6caYTnuG2ZqkjC.png\" alt=\"image.png\"></p>\n<p>在本文中，将介绍NumPy的主要用法，以及它如何呈现不同类型的数据（表格，图像，文本等），这些经Numpy处理后的数据将成为机器学习模型的输入。</p>\n<h1 id=\"NumPy中的数组操作\"><a href=\"#NumPy中的数组操作\" class=\"headerlink\" title=\"NumPy中的数组操作\"></a><strong><center><font color=\"#EBBA67\">NumPy中的数组操作</font></center></strong></h1><h2 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a><strong><font color=\"#69ADF5\">创建数组</font></strong></h2><p>我们可以通过将python列表传入np.array()来创建一个NumPy数组（也就是强大的ndarray）。在下面的例子里，创建出的数组如右边所示，通常情况下，我们希望NumPy为我们初始化数组的值，为此NumPy提供了诸如ones()，zeros()和random.random()之类的方法。我们只需传入元素个数即可：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/MfOY6R3thENcQn4.png\" alt=\"image.png\"></p>\n<p>一旦我们创建了数组，我们就可以用其做点有趣的应用了，文摘菌将在下文展开说明。</p>\n<h2 id=\"数组的算术运算\"><a href=\"#数组的算术运算\" class=\"headerlink\" title=\"数组的算术运算\"></a><strong>数组的算术运算</strong></h2><p>让我们创建两个NumPy数组，分别称作data和ones：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/MGHdXpDN6cxPAhF.png\" alt=\"image.png\"></p>\n<p>若要计算两个数组的加法，只需简单地敲入data + ones，就可以实现对应位置上的数据相加的操作（即每行数据进行相加），这种操作比循环读取数组的方法代码实现更加简洁。</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/hmp87NEY2lBoGAO.png\" alt=\"image.png\"></p>\n<p>当然，在此基础上举一反三，也可以实现减法、乘法和除法等操作：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/i8J5qhO3C4DoYnM.png\" alt=\"image.png\"></p>\n<p>许多情况下，我们希望进行数组和单个数值的操作（也称作向量和标量之间的操作）。比如：如果数组表示的是以英里为单位的距离，我们的目标是将其转换为公里数。可以简单的写作data * 1.6：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/p1zG2oStQuU49gk.png\" alt=\"image.png\"></p>\n<p>NumPy通过数组广播（broadcasting）知道这种操作需要和数组的每个元素相乘。</p>\n<h2 id=\"数组的切片操作\"><a href=\"#数组的切片操作\" class=\"headerlink\" title=\"数组的切片操作\"></a><strong><font color=\"#69ADF5\">数组的切片操作</font></strong></h2><p>我们可以像python列表操作那样对NumPy数组进行索引和切片，如下图所示：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/zbc7qE6DCV4QZLe.png\" alt=\"image.png\"></p>\n<h2 id=\"聚合函数\"><a href=\"#聚合函数\" class=\"headerlink\" title=\"聚合函数\"></a><strong>聚合函数</strong></h2><p>NumPy为我们带来的便利还有聚合函数，聚合函数可以将数据进行压缩，统计数组中的一些特征值：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/jDwHSXgWLn1MT9Y.png\" alt=\"image.png\"></p>\n<p>除了min，max和sum等函数，还有mean（均值），prod（数据乘法）计算所有元素的乘积，std（标准差），等等。上面的所有例子都在一个维度上处理向量。除此之外，NumPy之美的一个关键之处是它能够将之前所看到的所有函数应用到任意维度上。</p>\n<h1 id=\"NumPy中的矩阵操作\"><a href=\"#NumPy中的矩阵操作\" class=\"headerlink\" title=\"NumPy中的矩阵操作\"></a><strong><center><font color=\"#EBBA67\">NumPy中的矩阵操作</font></center></strong></h1><h2 id=\"创建矩阵\"><a href=\"#创建矩阵\" class=\"headerlink\" title=\"创建矩阵\"></a><strong>创建矩阵</strong></h2><p>我们可以通过将二维列表传给Numpy来创建矩阵。</p>\n<p>np.array([[1,2],[3,4]])</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/ewJMT1XLrgOR6ln.png\" alt=\"image.png\"></p>\n<p>除此外，也可以使用上文提到的ones()、zeros()和random.random()来创建矩阵，只需传入一个元组来描述矩阵的维度：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/TAxFu7h8mOyH9Y4.png\" alt=\"image.png\"></p>\n<h2 id=\"矩阵的算术运算\"><a href=\"#矩阵的算术运算\" class=\"headerlink\" title=\"矩阵的算术运算\"></a><strong>矩阵的算术运算</strong></h2><p>对于大小相同的两个矩阵，我们可以使用算术运算符（+-*/）将其相加或者相乘。NumPy对这类运算采用对应位置（position-wise）操作处理：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/CwTlMKx2OfrezG9.png\" alt=\"image.png\"></p>\n<p>对于不同大小的矩阵，只有两个矩阵的维度同为1时（例如矩阵只有一列或一行），我们才能进行这些算术运算，在这种情况下，NumPy使用广播规则（broadcast）进行操作处理：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/i8m9JIYOGMkgPjL.png\" alt=\"image.png\"></p>\n<p>与算术运算有很大区别是使用点积的矩阵乘法。NumPy提供了dot()方法，可用于矩阵之间进行点积运算：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/bJuU462EmXFTSYP.png\" alt=\"image.png\"></p>\n<p>上图的底部添加了矩阵尺寸，以强调运算的两个矩阵在列和行必须相等。可以将此操作图解为如下所示：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/g8sK9OSLMRXr4HG.png\" alt=\"image.png\"></p>\n<h2 id=\"矩阵的切片和聚合\"><a href=\"#矩阵的切片和聚合\" class=\"headerlink\" title=\"矩阵的切片和聚合\"></a><strong>矩阵的切片和聚合</strong></h2><p>索引和切片功能在操作矩阵时变得更加有用。可以在不同维度上使用索引操作来对数据进行切片。</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/rkLoIQRMKg2YNSP.png\" alt=\"image.png\"></p>\n<p>我们可以像聚合向量一样聚合矩阵：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/F1EM78zNk3DPpnw.png\" alt=\"image.png\"></p>\n<p>不仅可以聚合矩阵中的所有值，还可以使用axis参数指定行和列的聚合：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/MZsmeidBK9UbqLc.png\" alt=\"image.png\"></p>\n<h2 id=\"矩阵的转置和重构\"><a href=\"#矩阵的转置和重构\" class=\"headerlink\" title=\"矩阵的转置和重构\"></a><strong>矩阵的转置和重构</strong></h2><p>处理矩阵时经常需要对矩阵进行转置操作，常见的情况如计算两个矩阵的点积。NumPy数组的属性T可用于获取矩阵的转置。</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/xI1lmWA7aoJXnKF.png\" alt=\"image.png\"></p>\n<p>在较为复杂的用例中，你可能会发现自己需要改变某个矩阵的维度。这在机器学习应用中很常见，例如模型的输入矩阵形状与数据集不同，可以使用NumPy的reshape()方法。只需将矩阵所需的新维度传入即可。也可以传入-1，NumPy可以根据你的矩阵推断出正确的维度：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/sTlEu42mxtGhpwU.png\" alt=\"image.png\"></p>\n<p>上文中的所有功能都适用于多维数据，其中心数据结构称为ndarray（N维数组）。</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/TLcJrBRMSWkDspu.png\" alt=\"image.png\"></p>\n<p>很多时候，改变维度只需在NumPy函数的参数中添加一个逗号，如下图所示：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/ncPWLiumY7b6spK.png\" alt=\"image.png\"></p>\n<h1 id=\"NumPy中的公式应用示例\"><a href=\"#NumPy中的公式应用示例\" class=\"headerlink\" title=\"NumPy中的公式应用示例\"></a><strong><center><font color=\"#EBBA67\">NumPy中的公式应用示例</font></center></strong></h1><p>NumPy的关键用例是实现适用于矩阵和向量的数学公式。这也Python中常用NumPy的原因。例如，均方误差是监督机器学习模型处理回归问题的核心：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/bdv5XWrV4jpcnFh.png\" alt=\"image.png\"></p>\n<p>在NumPy中可以很容易地实现均方误差：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/oFROWZHms1eV546.png\" alt=\"image.png\"></p>\n<p>这样做的好处是，numpy无需考虑predictions与labels具体包含的值。文摘菌将通过一个示例来逐步执行上面代码行中的四个操作：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/pz6visrRqxcUA9g.png\" alt=\"image.png\"></p>\n<p>预测（predictions）和标签（labels）向量都包含三个值。这意味着n的值为3。在我们执行减法后，我们最终得到如下值：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/QyEFHxGVvPmiJKA.png\" alt=\"image.png\"></p>\n<p>然后我们可以计算向量中各值的平方：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/4Z39AzjomyGtcN2.png\" alt=\"image.png\"></p>\n<p>现在我们对这些值求和：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/oPLA3UrjY96tzS8.png\" alt=\"image.png\"></p>\n<p>最终得到该预测的误差值和模型质量分数。</p>\n<h1 id=\"用NumPy表示日常数据\"><a href=\"#用NumPy表示日常数据\" class=\"headerlink\" title=\"用NumPy表示日常数据\"></a><strong><center><font color=\"#EBBA67\">用NumPy表示日常数据</font></center></strong></h1><p>日常接触到的数据类型，如电子表格，图像，音频……等，如何表示呢？Numpy可以解决这个问题。</p>\n<h2 id=\"表和电子表格\"><a href=\"#表和电子表格\" class=\"headerlink\" title=\"表和电子表格\"></a><strong>表和电子表格</strong></h2><p>电子表格或数据表都是二维矩阵。电子表格中的每个工作表都可以是自己的变量。python中类似的结构是pandas数据帧（dataframe），它实际上使用NumPy来构建的。v</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/WsivpXmKVEMLg5f.png\" alt=\"image.png\"></p>\n<h2 id=\"音频和时间序列\"><a href=\"#音频和时间序列\" class=\"headerlink\" title=\"音频和时间序列\"></a><strong>音频和时间序列</strong></h2><p>音频文件是一维样本数组。每个样本都是代表一小段音频信号的数字。CD质量的音频每秒可能有44,100个采样样本，每个样本是一个-65535到65536之间的整数。这意味着如果你有一个10秒的CD质量的WAVE文件，你可以将它加载到长度为10 * 44,100 = 441,000个样本的NumPy数组中。想要提取音频的第一秒？只需将文件加载到我们称之为audio的NumPy数组中，然后截取audio[:44100]。</p>\n<p>以下是一段音频文件：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/jhirZMbadxGY6pW.png\" alt=\"image.png\"></p>\n<h2 id=\"图像\"><a href=\"#图像\" class=\"headerlink\" title=\"图像\"></a><strong>图像</strong></h2><p>图像是大小为（高度×宽度）的像素矩阵。如果图像是黑白图像（也称为灰度图像），则每个像素可以由单个数字表示（通常在0（黑色）和255（白色）之间）。如果对图像做处理，裁剪图像的左上角10 x 10大小的一块像素区域，用NumPy中的image[:10,:10]就可以实现。</p>\n<p>这是一个图像文件的片段：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/6TIMtsPV2CDU4iE.png\" alt=\"image.png\"></p>\n<p>如果图像是彩色的，则每个像素由三个数字表示 ：红色，绿色和蓝色。在这种情况下，我们需要第三维（因为每个单元格只能包含一个数字）。因此彩色图像由尺寸为(高x宽x 3）的ndarray表示。</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/57Xit1kAbGx2uIK.png\" alt=\"image.png\"></p>\n<h2 id=\"语言\"><a href=\"#语言\" class=\"headerlink\" title=\"语言\"></a><strong>语言</strong></h2><p>如果我们处理文本，情况就会有所不同。用数字表示文本需要两个步骤，构建词汇表（模型知道的所有唯一单词的清单）和嵌入（embedding）。让我们看看用数字表示这个（翻译的）古语引用的步骤：“Have the bards who preceded me left any theme unsung?”</p>\n<p>模型需要先训练大量文本才能用数字表示这位战场诗人的诗句。我们可以让模型处理一个小数据集，并使用这个数据集来构建一个词汇表（71,290个单词）：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/cJ45OCqwHTx3eUL.png\" alt=\"image.png\"></p>\n<p>然后可以将句子划分成一系列“词”token（基于通用规则的单词或单词部分）：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/K72tSJQ1RaIiLru.png\" alt=\"image.png\"></p>\n<p>然后我们用词汇表中的id替换每个单词：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/qXnwfyxHcEkGz3o.png\" alt=\"image.png\"></p>\n<p>这些ID仍然不能为模型提供有价值的信息。因此，在将一系列单词送入模型之前，需要使用嵌入（embedding）来替换token/单词（在本例子中使用50维度的word2vec嵌入)：</p>\n<p><img data-src=\"https://i.loli.net/2021/09/28/9nEuGV1NpfKzlZB.png\" alt=\"image.png\"></p>\n<p>你可以看到此NumPy数组的维度为[embedding_dimension x sequence_length]。</p>\n<p>在实践中，这些数值不一定是这样的，但我以这种方式呈现它是为了视觉上的一致。出于性能原因，深度学习模型倾向于保留批数据大小的第一维（因为如果并行训练多个示例，则可以更快地训练模型）。很明显，这里非常适合使用reshape()。例如，像BERT这样的模型会期望其输入矩阵的形状为：[batch_size，sequence_length，embedding_size]。</p>\n<p>这是一个数字合集，模型可以处理并执行各种有用的操作。我留空了许多行，可以用其他示例填充以供模型训练（或预测）。</p>\n<p>事实证明，在我们的例子中，那位诗人的话语比其他诗人的诗句更加名垂千古。尽管生而为奴，诗人安塔拉（Antarah）的英勇和语言能力使他获得了自由和神话般的地位，他的诗是伊斯兰教以前的阿拉伯半岛《悬诗》的七首诗之一。</p>\n<hr>\n<p>来源丨大数据文摘</p>\n<p>原文链接丨<a href=\"https://jalammar.github.io/visual-numpy/\">https://jalammar.github.io/visual-numpy/</a></p>\n","categories":["技术","python","数据分析","Numpy"],"tags":["Numpy","python","数据分析"]},{"title":"MySQL修改root密码","url":"/2021/11/14/MySQL%E4%BF%AE%E6%94%B9root%E5%AF%86%E7%A0%81/","content":"<p>在 MySQL 中，root 用户拥有很高的权限，因此必须保证 root 用户密码的安全。修改 root 用户密码的方式有很多种，本节将介绍几种常用的修改 root 用户密码的方法。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"使用mysqladmin命令在命令行指定新密码\"><a href=\"#使用mysqladmin命令在命令行指定新密码\" class=\"headerlink\" title=\"使用mysqladmin命令在命令行指定新密码\"></a><strong>使用mysqladmin命令在命令行指定新密码</strong></h1><p>root 用户可以使用 mysqladmin 命令来修改密码，mysqladmin 的语法格式如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mysqladmin -u username -h hostname -p password &quot;newpwd&quot;</span><br></pre></td></tr></table></figure>\n\n<p>语法参数说明如下：</p>\n<ul>\n<li><p>usermame 指需要修改密码的用户名称，在这里指定为 root 用户；</p>\n</li>\n<li><p>hostname 指需要修改密码的用户主机名，该参数可以不写，默认是 localhost；</p>\n</li>\n<li><p>password 为关键字，而不是指旧密码；</p>\n</li>\n<li><p>newpwd 为新设置的密码，必须用双引号括起来。如果使用单引号会引发错误，可能会造成修改后的密码不是你想要的。</p>\n</li>\n</ul>\n<p>执行完上面的语句，root 用户的密码将被修改为“newpwd”。</p>\n<h3 id=\"示例-1\"><a href=\"#示例-1\" class=\"headerlink\" title=\"示例 1\"></a><strong>示例 1</strong></h3><p>下面使用 mysqladmin 将 root 用户的密码修改为“rootpwd”，在 Windows 命令行窗口（cmd）中执行命令和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\leovo&gt;mysqladmin -u root -p password &quot;rootpwd&quot;</span><br><span class=\"line\">Enter password: ****</span><br><span class=\"line\">mysqladmin: [Warning] Using a password on the command line interface can be insecure.</span><br><span class=\"line\">Warning: Since password will be sent to server in plain text, use ssl connection to ensure password safety.</span><br></pre></td></tr></table></figure>\n\n<p>输入 mysqladmin 命令后，按回车键，然后输入 root 用户原来的密码。执行完毕后，密码修改成功，root 用户登录时将使用新的密码。</p>\n<p>运行结果中，输入密码后会提示在命令行界面上使用密码可能不安全的警告信息，因为在命令行输入密码时，MySQL 服务器就会提示这些安全警告信息。</p>\n<p>下面使用修改后的“rootpwd”密码登录 root 用户，SQL 语句和运行结果如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">C:\\Users\\leovo&gt;mysql -uroot -p</span><br><span class=\"line\">Enter password: *******</span><br><span class=\"line\">Welcome to the MySQL monitor.  Commands end with ; or \\g.</span><br><span class=\"line\">Your MySQL connection id is 23</span><br><span class=\"line\">Server version: 5.7.29-log MySQL Community Server (GPL)</span><br><span class=\"line\"></span><br><span class=\"line\">Copyright (c) 2000, 2020, Oracle and&#x2F;or its affiliates. All rights reserved.</span><br><span class=\"line\"></span><br><span class=\"line\">Oracle is a registered trademark of Oracle Corporation and&#x2F;or its</span><br><span class=\"line\">affiliates. Other names may be trademarks of their respective</span><br><span class=\"line\">owners.</span><br><span class=\"line\"></span><br><span class=\"line\">Type &#39;help;&#39; or &#39;\\h&#39; for help. Type &#39;\\c&#39; to clear the current input statement.</span><br></pre></td></tr></table></figure>\n\n<p>结果显示，root 用户登录成功，所以使用 mysqladmin 命令修改 root 用户密码成功。</p>\n","categories":["技术","数据库","MySQL"],"tags":["MySQL"]},{"title":"Pandas 必会的方法汇总","url":"/2021/09/28/Pandas-%E5%BF%85%E4%BC%9A%E7%9A%84%E6%96%B9%E6%B3%95%E6%B1%87%E6%80%BB/","content":"<p>用Python做数据分析光是掌握numpy和matplotlib可不够，Pandas是必须要掌握的一个重点，numpy虽然能够帮我们处理处理数值型数据，但是这还不够，很多时候，我们的数据除了数值之外，还有字符串，还有时间序列等，比如：我们通过爬虫获取到了存储在数据库中的数据。</p>\n<a id=\"more\"></a>\n\n<p><font color=\"#EB3007\">今天来分享一些Pandas必会的用法，让你的数据分析水平更上一层楼。</font></p>\n<h1 id=\"一、Pandas两大数据结构的创建\"><a href=\"#一、Pandas两大数据结构的创建\" class=\"headerlink\" title=\"一、Pandas两大数据结构的创建\"></a>一、<strong>Pandas两大数据结构的创建</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">pd.Series(对象,index=[ ])</td>\n<td align=\"left\">创建Series。对象可以是列表\\ndarray、字典以及DataFrame中的某一行或某一列</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">pd.DataFrame(data,columns = [ ],index = [ ])</td>\n<td align=\"left\">创建DataFrame。columns和index为指定的列、行索引，并按照顺序排列</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：用pandas创建数据表：</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df &#x3D; pd.DataFrame(&#123;&quot;id&quot;:[1001,1002,1003,1004,1005,1006], </span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;date&quot;:pd.date_range(&#39;20130102&#39;, periods&#x3D;6),</span><br><span class=\"line\"></span><br><span class=\"line\">  &quot;city&quot;:[&#39;Beijing &#39;, &#39;SH&#39;, &#39; guangzhou &#39;, &#39;Shenzhen&#39;, &#39;shanghai&#39;, &#39;BEIJING &#39;],</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;age&quot;:[23,44,54,32,34,32],</span><br><span class=\"line\"></span><br><span class=\"line\"> &quot;category&quot;:[&#39;100-A&#39;,&#39;100-B&#39;,&#39;110-A&#39;,&#39;110-C&#39;,&#39;210-A&#39;,&#39;130-F&#39;],</span><br><span class=\"line\"></span><br><span class=\"line\">  &quot;price&quot;:[1200,np.nan,2133,5433,np.nan,4432]&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  columns &#x3D;[&#39;id&#39;,&#39;date&#39;,&#39;city&#39;,&#39;category&#39;,&#39;age&#39;,&#39;price&#39;])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"二、DataFrame常见方法\"><a href=\"#二、DataFrame常见方法\" class=\"headerlink\" title=\"二、DataFrame常见方法\"></a>二、<strong>DataFrame常见方法</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">df.head()</td>\n<td align=\"left\">查询数据的前五行</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">df.tail()</td>\n<td align=\"left\">查询数据的末尾5行</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">pandas.qcut()</td>\n<td align=\"left\">基于秩或基于样本分位数将变量离散化为等大小桶</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">pandas.cut()</td>\n<td align=\"left\">基于分位数的离散化函数</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">pandas.date_range()</td>\n<td align=\"left\">返回一个时间索引</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">df.apply()</td>\n<td align=\"left\">沿相应轴应用函数</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">Series.value_counts()</td>\n<td align=\"left\">返回不同数据的计数值</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">df.reset_index()</td>\n<td align=\"left\">重新设置index，参数drop = True时会丢弃原来的索引，设置新的从0开始的索引，常与groupby()一起用</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：重新索引</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_inner.reset_index()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"三、数据索引\"><a href=\"#三、数据索引\" class=\"headerlink\" title=\"三、数据索引\"></a>三、<strong>数据索引</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">.values</td>\n<td align=\"left\">将DataFrame转换为ndarray二维数组</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">.append(idx)</td>\n<td align=\"left\">连接另一个Index对象，产生新的Index对象</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">.insert(loc,e)</td>\n<td align=\"left\">在loc位置增加一个元素</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">.delete(loc)</td>\n<td align=\"left\">删除loc位置处的元素</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">.union(idx)</td>\n<td align=\"left\">计算并集</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">.intersection(idx)</td>\n<td align=\"left\">计算交集</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">.diff(idx)</td>\n<td align=\"left\">计算差集，产生新的Index对象</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">.reindex(index, columns ,fill_value, method, limit, copy )</td>\n<td align=\"left\">改变、重排Series和DataFrame索引，会创建一个新对象，如果某个索引值当前不存在，就引入缺失值。</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">.drop()</td>\n<td align=\"left\">删除Series和DataFrame指定行或列索引。</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">.loc[行标签，列标签]</td>\n<td align=\"left\">通过标签查询指定的数据，第一个值为行标签，第二值为列标签。</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">df.iloc[行位置，列位置]</td>\n<td align=\"left\">通过默认生成的数字索引查询指定的数据。</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：按索引提取单行的数值</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_inner.loc[3]</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"四、DataFrame选取和重新组合数据的方法\"><a href=\"#四、DataFrame选取和重新组合数据的方法\" class=\"headerlink\" title=\"四、DataFrame选取和重新组合数据的方法\"></a>四、<strong>DataFrame选取和重新组合数据的方法</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">df[val]</td>\n<td align=\"left\">从DataFrame选取单列或一组列；在特殊情况下比较便利：布尔型数组（过滤行）、切片（行切片）、或布尔型DataFrame（根据条件设置值）</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">df.loc[val]</td>\n<td align=\"left\">通过标签，选取DataFrame的单个行或一组行</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">df.loc[：,val]</td>\n<td align=\"left\">通过标签，选取单列或列子集</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">df.1oc[val1,val2]</td>\n<td align=\"left\">通过标签，同时选取行和列</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">df.iloc[where]</td>\n<td align=\"left\">通过整数位置，从DataFrame选取单个行或行子集</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">df.iloc[where_i,where_j]</td>\n<td align=\"left\">通过整数位置，同时选取行和列</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">df.at[1abel_i,1abel_j]</td>\n<td align=\"left\">通过行和列标签，选取单一的标量</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">df.iat[i,j]</td>\n<td align=\"left\">通过行和列的位置（整数），选取单一的标量</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">reindex</td>\n<td align=\"left\">通过标签选取行或列</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">get_value</td>\n<td align=\"left\">通过行和列标签选取单一值</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">set_value</td>\n<td align=\"left\">通过行和列标签选取单一值</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：使用iloc按位置区域提取数据</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_inner.iloc[:3,:2] #冒号前后的数字不再是索引的标签名称，而是数据所在的位置，从0开始，前三行，前两列。</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"五、排序\"><a href=\"#五、排序\" class=\"headerlink\" title=\"五、排序\"></a>五、<strong>排序</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">函数</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">.sort_index(axis=0, ascending=True)</td>\n<td align=\"left\">根据指定轴索引的值进行排序</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">Series.sort_values(axis=0, ascending=True)</td>\n<td align=\"left\">只能根据0轴的值排序。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">DataFrame.sort_values(by, axis=0, ascending=True)</td>\n<td align=\"left\">参数by为axis轴上的某个索引或索引列表。</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：按照索引列排序</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df_inner.sort_index()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"六、相关分析和统计分析\"><a href=\"#六、相关分析和统计分析\" class=\"headerlink\" title=\"六、相关分析和统计分析\"></a>六、<strong>相关分析和统计分析</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">.idxmin()</td>\n<td align=\"left\">计算数据最小值所在位置的索引（自定义索引）</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">.idxmax()</td>\n<td align=\"left\">计算数据最大值所在位置的索引（自定义索引）</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">.argmin()</td>\n<td align=\"left\">计算数据最小值所在位置的索引位置（自动索引）</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">.argmax()</td>\n<td align=\"left\">计算数据最大值所在位置的索引位置（自动索引）</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">.describe()</td>\n<td align=\"left\">针对各列的多个统计汇总，用统计学指标快速描述数据的概要</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">.sum()</td>\n<td align=\"left\">计算各列数据的和</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">.count()</td>\n<td align=\"left\">非NaN值的数量</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">.mean( )</td>\n<td align=\"left\">计算数据的算术平均值</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">.median()</td>\n<td align=\"left\">计算算术中位数</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">.var()</td>\n<td align=\"left\">计算数据的方差</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">.std()</td>\n<td align=\"left\">计算数据的标准差</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">.corr()</td>\n<td align=\"left\">计算相关系数矩阵</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">.cov()</td>\n<td align=\"left\">计算协方差矩阵</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">.corrwith()</td>\n<td align=\"left\">利用DataFrame的corrwith方法，可以计算其列或行跟另一个Series或DataFrame之间的相关系数。</td>\n</tr>\n<tr>\n<td align=\"left\">15</td>\n<td align=\"left\">.min()</td>\n<td align=\"left\">计算数据的最小值</td>\n</tr>\n<tr>\n<td align=\"left\">16</td>\n<td align=\"left\">.max()</td>\n<td align=\"left\">计算数据的最大值</td>\n</tr>\n<tr>\n<td align=\"left\">17</td>\n<td align=\"left\">.diff()</td>\n<td align=\"left\">计算一阶差分，对时间序列很有效</td>\n</tr>\n<tr>\n<td align=\"left\">18</td>\n<td align=\"left\">.mode()</td>\n<td align=\"left\">计算众数，返回频数最高的那（几）个</td>\n</tr>\n<tr>\n<td align=\"left\">19</td>\n<td align=\"left\">.mean()</td>\n<td align=\"left\">计算均值</td>\n</tr>\n<tr>\n<td align=\"left\">20</td>\n<td align=\"left\">.quantile()</td>\n<td align=\"left\">计算分位数（0到1）</td>\n</tr>\n<tr>\n<td align=\"left\">21</td>\n<td align=\"left\">.isin()</td>\n<td align=\"left\">用于判断矢量化集合的成员资格，可用于过滤Series中或DataFrame列中数据的子集</td>\n</tr>\n<tr>\n<td align=\"left\">22</td>\n<td align=\"left\">.unique()</td>\n<td align=\"left\">返回一个Series中的唯一值组成的数组。</td>\n</tr>\n<tr>\n<td align=\"left\">23</td>\n<td align=\"left\">.value_counts()</td>\n<td align=\"left\">计算一个Series中各值出现的频率。</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：判断city列的值是否为北京</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">df_inner[&#39;city&#39;].isin([&#39;beijing&#39;])</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"七、分组的方法\"><a href=\"#七、分组的方法\" class=\"headerlink\" title=\"七、分组的方法\"></a>七、<strong>分组的方法</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">DataFrame.groupby()</td>\n<td align=\"left\">分组函数</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">pandas.cut()</td>\n<td align=\"left\">根据数据分析对象的特征，按照一定的数值指标，把数据分析对象划分为不同的区间部分来进行研究，以揭示其内在的联系和规律性。</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：.groupby用法</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">group_by_name&#x3D;salaries.groupby(&#39;name&#39;) </span><br><span class=\"line\">print(type(group_by_name))</span><br></pre></td></tr></table></figure>\n\n<p>输出结果为：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;class &#39;pandas.core.groupby.DataFrameGroupBy&#39;&gt;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"八、读写文本格式数据的方法\"><a href=\"#八、读写文本格式数据的方法\" class=\"headerlink\" title=\"八、读写文本格式数据的方法\"></a>八、<strong>读写文本格式数据的方法</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">read_csv</td>\n<td align=\"left\">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为逗号</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">read_table</td>\n<td align=\"left\">从文件、URL、文件型对象中加载带分隔符的数据。默认分隔符为制表符（t）</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">read_ fwf</td>\n<td align=\"left\">读取定宽列格式数据（也就是说，没有分隔符）</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">read_clipboard</td>\n<td align=\"left\">读取剪贴板中的数据，可以看做read_table的剪贴板版。再将网页转换为表格时很有用</td>\n</tr>\n<tr>\n<td align=\"left\">5</td>\n<td align=\"left\">read_excel</td>\n<td align=\"left\">从ExcelXLS或XLSXfile 读取表格数据</td>\n</tr>\n<tr>\n<td align=\"left\">6</td>\n<td align=\"left\">read_hdf</td>\n<td align=\"left\">读取pandas写的HDF5文件</td>\n</tr>\n<tr>\n<td align=\"left\">7</td>\n<td align=\"left\">read_html</td>\n<td align=\"left\">读取HTML文档中的所有表格</td>\n</tr>\n<tr>\n<td align=\"left\">8</td>\n<td align=\"left\">read_json</td>\n<td align=\"left\">读取JSON字符串中的数据</td>\n</tr>\n<tr>\n<td align=\"left\">9</td>\n<td align=\"left\">read_msgpack</td>\n<td align=\"left\">二进制格式编码的pandas数据</td>\n</tr>\n<tr>\n<td align=\"left\">10</td>\n<td align=\"left\">read_pickle</td>\n<td align=\"left\">读取Python pickle格式中存储的任意对象</td>\n</tr>\n<tr>\n<td align=\"left\">11</td>\n<td align=\"left\">read_sas</td>\n<td align=\"left\">读取存储于SAS系统自定义存储格式的SAS数据集</td>\n</tr>\n<tr>\n<td align=\"left\">12</td>\n<td align=\"left\">read_sql</td>\n<td align=\"left\">读取SQL 查询结果为pandas的DataFrame</td>\n</tr>\n<tr>\n<td align=\"left\">13</td>\n<td align=\"left\">read_stata</td>\n<td align=\"left\">读取Stata文件格式的数据集</td>\n</tr>\n<tr>\n<td align=\"left\">14</td>\n<td align=\"left\">read_feather</td>\n<td align=\"left\">读取 Feather二进制文件格式</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：导入CSV或者xlsx文件</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df &#x3D; pd.DataFrame(pd.read_csv(&#39;name.csv&#39;,header&#x3D;1))</span><br><span class=\"line\">df &#x3D; pd.DataFrame(pd.read_excel(&#39;name.xlsx&#39;))</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"九、处理缺失数据\"><a href=\"#九、处理缺失数据\" class=\"headerlink\" title=\"九、处理缺失数据\"></a>九、<strong>处理缺失数据</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">.fillna(value,method,limit,inplace)</td>\n<td align=\"left\">填充缺失值</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">.dropna()</td>\n<td align=\"left\">删除缺失数据</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">.info()</td>\n<td align=\"left\">查看数据的信息，包括每个字段的名称、非空数量、字段的数据类型</td>\n</tr>\n<tr>\n<td align=\"left\">4</td>\n<td align=\"left\">.isnull()</td>\n<td align=\"left\">返回一个同样长度的值为布尔型的对象（Series或DataFrame），表示哪些值是缺失的</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：查看数据表基本信息（维度、列名称、数据格式等等）</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df.info()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"十、数据转换\"><a href=\"#十、数据转换\" class=\"headerlink\" title=\"十、数据转换\"></a>十、<strong>数据转换</strong></h1><table>\n<thead>\n<tr>\n<th align=\"left\">序号</th>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">1</td>\n<td align=\"left\">.replace(old, new)</td>\n<td align=\"left\">用新的数据替换老的数据，如果希望一次性替换多个值，old和new可以是列表。默认会返回一个新的对象，传入inplace=True可以对现有对象进行就地修改。</td>\n</tr>\n<tr>\n<td align=\"left\">2</td>\n<td align=\"left\">.duplicated()</td>\n<td align=\"left\">判断各行是否是重复行，返回一个布尔型Series。</td>\n</tr>\n<tr>\n<td align=\"left\">3</td>\n<td align=\"left\">.drop_duplicates()</td>\n<td align=\"left\">删除重复行，返回删除后的DataFrame对象。</td>\n</tr>\n</tbody></table>\n<p><font color=\"#EB3007\">举例：删除后出现的重复值：</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">df[&#39;city&#39;].drop_duplicates()</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"结语\"><a href=\"#结语\" class=\"headerlink\" title=\"结语\"></a><strong>结语</strong></h1><p>文章中总结的是都是一些Pandas常用的方法，至于一些基础的概念还需要你学到Pandas的时候去理解，例如Series是什么？DataFrame是什么？如果你已经清楚了Pandas的这些基础东西之后，搭配上文章中的这些方法，那你用Pandas去做数据处理和分析必然会游刃有余。</p>\n","categories":["技术","python","数据分析","Pandas"],"tags":["python","数据分析","Pandas"]},{"title":"Scrapy常用命令","url":"/2021/07/27/Scrapy%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/","content":"<h2 id=\"1-scrapy-startproject-myproject\"><a href=\"#1-scrapy-startproject-myproject\" class=\"headerlink\" title=\"1. scrapy startproject myproject\"></a><strong>1. scrapy startproject myproject</strong></h2><p><strong>这条命令用来创建一个Scrapy爬虫项目，myproject代表项目名称。</strong></p>\n<a id=\"more\"></a>\n\n<h2 id=\"2-scrapy-genspider-mydomain-mydomain-com\"><a href=\"#2-scrapy-genspider-mydomain-mydomain-com\" class=\"headerlink\" title=\"2. scrapy genspider mydomain mydomain.com\"></a><strong>2. scrapy genspider mydomain mydomain.com</strong></h2><p><strong>这条命令在项目中使用基础spider模板生成一个爬虫文件，所以此命令需要在项目目录中运行。</strong></p>\n<h2 id=\"3-scrapy-crawl-myspider\"><a href=\"#3-scrapy-crawl-myspider\" class=\"headerlink\" title=\"3. scrapy crawl myspider\"></a><strong>3. scrapy crawl myspider</strong></h2><p><strong>在项目中启动爬虫命令，myspider代表爬虫名称。</strong></p>\n<h2 id=\"4-scrapy-shell-url\"><a href=\"#4-scrapy-shell-url\" class=\"headerlink\" title=\"4. scrapy shell  [url]\"></a><strong>4. scrapy shell  [url]</strong></h2><p><strong>全局命令。以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell。这个命令经常用来在交互模式下检查XPath语法提取数据是否正确。</strong></p>\n<h2 id=\"5-scrapy-view-url\"><a href=\"#5-scrapy-view-url\" class=\"headerlink\" title=\"5. scrapy view [url]\"></a><strong>5. scrapy view [url]</strong></h2><p><strong>全局命令。在浏览器中打开给定的URL，并以Scrapy spider获取到的形式展现。</strong></p>\n<h2 id=\"6-scrapy-list\"><a href=\"#6-scrapy-list\" class=\"headerlink\" title=\"6. scrapy list\"></a><strong>6. scrapy list</strong></h2><p><strong>这条命令需要在项目中运行，它会列出当前项目中所有可用的spider（每行输出一个spider）。</strong></p>\n<h2 id=\"7-scrapy-parse-options\"><a href=\"#7-scrapy-parse-options\" class=\"headerlink\" title=\"7. scrapy parse  [options]\"></a><strong>7. scrapy parse <url> [options]</strong></h2><p><strong>这条命令需要在项目中运行，它获取给定的URL并使用相应的spider分析处理。如果我们提供–callback选项，则使用spider的对应方法处理，否则使用parse解析。这条命令也可以帮助我们检查解析函数是否正确。</strong></p>\n","categories":["技术","网络爬虫"],"tags":["网络爬虫","Scrapy"]},{"title":"Terminal-常用终端命令","url":"/2020/07/29/Terminal-%E5%B8%B8%E7%94%A8%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/","content":"<h1 id=\"初识Command-Line\"><a href=\"#初识Command-Line\" class=\"headerlink\" title=\"初识Command Line\"></a><strong>初识Command Line</strong></h1><ul>\n<li><p>许多命令会花费一些时间来执行，然而这中间不会给出任何提示或者进度条。一般结束后会出现一个用户名$的标记。如果没有出现，那么说明最后一条命令正在执行。</p>\n<a id=\"more\"></a>\n</li>\n<li><p>一条命令包括 Command Name、Options、Arguments、Extras 四个部分，后三个部分是可选的。</p>\n<p>  Options 部分用 - 作为前导符。许多命令的 Options 部分只包含单个字母，这时可以合并。例如，ls -lA 和 ls -l -A 是等效的。</p>\n<p>  Arguments 部分用来细化这个命令或指定这个命令具体的实施对象，</p>\n<p>  Extras 部分则用来进一步实现其他功能。</p>\n</li>\n<li><p>例如：下列命令包含前三个部分，用于强行删除 Junk.app 这个程序。</p>\n<p>  $ rm -R /Applications/Junk.app</p>\n</li>\n<li><p>如果你输入了错误的命令，系统会返回一些错误信息。但是系统却不会阻止你做任何事（例如删除整个用户文件夹）。</p>\n</li>\n</ul>\n<h1 id=\"文件目录\"><a href=\"#文件目录\" class=\"headerlink\" title=\"文件目录\"></a><strong>文件目录</strong></h1><p>首先要清楚几个文件目录：</p>\n<p><code>&quot; / &quot;</code>  ：根目录</p>\n<p><code>&quot; ~ &quot;</code> ：用户主目录的缩写。例如当前用户为taigermos，那么” ~ “展开来就是：/Users/taigermos</p>\n<p><code>&quot; . &quot;</code>  ：当前目录</p>\n<p><code>&quot; .. &quot;</code>   ：父目录（上一级的目录）</p>\n<p>可参考：<a href=\"https://taigermos.github.io/2020/08/10/Mac-Os%E7%B3%BB%E7%BB%9F%E4%B8%AD%E7%9A%84%E6%A0%B9%E7%9B%AE%E5%BD%95%E5%92%8C%E5%AE%B6-home-%E7%9B%AE%E5%BD%95%E5%88%86%E5%88%AB%E6%8C%87%E4%BB%80%E4%B9%88%EF%BC%8C%E5%AE%83%E4%BB%AC%E6%9C%89%E4%BD%95%E5%85%B3%E7%B3%BB%EF%BC%9F/\">Mac Os系统中的根目录和家(home)目录分别指什么，它们有何关系？</a></p>\n<h1 id=\"文件定位\"><a href=\"#文件定位\" class=\"headerlink\" title=\"文件定位\"></a><strong>文件定位</strong></h1><h2 id=\"进入目录：cd（change-directory-的缩写）\"><a href=\"#进入目录：cd（change-directory-的缩写）\" class=\"headerlink\" title=\"进入目录：cd（change directory 的缩写）\"></a><strong>进入目录：cd（change directory 的缩写）</strong></h2><p><strong>Mac：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 进入到某个文件目录中</span><br><span class=\"line\">$ cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回使用者的根目录</span><br><span class=\"line\">$ cd &#x2F;</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回使用者的 home 目录</span><br><span class=\"line\">$ cd ~　</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回上一级目录</span><br><span class=\"line\">$ cd ..</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回上一个访问的目录</span><br><span class=\"line\">$ cd -</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到 &#x2F;tmp 目录（绝对路径）</span><br><span class=\"line\">$ cd &#x2F;tmp</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到 my_project 目录（相对路径）</span><br><span class=\"line\">$ cd my_project</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到使用者的 home 目录中的 project 里的 namecards 目录</span><br><span class=\"line\"># 这个 &quot;~&quot; 符号表示 home 目录</span><br><span class=\"line\">$ cd ~&#x2F;project&#x2F;namecards&#x2F;</span><br></pre></td></tr></table></figure>\n\n<p><strong>Windows：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 进入到某个文件目录中</span><br><span class=\"line\">$ cd</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回当前所在盘符的根目录</span><br><span class=\"line\">$ cd \\  # 也可以用Mac中的&quot; &#x2F; &quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回使用者的 home 目录</span><br><span class=\"line\">$ cd ~　</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回上一级目录</span><br><span class=\"line\">$ cd ..</span><br><span class=\"line\"></span><br><span class=\"line\"># 返回上一个访问的目录</span><br><span class=\"line\">$ cd -</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到 D 盘的 5xruby 目录（绝对路径）</span><br><span class=\"line\">C:\\&gt; cd D:\\5xruby</span><br><span class=\"line\"></span><br><span class=\"line\"># 切换到 5xruby 目录（相对路径）</span><br><span class=\"line\">D:\\&gt; cd 5xruby</span><br></pre></td></tr></table></figure>\n\n<p>cd就是change directory，变换当前的目录，而这个用法就与Windows下相同，cd空一格+文件夹名称。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/11/qufVzyT2sga8Rni.png\" alt=\"image.png\"></p>\n<ul>\n<li><h3 id=\"cd路径遇到空白\"><a href=\"#cd路径遇到空白\" class=\"headerlink\" title=\"cd路径遇到空白\"></a><strong>cd路径遇到空白</strong></h3></li>\n</ul>\n<p>当目录有空白或特殊符号([]，!，$，&amp;，*，;，|，)时，得用\\来将它格开。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/11/ZF1dTGyW2p5oMHg.png\" alt=\"image.png\"></p>\n<ul>\n<li><h3 id=\"cd绝对路径与相对路径\"><a href=\"#cd绝对路径与相对路径\" class=\"headerlink\" title=\"cd绝对路径与相对路径\"></a><strong>cd绝对路径与相对路径</strong></h3></li>\n</ul>\n<p>在路径的部分，除了可使用绝对外，可以用~，来表示当前的家目录（用户文件夹），就不用再打/Users/XXX/。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/11/1fKu7zHGkQ9PRYo.png\" alt=\"image.png\"></p>\n<h2 id=\"显示当前目录的完整路径：pwd（Print-Working-Directory-的缩写）\"><a href=\"#显示当前目录的完整路径：pwd（Print-Working-Directory-的缩写）\" class=\"headerlink\" title=\"显示当前目录的完整路径：pwd（Print Working Directory 的缩写）\"></a><strong>显示当前目录的完整路径：pwd（Print Working Directory 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 显示当前目录的完整路径</span><br><span class=\"line\"></span><br><span class=\"line\">$ pwd</span><br></pre></td></tr></table></figure>\n\n<p>pwd就是print working directory，显示当前目录的完整路径。</p>\n<p><img data-src=\"https://i.loli.net/2020/08/11/ZSxnJDEzKOe4oYG.png\" alt=\"image.png\"></p>\n<h2 id=\"查找文件夹-文件：find\"><a href=\"#查找文件夹-文件：find\" class=\"headerlink\" title=\"查找文件夹/文件：find\"></a><strong>查找文件夹/文件：find</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在当前目录下，找寻文件名称为 gtwang.txt 的文件</span><br><span class=\"line\">$ find . -name gtwang.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 在家目录（home）底下，找寻文件名称为 gtwang.txt 的文件</span><br><span class=\"line\">$ find ~ -name gtwang.txt</span><br><span class=\"line\">$ find &#x2F;Users&#x2F;taigermos -name gtwang.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 在家目录（home）下，不区分英文大小写，找寻文件名称为 gtwang.txt 的文件</span><br><span class=\"line\">$ find &#x2F;Users&#x2F;taigermos -iname gtwang.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 在家目录（home）下，指定只要搜寻「文件」名称含有&quot; .log &quot;的文件</span><br><span class=\"line\">$ find &#x2F;Users&#x2F;taigermos -iname &#39;*.log&#39; -type f</span><br><span class=\"line\"></span><br><span class=\"line\"># 在家目录（home）下，指定只要搜寻「文件夹目录」名称含有&quot; apache2 &quot;的文件夹目录</span><br><span class=\"line\">$ find &#x2F;Users&#x2F;taigermos -iname &#39;apache2&#39; -type d</span><br></pre></td></tr></table></figure>\n\n<p> <strong>补充说明：可用的 –type 参数值如下</strong></p>\n<p>b      block (buffered) special</p>\n<p>c      character (unbuffered) special</p>\n<p>d      directory ( 一般文件夹目录 )</p>\n<p>p      named pipe (FIFO)</p>\n<p>f      regular file ( 一般文件 )</p>\n<p>l      symbolic link</p>\n<p>s      socket</p>\n<p>D      door (Solaris)</p>\n<h1 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a><strong>文件操作</strong></h1><h2 id=\"查看当前目录下的文件夹-文件：ls（list-的缩写）\"><a href=\"#查看当前目录下的文件夹-文件：ls（list-的缩写）\" class=\"headerlink\" title=\"查看当前目录下的文件夹/文件：ls（list 的缩写）\"></a><strong>查看当前目录下的文件夹/文件：ls（list 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看当前目录下的文件夹&#x2F;文件</span><br><span class=\"line\">$ ls</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前目录下的文件夹&#x2F;文件，包括隐藏文件</span><br><span class=\"line\">$ ls -a</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看当前目录下的文件夹&#x2F;文件，显示文件夹&#x2F;文件的详细信息</span><br><span class=\"line\">$ ls -l</span><br><span class=\"line\"></span><br><span class=\"line\"># 两者一起</span><br><span class=\"line\">$ ls -al</span><br></pre></td></tr></table></figure>\n\n<p>ls就是list directory contents，显示当前目录下的所有內容，就像Windows中的dir，而这一个ls后面也有相关的参数可用，可打man ls來查看，当看完再按Q键即可跳出。</p>\n<p>参数：-l 详细信息，-a 包括隐藏文件，-al 表示两者一起，a 是指连小数点开头的文件（例如.gitignore）也会显示，l 则是完整文件的权限、拥有者以及建立、修改时间的详细信息</p>\n<p><img data-src=\"https://i.loli.net/2020/08/11/n1PtcNdbDrQFsyC.png\" alt=\"image.png\"></p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls [选项] [目录或文件名]</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-a：–all的缩写，显示所有的文件，包括隐藏文件(以.开头的文件)（常用）</p>\n</li>\n<li><p>-A：–almost-all的缩写，显示所有的文件，包括隐藏文件，但不包括表示当前目录.和上级目录..这两个文件</p>\n</li>\n<li><p>-c：和-lt一起使用：显示列表并且以ctime(文件状态最后改变时间)排序。和-l一起使用：显示ctime并且以文件名排序。其他情况，以ctime排序</p>\n</li>\n<li><p>-d：–directory的缩写，仅列出目录本身，而不是列出目录里的内容列表</p>\n</li>\n<li><p>-f：直接列出结果，而不进行排序(ls默认会以文件名排序)</p>\n</li>\n<li><p>–color[=WHEN]：是否根据文件类型显示颜色，WHEN可以为never、always或者auto</p>\n</li>\n<li><p>–full-time：以完整的实际模式显示(包含年月日时分)，类似与ls -l –time-style=full-iso，</p>\n</li>\n<li><p>-g：列表显示结果，和-l类似，但是不显示文件所属者。</p>\n</li>\n<li><p>-h：将文件内容大小以GB、KB等易读的方式显示</p>\n</li>\n<li><p>-i：结合-l参数，列出每个文件的inode</p>\n</li>\n<li><p>-l：列出长数据串，显示出文件的属性与权限等数据信息(常用)</p>\n</li>\n<li><p>-n：和-l类似，只是显示的所属用户和组不是名称而是对应的id</p>\n</li>\n<li><p>-r：–reverse，将排序结果以倒序方式显示</p>\n</li>\n<li><p>-S：以文件大小排序</p>\n</li>\n<li><p>-t：以修改时间排序</p>\n</li>\n<li><p>–help：显示帮助信息</p>\n</li>\n</ul>\n<h2 id=\"新增文件夹：mkdir（make-directory-的缩写）\"><a href=\"#新增文件夹：mkdir（make-directory-的缩写）\" class=\"headerlink\" title=\"新增文件夹：mkdir（make directory 的缩写）\"></a><strong>新增文件夹：mkdir（make directory 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 新增一个名为 test 的文件夹（单个）</span><br><span class=\"line\">$ mkdir test</span><br><span class=\"line\"></span><br><span class=\"line\"># 新增三个分别名为 a1、b2、c3 的文件夹（多个）</span><br><span class=\"line\">$ mkdir a1 b2 c3</span><br><span class=\"line\"></span><br><span class=\"line\"># 递归新增目录</span><br><span class=\"line\">$ mkdir -p &#x2F;cs&#x2F;sc&#x2F;a</span><br></pre></td></tr></table></figure>\n<p>mdir就是make diretory，就跟新增一個文件夹意思是一样的。</p>\n<p>如果要创建的目录已经存在，则提示已存在，而不会继续创建目录，mkdir命令还可以同时创建多个目录。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir [选项] [目录名]</span><br></pre></td></tr></table></figure>\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-m：对新建目录设置存取权限，没有-m默认权限755</p>\n</li>\n<li><p>-p：可以建多个目录</p>\n</li>\n</ul>\n<h2 id=\"新增文件-改变已有文件的时间戳属性：touch\"><a href=\"#新增文件-改变已有文件的时间戳属性：touch\" class=\"headerlink\" title=\"新增文件/改变已有文件的时间戳属性：touch\"></a><strong>新增文件/改变已有文件的时间戳属性：touch</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 在当前目录下创建一个名为text的.txt文件（单个）</span><br><span class=\"line\">$ touch text.txt</span><br><span class=\"line\"></span><br><span class=\"line\"># 在当前目录下同时创建两个.txt文件（多个）</span><br><span class=\"line\">$ touch text1.txt text2.txt</span><br></pre></td></tr></table></figure>\n\n<p>touch可以直接创建不同格式的文件，以及修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch [-acfm][-d&lt;日期时间&gt;][-r&lt;参考文件或目录&gt;] [-t&lt;日期时间&gt;][--help][--version][文件或目录…]</span><br></pre></td></tr></table></figure>\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-a： 改变档案的读取时间记录。</p>\n</li>\n<li><p>-m： 改变档案的修改时间记录。</p>\n</li>\n<li><p>-c：假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。</p>\n</li>\n<li><p>-f：不使用，是为了与其他 unix 系统的相容性而保留。</p>\n</li>\n<li><p>-r：使用参考档的时间记录，与 –file 的效果一样。</p>\n</li>\n<li><p>-d：设定时间与日期，可以使用各种不同的格式。</p>\n</li>\n<li><p>-t：设定档案的时间记录，格式与 date 指令相同。</p>\n</li>\n</ul>\n<h2 id=\"移动文件-文件夹名或改变名称：mv（move-的缩写）\"><a href=\"#移动文件-文件夹名或改变名称：mv（move-的缩写）\" class=\"headerlink\" title=\"移动文件/文件夹名或改变名称：mv（move 的缩写）\"></a><strong>移动文件/文件夹名或改变名称：mv（move 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 移动当前目录中的 hello.txt 到 test 这个目录</span><br><span class=\"line\">$ mv hello.txt .&#x2F;test</span><br><span class=\"line\"></span><br><span class=\"line\"># 再从 test 目录移动回來当前目录</span><br><span class=\"line\">$ mv .&#x2F;text&#x2F;hello.txt .</span><br></pre></td></tr></table></figure>\n<p>mv就是move的缩写，可以用来移动文件或者将文件改名（move (rename) files），是Linux系统下常用的命令，经常用来备份文件或者目录。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">mv [选项] [源文件或目录] [目标文件或目录]</span><br></pre></td></tr></table></figure>\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-b ：若需覆盖文件，则覆盖前先行备份</p>\n</li>\n<li><p>-f ：force 强制的意思，如果目标文件已经存在，不会询问而直接覆盖</p>\n</li>\n<li><p>-i ：若目标文件 (destination) 已经存在时，就会询问是否覆盖</p>\n</li>\n</ul>\n<h2 id=\"删除文件或文件夹：rm（remove-的缩写）\"><a href=\"#删除文件或文件夹：rm（remove-的缩写）\" class=\"headerlink\" title=\"删除文件或文件夹：rm（remove 的缩写）\"></a><strong>删除文件或文件夹：rm（remove 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 强制删除整个文件夹，无论该文件夹是否为空（使用 -rf）</span><br><span class=\"line\">$ rm -rf &#x2F;Users&#x2F;taigermos&#x2F;desktop</span><br><span class=\"line\"></span><br><span class=\"line\"># 强制删除文件，无论该文件为什么权限（使用 -f）</span><br><span class=\"line\">$ rm -f &#x2F;Users&#x2F;taigermos&#x2F;desktop&#x2F;test.py</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件前逐一询问（使用 -i）</span><br><span class=\"line\">$ rm -i test.txt </span><br><span class=\"line\">rm：是否删除 一般文件 &quot;test.txt&quot;? y </span><br><span class=\"line\"></span><br><span class=\"line\"># 删除文件夹必须使用 -r</span><br><span class=\"line\">$ rm homework  </span><br><span class=\"line\">rm: 无法删除目录&quot;homework&quot;: 是一个目录  </span><br><span class=\"line\">$ rm -r  homework </span><br></pre></td></tr></table></figure>\n\n<p>rm就是remove，這指令要特別小心，用來刪除資料的，當使用時要謹慎，否則刪除就找不到了。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm [选项] [文件或目录]</span><br></pre></td></tr></table></figure>\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-i 删除前逐一询问确认</p>\n</li>\n<li><p>-r 将目录及以下之档案亦逐一删除（向下递归删除）</p>\n</li>\n<li><p>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认（强制删除）</p>\n</li>\n</ul>\n<h2 id=\"移动一个文件夹或改变名称：mvdir（move-directory-的缩写）–-gt-Mac-无法使用\"><a href=\"#移动一个文件夹或改变名称：mvdir（move-directory-的缩写）–-gt-Mac-无法使用\" class=\"headerlink\" title=\"移动一个文件夹或改变名称：mvdir（move directory 的缩写）–&gt; Mac 无法使用\"></a><strong>移动一个文件夹或改变名称：mvdir（move directory 的缩写）–&gt; Mac 无法使用</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># mvdir 是unix操作系统的命令行。在mac的终端是用不了的</span><br><span class=\"line\">$ mvdir .&#x2F;text .&#x2F;text2  </span><br><span class=\"line\">zsh: command not found: mvdir  </span><br></pre></td></tr></table></figure>\n\n<p>mvdir就是move directory，mvdir是unix操作系统的命令行，在mac的终端是用不了的。所以mac终端使用 mv 代替 mvdir。  </p>\n<h2 id=\"删除一个空目录：rmdir（remove-directory-的缩写）\"><a href=\"#删除一个空目录：rmdir（remove-directory-的缩写）\" class=\"headerlink\" title=\"删除一个空目录：rmdir（remove directory 的缩写）\"></a><strong>删除一个空目录：rmdir（remove directory 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 删除 text 这个空目录</span><br><span class=\"line\">$ rmdir &#x2F;Users&#x2F;taigermos&#x2F;text   </span><br></pre></td></tr></table></figure>\n\n<p>rmdir就是remove directory，只用来删除空目录，不过一旦目录非空会提示 Directiry not empty，一般不使用rmdir 而使用 rm -r [文件夹名称]。</p>\n<h2 id=\"复制文件或文件夹：cp（copy-的缩写）\"><a href=\"#复制文件或文件夹：cp（copy-的缩写）\" class=\"headerlink\" title=\"复制文件或文件夹：cp（copy 的缩写）\"></a><strong>复制文件或文件夹：cp（copy 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 将文件file复制到目录&#x2F;Users&#x2F;taigermos&#x2F;tmp下，并改名为file1</span><br><span class=\"line\">$ cp file &#x2F;Users&#x2F;taigermos&#x2F;tmp&#x2F;file1</span><br><span class=\"line\"></span><br><span class=\"line\"># 将&#x2F;boot目录下所有文件及子目录复制到&#x2F;root目录（复制文件夹目录使用 -r）</span><br><span class=\"line\">$ cp -r &#x2F;boot &#x2F;root</span><br></pre></td></tr></table></figure>\n<p>cp就是copy，這指令就像Ctrl+C複製的意思，cp命令用来将一个或多个源文件或者目录复制到指定的目的文件或目录。它可以将单个源文件复制成一个指定文件名的具体的文件或一个已经存在的目录下。cp命令还支持同时复制多个文件，当一次复制多个文件时，目标文件参数必须是一个已经存在的目录，否则将出现错误。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cp [选项] 源文件&#x2F;文件夹</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>-a：此参数的效果和同时指定”-dpR”参数相同；</p>\n</li>\n<li><p>-d：当复制符号连接时，把目标文件或目录也建立为符号连接，并指向与源文件或目录连接的原始文件或目录；</p>\n</li>\n<li><p>-f：强行复制文件或目录，不论目标文件或目录是否已存在；</p>\n</li>\n<li><p>-i：覆盖既有文件之前先询问用户；</p>\n</li>\n<li><p>-l：对源文件建立硬连接，而非复制文件；</p>\n</li>\n<li><p>-p：保留源文件或目录的属性；</p>\n</li>\n<li><p>-R/r：递归处理，将指定目录下的所有文件与子目录一并处理；</p>\n</li>\n<li><p>-s：对源文件建立符号连接，而非复制文件；</p>\n</li>\n<li><p>-u：使用这项参数后只会在源文件的更改时间较目标文件更新时或是名称相互对应的目标文件并不存在时，才复制文件；</p>\n</li>\n<li><p>-S：在备份文件时，用指定的后缀“SUFFIX”代替文件的默认后缀；</p>\n</li>\n<li><p>-b：覆盖已存在的文件目标前将目标文件备份；</p>\n</li>\n<li><p>-v：详细显示命令执行的操作</p>\n</li>\n</ul>\n<p><strong>参数：</strong></p>\n<ul>\n<li><p>源文件：制定源文件列表。默认情况下，cp命令不能复制目录，如果要复制目录，则必须使用-R选项</p>\n</li>\n<li><p>目标文件：指定目标文件。当“源文件”为多个文件时，要求“目标文件”为指定的目录</p>\n</li>\n</ul>\n<h2 id=\"显示文件类型：file\"><a href=\"#显示文件类型：file\" class=\"headerlink\" title=\"显示文件类型：file\"></a><strong>显示文件类型：file</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看text文件的文件类型</span><br><span class=\"line\">$ file text.txt</span><br></pre></td></tr></table></figure>\n\n<p>file用来查看文件类型。</p>\n<h1 id=\"vi-vim-的使用\"><a href=\"#vi-vim-的使用\" class=\"headerlink\" title=\"vi/vim 的使用\"></a><strong>vi/vim 的使用</strong></h1><p>详细内容参考：<a href=\"https://taigermos.github.io/2020/08/16/Linux-vi-vim%E2%80%94%E2%80%94%E7%BB%88%E7%AB%AF%E4%B8%AD%E7%9A%84%E7%BC%96%E8%BE%91%E5%99%A8/\">Linux vi/vim——终端中的编辑器</a></p>\n<h1 id=\"权限相关\"><a href=\"#权限相关\" class=\"headerlink\" title=\"权限相关\"></a><strong>权限相关</strong></h1><h2 id=\"临时以root用户权限去操作：sudo（super-user-do-的缩写）\"><a href=\"#临时以root用户权限去操作：sudo（super-user-do-的缩写）\" class=\"headerlink\" title=\"临时以root用户权限去操作：sudo（super user do 的缩写）\"></a><strong>临时以root用户权限去操作：sudo（super user do 的缩写）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 以root用户权限生成hexo博客</span><br><span class=\"line\">$ sudo hexo g</span><br></pre></td></tr></table></figure>\n\n<p>sudo就是super user do，临时使用 root 账户权限执行操作，当然，使用之前需要 administrator 账户（管理员账户）的授权（输入密码）。</p>\n<p><strong>提示：</strong> 如果由于你忘了使用 sudo 而导致命令行返回一个错误，只需输入 sudo !! 就可以用 sudo 来执行上一条指令。不恰当地使用 sudo 可以轻易破坏你的系统设置。命令行只会在第一次执行严重破坏性行为之前提示。</p>\n<ul>\n<li><p><strong>使用 sudo 切换 Shell</strong></p>\n<p>  如果你是一个管理员用户，你需要执行很多条需要 root 权限的命令，你可以临时切换整个命令行 shell 来取得 root 级别的访问权限。方法就是先输入 sudo -s，回车后再键入你的密码。</p>\n</li>\n</ul>\n<h1 id=\"系统\"><a href=\"#系统\" class=\"headerlink\" title=\"系统\"></a><strong>系统</strong></h1><h2 id=\"查看本机-IP-等配置信息：ifconfig\"><a href=\"#查看本机-IP-等配置信息：ifconfig\" class=\"headerlink\" title=\"查看本机 IP 等配置信息：ifconfig\"></a><strong>查看本机 IP 等配置信息：ifconfig</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 看本机 IP 等配置信息</span><br><span class=\"line\">$ ifconfig</span><br></pre></td></tr></table></figure>\n\n\n<h1 id=\"Terminal光标-输入技巧\"><a href=\"#Terminal光标-输入技巧\" class=\"headerlink\" title=\"Terminal光标/输入技巧\"></a><strong>Terminal光标/输入技巧</strong></h1><h2 id=\"光标移动到行首：Ctrl-a\"><a href=\"#光标移动到行首：Ctrl-a\" class=\"headerlink\" title=\"光标移动到行首：Ctrl + a\"></a><strong>光标移动到行首：Ctrl + a</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 光标移动到行首</span><br><span class=\"line\">  Ctrl + a</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光标移动到行尾：Ctrl-e\"><a href=\"#光标移动到行尾：Ctrl-e\" class=\"headerlink\" title=\"光标移动到行尾：Ctrl + e\"></a><strong>光标移动到行尾：Ctrl + e</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 光标移动到行尾</span><br><span class=\"line\">  Ctrl + e</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光标移动到鼠标指针处：Option-鼠标\"><a href=\"#光标移动到鼠标指针处：Option-鼠标\" class=\"headerlink\" title=\"光标移动到鼠标指针处：Option + 鼠标\"></a><strong>光标移动到鼠标指针处：Option + 鼠标</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 光标移动到鼠标指针处</span><br><span class=\"line\">  Option + 鼠标</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光标删除到行首：Ctrl-u\"><a href=\"#光标删除到行首：Ctrl-u\" class=\"headerlink\" title=\"光标删除到行首：Ctrl + u\"></a><strong>光标删除到行首：Ctrl + u</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 光标删除到行首</span><br><span class=\"line\">  Ctrl + u</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"光标删除到行尾：Ctrl-k\"><a href=\"#光标删除到行尾：Ctrl-k\" class=\"headerlink\" title=\"光标删除到行尾：Ctrl + k\"></a><strong>光标删除到行尾：Ctrl + k</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 光标删除到行尾</span><br><span class=\"line\">  Ctrl + k</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"可以列出代选命令-代选文件：Double-Tab（双击-Tab）\"><a href=\"#可以列出代选命令-代选文件：Double-Tab（双击-Tab）\" class=\"headerlink\" title=\"可以列出代选命令/代选文件：Double Tab（双击 Tab）\"></a><strong>可以列出代选命令/代选文件：Double Tab（双击 Tab）</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 列出代选命令&#x2F;代选文件</span><br><span class=\"line\">$ 双击 Tab</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"强制推出当前操作：Ctrl-c\"><a href=\"#强制推出当前操作：Ctrl-c\" class=\"headerlink\" title=\"强制推出当前操作：Ctrl + c\"></a><strong>强制推出当前操作：Ctrl + c</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 强制本地hexo博客预览的执行</span><br><span class=\"line\">  Ctrl + c</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"清屏：Command-k-Ctrl-l-clear\"><a href=\"#清屏：Command-k-Ctrl-l-clear\" class=\"headerlink\" title=\"清屏：Command + k / Ctrl + l / clear\"></a><strong>清屏：Command + k / Ctrl + l / clear</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 清除屏幕或窗口内容</span><br><span class=\"line\">$ clear</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除屏幕或窗口内容</span><br><span class=\"line\">  Ctrl + l</span><br><span class=\"line\"></span><br><span class=\"line\"># 清除屏幕或窗口内容</span><br><span class=\"line\">  Command + k</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"查看与执行历史命令：history\"><a href=\"#查看与执行历史命令：history\" class=\"headerlink\" title=\"查看与执行历史命令：history\"></a><strong>查看与执行历史命令：history</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查看历史命令（默认查看4条历史命令）</span><br><span class=\"line\">$ history</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看10条历史命令</span><br><span class=\"line\">$ history 10</span><br></pre></td></tr></table></figure>\n\n<p>history用于显示指定数目的历史指令命令，读取历史命令文件中的目录到历史命令缓冲区和将历史命令缓冲区中的目录写入命令文件。</p>\n<p><strong>语法：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">history [选项]</span><br></pre></td></tr></table></figure>\n\n<p><strong>选项：</strong></p>\n<ul>\n<li><p>n  ：数字,要列出最近的 n 笔命令列表</p>\n</li>\n<li><p>-c ：将目前的shell中的所有 history 内容全部消除</p>\n</li>\n<li><p>-a ：将目前新增的history 指令新增入 histfiles 中，若没有加 histfiles,则预设写入 ~/.bash_history</p>\n</li>\n<li><p>-r ：将 histfiles 的内容读到目前这个 shell 的 history 记忆中</p>\n</li>\n<li><p>-w ：将目前的 history 记忆内容写入 histfiles。</p>\n</li>\n</ul>\n<h2 id=\"查询功能-可以查询某个具体指令或者工具的使用文档：man\"><a href=\"#查询功能-可以查询某个具体指令或者工具的使用文档：man\" class=\"headerlink\" title=\"查询功能, 可以查询某个具体指令或者工具的使用文档：man\"></a><strong>查询功能, 可以查询某个具体指令或者工具的使用文档：man</strong></h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 查询ls指令的使用方法及功能</span><br><span class=\"line\">$ man ls</span><br></pre></td></tr></table></figure>\n\n<p>man就是一个命令使用指南，在命令行中输入 man command-name 即可获取。</p>\n<p>使用指南往往很长，所以你可以使用▲（上箭头）或▼（下箭头）来上下移动，使用空格来翻页，输入 / 和关键字来按照关键字搜索，按 Q 来退出使用指南页面。</p>\n<p>输入 man -k 和关键字来对整个使用指南数据库进行搜索。</p>\n<h1 id=\"Terminal窗口技巧\"><a href=\"#Terminal窗口技巧\" class=\"headerlink\" title=\"Terminal窗口技巧\"></a><strong>Terminal窗口技巧</strong></h1><h2 id=\"新增窗口：Command-n\"><a href=\"#新增窗口：Command-n\" class=\"headerlink\" title=\"新增窗口：Command + n\"></a><strong>新增窗口：Command + n</strong></h2><h2 id=\"新开分页：Command-t\"><a href=\"#新开分页：Command-t\" class=\"headerlink\" title=\"新开分页：Command + t\"></a><strong>新开分页：Command + t</strong></h2><h2 id=\"关闭当前窗口或分页：Command-w\"><a href=\"#关闭当前窗口或分页：Command-w\" class=\"headerlink\" title=\"关闭当前窗口或分页：Command + w\"></a><strong>关闭当前窗口或分页：Command + w</strong></h2><h2 id=\"储存当下画面成文字档：Command-s\"><a href=\"#储存当下画面成文字档：Command-s\" class=\"headerlink\" title=\"储存当下画面成文字档：Command + s\"></a><strong>储存当下画面成文字档：Command + s</strong></h2><h2 id=\"切换分页：Ctrl-Tab-Ctrl-Shift-Tab\"><a href=\"#切换分页：Ctrl-Tab-Ctrl-Shift-Tab\" class=\"headerlink\" title=\"切换分页：Ctrl + Tab / Ctrl + Shift + Tab\"></a><strong>切换分页：Ctrl + Tab / Ctrl + Shift + Tab</strong></h2>","categories":["技术"],"tags":["终端","Terminal","终端常用命令"]},{"title":"Tomcat安装及配置教程","url":"/2021/07/21/Tomcat%E5%AE%89%E8%A3%85%E5%8F%8A%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B/","content":"<h2 id=\"步骤一：下载Tomcat\"><a href=\"#步骤一：下载Tomcat\" class=\"headerlink\" title=\"步骤一：下载Tomcat\"></a><strong>步骤一：下载Tomcat</strong></h2><p>链接如下：<a href=\"https://tomcat.apache.org/\">https://tomcat.apache.org/</a></p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/GJwsTUFdZCXomzr.png\" alt=\"image.png\"><br><img data-src=\"https://i.loli.net/2021/07/19/idM2vSUIpTq1Rnw.png\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n\n<p><font color=#FF0000>注意：要根据自己的JDK版本选择Tomcat的版本。</font></p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/tdgloXBP9y6C4m1.png\" alt=\"image.png\"></p>\n<p>因本人java版本为10.0.2，故选择Tomcat9.0.31版本（Windows请自行选择64位或32位）</p>\n<h2 id=\"步骤二：配置环境变量\"><a href=\"#步骤二：配置环境变量\" class=\"headerlink\" title=\"步骤二：配置环境变量\"></a><strong>步骤二：配置环境变量</strong></h2><p>新建系统环境变量：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/OkxPpgGY8CJ4HEs.png\" alt=\"image.png\"></p>\n<p>修改系统Path(变量值末尾添加%CATALINA_HOME%\\bin;):</p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/sDX59yUQWTal6IV.png\" alt=\"image.png\"></p>\n<p>保存即可。</p>\n<h2 id=\"步骤三：查询环境是否配置成功\"><a href=\"#步骤三：查询环境是否配置成功\" class=\"headerlink\" title=\"步骤三：查询环境是否配置成功\"></a><strong>步骤三：查询环境是否配置成功</strong></h2><p><img data-src=\"https://i.loli.net/2021/07/19/q24DLcXTRWYCUIw.png\" alt=\"image.png\"></p>\n<p>ps:若出现上述内容，则环境配置成功</p>\n<h2 id=\"步骤四：启动Tomcat：使用命令：startup-bat\"><a href=\"#步骤四：启动Tomcat：使用命令：startup-bat\" class=\"headerlink\" title=\"步骤四：启动Tomcat：使用命令：startup.bat\"></a><strong>步骤四：启动Tomcat：使用命令：startup.bat</strong></h2><p><font color=#87ceeb>(此处可能出现闪退，导致启动不成功，请滑至文章结尾处查看解决办法)</font></p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/ra7E3QoGJ8jksRN.png\" alt=\"image.png\"></p>\n<p>ps:当出现Tomcat的命令框且在浏览器中输入 <a href=\"http://localhost:8080/\">http://localhost:8080/</a> 出现下述界面（注意，此时上述两个命令框不要关闭）：</p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/dePzf4C31XnNkyS.png\" alt=\"image.png\"></p>\n<p>大功告成，Tomcat搭建成功！！！！</p>\n<p>&lt;问题&gt;</p>\n<p>Q：出现闪退怎么办（即：启动tomcatw.exe出现unable to open the service tomcat怎么办）？</p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/s3pIJmvVPiAqBhS.png\" alt=\"image.png\"></p>\n<p>A：打开命令行，输入命令service.bat install</p>\n<p><img data-src=\"https://i.loli.net/2021/07/19/VqOE9CvoGwYmyTx.png\" alt=\"image.png\"></p>\n<p>再回到步骤四，重新启动Tomcat。</p>\n<p>参考：链接一：<a href=\"https://jingyan.baidu.com/article/20b68a88592e06796cec6234.html\">https://jingyan.baidu.com/article/20b68a88592e06796cec6234.html</a></p>\n","categories":["技术"],"tags":["Tomcat"]},{"title":"Ubuntu 中 Pycharm 无法输入中文","url":"/2021/07/23/Ubuntu-%E4%B8%AD-Pycharm-%E6%97%A0%E6%B3%95%E8%BE%93%E5%85%A5%E4%B8%AD%E6%96%87/","content":"<p>解决办法来自: <a href=\"https://github.com/libpinyin/ibus-libpinyin/issues/289#issuecomment-714361146\">https://github.com/libpinyin/ibus-libpinyin/issues/289#issuecomment-714361146</a>**</p>\n<ol>\n<li><strong>点击菜单 “Help | Edit Custom VM options…”</strong></li>\n<li><strong>添加 -Drecreate.x11.input.method=true 到最后一行</strong></li>\n<li><strong>重启IDEA</strong></li>\n</ol>\n","categories":["技术"],"tags":["Ubuntu","Pycharm"]},{"title":"git以及github简单的使用方法","url":"/2020/07/31/git%E4%BB%A5%E5%8F%8Agithub%E7%AE%80%E5%8D%95%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/","content":"<h1 id=\"简单总结使用方法\"><a href=\"#简单总结使用方法\" class=\"headerlink\" title=\"简单总结使用方法\"></a><strong>简单总结使用方法</strong></h1><h2 id=\"本地文件的操作\"><a href=\"#本地文件的操作\" class=\"headerlink\" title=\"本地文件的操作\"></a><strong>本地文件的操作</strong></h2><ol>\n<li><p>从终端进入要操作的文件夹</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd &#x2F;文件夹地址&#x2F;</span><br></pre></td></tr></table></figure>\n <a id=\"more\"></a></li>\n<li><p>使用 <strong>git init</strong> 初始化要操作的文件夹（即在该文件夹中创建一个隐藏的.git文件夹）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<p> 建议：使用 <strong>git status</strong>确认目前 Git 的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <strong>git add</strong> 将未追踪文件（新增文件）、已修改文件加入暂存区（<strong>加入暂存区后 文件 红 –&gt; 绿，表示文件已经位于暂存区，准备送进 本地仓库 local repository</strong>）</p>\n<p> 一般由于逐一輸入文件名称很麻烦，也可以直接打 git add .：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add .</span><br></pre></td></tr></table></figure>\n<p> 注意添加的方法</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add 文件名称</span><br></pre></td></tr></table></figure>\n<p> 建议：使用 <strong>git status</strong>确认目前 Git 的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <strong>git commit</strong> 将暂存区的文件提交至 本地仓库 local repository</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git commit -m &quot;这次提交的注释信息&quot;</span><br></pre></td></tr></table></figure>\n<p> 建议：使用 <strong>git status</strong>确认目前 Git 的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure></li>\n<li><p>使用 <strong>git push</strong> 将 本地仓库 local repository（要操作的文件夹）推到 远端仓库</p>\n<p> 日常操作：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push</span><br></pre></td></tr></table></figure>\n<p> 第一次操作:</p>\n<p> -u 是 –set-upstream 的縮寫，一旦設定過 upstream，以後就不用每次都要打 origin master。</p>\n<p> 指令后的两个参数分別是主机位置 origin 和想推到远端的分支 master（由于暂时不会开其他的分支，一般预设为 master）</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure>\n<p> 建议：使用 <strong>git status</strong>确认目前 Git 的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"本地仓库与远端仓库关联\"><a href=\"#本地仓库与远端仓库关联\" class=\"headerlink\" title=\"本地仓库与远端仓库关联\"></a><strong>本地仓库与远端仓库关联</strong></h2><ol>\n<li>使用 <strong>git remote add</strong> 指令把遠端的 HTTPS 网址注册起來，并且将这个远端主机命名为 origin，origin 是可以改的： <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote add origin 复制需要关联的远端仓库页面上提供的网址</span><br></pre></td></tr></table></figure>\n 建议使用 <strong>git remote -v</strong> 确认 <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git remote -v</span><br></pre></td></tr></table></figure>\n 会看到 origin 这个名称指向了 GitHub 位址 <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">origin GitHub 位址 (fetch)</span><br><span class=\"line\">origin GitHub 位址 (push)</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<hr>\n<h1 id=\"以下为具体教程：\"><a href=\"#以下为具体教程：\" class=\"headerlink\" title=\"以下为具体教程：\"></a><strong>以下为具体教程：</strong></h1><h2 id=\"Git-安裝教學-Mac-版\"><a href=\"#Git-安裝教學-Mac-版\" class=\"headerlink\" title=\"Git 安裝教學 (Mac 版)\"></a><strong>Git 安裝教學 (Mac 版)</strong></h2><p>如果你使用 Mac 電腦，可以選擇用以下兩種方式之一來安裝 Git：</p>\n<ol>\n<li>直接到 Git 官方網站上下載並手動安裝：<a href=\"https://git-scm.com/download/mac\">https://git-scm.com/download/mac</a></li>\n<li>過 Homebrew 下載安裝 (建議)</li>\n</ol>\n<h3 id=\"安裝-Git\"><a href=\"#安裝-Git\" class=\"headerlink\" title=\"安裝 Git\"></a><strong>安裝 Git</strong></h3><p>这里我直接从 Git 官方网站下载并手动安装了。</p>\n<h3 id=\"確認-Git-安裝成功\"><a href=\"#確認-Git-安裝成功\" class=\"headerlink\" title=\"確認 Git 安裝成功\"></a><strong>確認 Git 安裝成功</strong></h3><p>我们用 <strong>git –version</strong> 來確認有回報資訊，就代表安裝完成了。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/HzwGgvkOPW8qExI.png\" alt=\"image.png\"></p>\n<h3 id=\"設定-Git-使用者名稱和信箱\"><a href=\"#設定-Git-使用者名稱和信箱\" class=\"headerlink\" title=\"設定 Git 使用者名稱和信箱\"></a><strong>設定 Git 使用者名稱和信箱</strong></h3><p>在進行程式碼的版本更新時，Git 會紀錄修改者是誰，因此需要登錄你的 name 和 email，請在 Terminal 或 Git bash 中輸入以下指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name &quot;your name&quot;   # Please enter your name</span><br><span class=\"line\">$ git config --global user.email &quot;your email&quot;  # Please enter your email</span><br></pre></td></tr></table></figure>\n<p>請使用以下指令確認輸入的資料是否正確：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --list</span><br></pre></td></tr></table></figure>\n<p>這行指令會列出目前的設定，若設定成功，其中應該會出現：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">user.name&#x3D; [your_username]</span><br><span class=\"line\">user.email&#x3D; [your_email@email.com]</span><br></pre></td></tr></table></figure>\n<p>現在你的電腦裡已經安裝了版本控制系統了。</p>\n<h2 id=\"使用-Git-來管理本地文件\"><a href=\"#使用-Git-來管理本地文件\" class=\"headerlink\" title=\"使用 Git 來管理本地文件\"></a><strong>使用 Git 來管理本地文件</strong></h2><p>現在要用 Git 來管理本地文件。在開始前，請確認你的指令列的目錄要進入練習用的文件夾 git_proj 裡：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/9fk5uOcaPWYSt8K.png\" alt=\"image.png\"></p>\n<h3 id=\"為專案（文件夹）註冊-Git-版本控制\"><a href=\"#為專案（文件夹）註冊-Git-版本控制\" class=\"headerlink\" title=\"為專案（文件夹）註冊 Git 版本控制\"></a><strong>為專案（文件夹）註冊 Git 版本控制</strong></h3><p>現在在我們的測試文件夹 git_proj 下，輸入 <strong>git init</strong> 指令。這個動作會將這個文件夾註冊到版本控制內，也就是建立一個 <strong>Git 本地仓库（local repository）</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git init</span><br><span class=\"line\">Initialized empty Git repository in ~&#x2F;Desktop&#x2F;git_proj&#x2F;.git&#x2F;</span><br></pre></td></tr></table></figure>\n<p>請使用以下指令確認資料夾內有一個名為 <strong>.git 的資料夾</strong>，表示登記成功：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ ls -a</span><br><span class=\"line\">.             ..          .git           file_1.txt</span><br></pre></td></tr></table></figure>\n<p>ls 是列出子目錄，而加上副指令 -a 指定要一併列出隱藏的目錄，隱藏的目錄名稱開頭會有 .，例如 .git。</p>\n<h3 id=\"查看-Git-Status\"><a href=\"#查看-Git-Status\" class=\"headerlink\" title=\"查看 Git Status\"></a><strong>查看 Git Status</strong></h3><p>登記專案之後，你可以用 <strong>git status</strong> 確認<strong>目前 Git 的狀態</strong>，輸入指令並按下 enter 之後，請仔細看一下跑出來的訊息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Untracked files:</span><br><span class=\"line\"> (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)</span><br><span class=\"line\"></span><br><span class=\"line\">   file_1.txt</span><br><span class=\"line\"></span><br><span class=\"line\">nothing added to commit but untracked files present (use &quot;git add&quot; to track)</span><br></pre></td></tr></table></figure>\n\n<p>這段訊息告知了幾件事：</p>\n<ul>\n<li>你目前的位址在 master 這條分支上 (關於分支，我們暫時不深入解釋)</li>\n<li>還沒有任何的提交 (commit)</li>\n<li>還沒列入追蹤的檔案有 file_1.txt，請你用 git add <file> … 指令來加入想提交的檔案</li>\n</ul>\n<p>Git 已經告訴你需要做什麼了，接下來我們會順著它的指示來提交程式碼。在過程中，若你搞不清楚自己在哪一個步驟，隨時都可以停下來使用 git status，看看會有什麼訊息或建議跑出來。</p>\n<h3 id=\"提交程式碼\"><a href=\"#提交程式碼\" class=\"headerlink\" title=\"提交程式碼\"></a><strong>提交程式碼</strong></h3><p>現在我們要將 <strong>file_1.txt 的內容</strong>提交到 <strong>本地仓库Git repository</strong> 裡，這個流程需要兩道指令：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/9S5JnLpzmt2YNFd.png\" alt=\"image.png\"></p>\n<h4 id=\"git-add\"><a href=\"#git-add\" class=\"headerlink\" title=\"git add\"></a><strong>git add</strong></h4><p>首先使用 <strong>git add</strong> 指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git add file_1.txt</span><br></pre></td></tr></table></figure>\n<p>由於逐一輸入檔案名稱很麻煩，也可以直接打 <strong>git add .</strong> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git add .</span><br></pre></td></tr></table></figure>\n<p>用 <strong>git status</strong> 確認目前狀態：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\"></span><br><span class=\"line\">No commits yet</span><br><span class=\"line\"></span><br><span class=\"line\">Changes to be committed:</span><br><span class=\"line\"> (use &quot;git rm --cached &lt;file&gt;...&quot; to unstage)</span><br><span class=\"line\"></span><br><span class=\"line\">   new file:   file_1</span><br></pre></td></tr></table></figure>\n<p>你會看見檔案名稱<strong>變成綠色</strong>，而且提示改成「<strong>Changes to be committed</strong>」，表示<strong>檔案已經位在 staging area，準備送進 repository</strong>。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/GiLfORxFWPbHdKk.png\" alt=\"image.png\"></p>\n<h4 id=\"git-commit\"><a href=\"#git-commit\" class=\"headerlink\" title=\"git commit\"></a><strong>git commit</strong></h4><p><strong>git commit</strong> 指令用法如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git commit -m &quot;create file_1&quot;</span><br><span class=\"line\">[master (root-commit) 6afdffa] create file_1</span><br><span class=\"line\">1 file changed, 1 insertion(+)</span><br><span class=\"line\">create mode 100644 file_1</span><br></pre></td></tr></table></figure>\n<p><strong>-m 是 –message 的縮寫，可以為這筆 commit 附上這一筆 commit 的說明。</strong></p>\n<p><strong>其中的 6afdffa 是一組 <SHA-1> 編碼，用來識別每一筆 commit，在你的電腦上你會看見不同的 SHA 碼。</strong></p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/nXBzoNIi8qhkgLv.png\" alt=\"image.png\"></p>\n<p>恭喜你已經<strong>完成第一筆 commit</strong> ，此時<strong>再次檢查 git status，由於你沒有更動任何的程式碼，它會告訴你 nothing to commit, working tree clean：</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;git_proj] $ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"雲端版本控制服務：GitHub\"><a href=\"#雲端版本控制服務：GitHub\" class=\"headerlink\" title=\"雲端版本控制服務：GitHub\"></a><strong>雲端版本控制服務：GitHub</strong></h2><h3 id=\"建立你的-GitHub-帳號\"><a href=\"#建立你的-GitHub-帳號\" class=\"headerlink\" title=\"建立你的 GitHub 帳號\"></a><strong>建立你的 GitHub 帳號</strong></h3><p><img data-src=\"https://i.loli.net/2020/07/31/uV2CjI4aDGgMRpB.png\" alt=\"image.png\"></p>\n<p>輸入暱稱、信箱、密碼之後點選註冊（Sign up for GitHub），3. 記得選免費方案，也就是選擇成為開源專案，然後點選 Continue。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/XgEKROQ8nIJsUZy.png\" alt=\"image.png\"></p>\n<p>接著會來到問卷調查專區，可自由選擇填寫，點選 Submit。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/8diBuaTObwyIV4F.png\" alt=\"image.png\"></p>\n<p>註冊完成以後，需要完成信箱認證，帳號才會開通。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/dexwvba9fBzVPjp.png\" alt=\"image.png\"></p>\n<h3 id=\"在-GitHub-上建立專案-Repository\"><a href=\"#在-GitHub-上建立專案-Repository\" class=\"headerlink\" title=\"在 GitHub 上建立專案 Repository\"></a><strong>在 GitHub 上建立專案 Repository</strong></h3><p>完成信箱認證後，登入平台，點選 Start a project。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/tdeHZBiDMJCWkum.png\" alt=\"image.png\"></p>\n<p>輸入 repository 的名稱以及描述，其他選項不用更動：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/gMiRUt5sQ7uXzLk.png\" alt=\"image.png\"></p>\n<p>按下 Create repository ，若看到以下畫面，表示已成功建立 repository：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/OnRAh7JYqvPLBWC.png\" alt=\"image.png\"></p>\n<h3 id=\"將專案（文件夹）「推」上-GitHub\"><a href=\"#將專案（文件夹）「推」上-GitHub\" class=\"headerlink\" title=\"將專案（文件夹）「推」上 GitHub\"></a><strong>將專案（文件夹）「推」上 GitHub</strong></h3><p>現在，你在本地有一個 <strong>本地仓库local repository</strong>，而在 GitHub 上有一個 <strong>远端仓库remote repository</strong>，下一步是<strong>將兩者連結起來</strong>。</p>\n<p>在剛才創建的 GitHub repository 裡，已經為你提供了操作指令，由於我們在自己的電腦上<strong>已經有了 本地仓库local repository</strong>，所以要使用下圖紅色方框內的指令：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/pgDOe7vNzc3H21I.png\" alt=\"image.png\"></p>\n<p>指令一共有兩行，第一行是使用 <strong>git remote add</strong> 指令<strong>把遠端的 HTTPS 網址註冊起來，並且將這個遠端主機命名為 origin</strong>，origin 是可以改的：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;my-movie-list] $ git remote add origin [your github repo]</span><br></pre></td></tr></table></figure>\n<p>請回到你的 Terminal / Git Bash 貼上指令並按下 enter。</p>\n<p>接著我們可以用 <strong>git remote -v</strong> 確認，你會看到 <strong>origin 這個名稱指向了 GitHub 位址</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;my-movie-list] $ git remote -v</span><br><span class=\"line\">origin [your GitHub repo] (fetch)</span><br><span class=\"line\">origin [your GitHub repo] (push)</span><br></pre></td></tr></table></figure>\n<p>接著要使用 <strong>git push</strong> 把 <strong>本地仓库 local repository「推」</strong>到<strong>遠端</strong>，<strong>指令後的兩個參數</strong>分別是<strong>主機位置 origin</strong> 和<strong>想推到遠端的分支 master</strong>（由於我們暫時不會開其他的分支，預設是 master）：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;my-movie-list] $ git push -u origin master</span><br><span class=\"line\">Username for &#39;https:&#x2F;&#x2F;github.com&#39;: [your github account]</span><br><span class=\"line\">Password for &#39;[your github account]&#39;:</span><br></pre></td></tr></table></figure>\n<p><strong>-u 是 –set-upstream 的縮寫，一旦設定過 upstream，以後就不用每次都要打 origin master。</strong></p>\n<p>若是第一次使用 git push，還必須驗證 GitHub 的帳號和密碼。</p>\n<p>完成之後，可以再次利用 <strong>git status</strong> 檢查：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[~&#x2F;my-movie-list] $ git status</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">Your branch is up-to-date with &#39;origin&#x2F;master&#39;.</span><br><span class=\"line\">nothing to commit, working tree clean</span><br></pre></td></tr></table></figure>\n<p><strong>多了一行 Your branch is up-to-date with ‘origin/master’，表示遠端的 origin/master 已更新到最新進度。</strong></p>\n<p>此時回到 GitHub 的專案頁面，你會看見<strong>專案出現在遠端了</strong>，任何人只要進入這個頁面，都可以看見你的專案程式碼：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/31/LRN4AQuHPy2OF86.png\" alt=\"image.png\"></p>\n<p>恭喜你！你現在可以分享整個專案的細節了，有了 remote repository，討論程式碼都會容易許多！</p>\n","categories":["技术"],"tags":["git","github"]},{"title":"vue 3.x 环境搭建及项目创建","url":"/2021/11/08/vue-3-x-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA/","content":"<h1 id=\"一、环境搭建\"><a href=\"#一、环境搭建\" class=\"headerlink\" title=\"一、环境搭建\"></a><strong>一、环境搭建</strong></h1><p>1、安装node.js 下载地址：<a href=\"https://nodejs.org/\">https://nodejs.org/</a> 安装就下一步下一步就可以了（node8.9或以上版本） 安装成功结束如何检查是否安装成功和版本 打开cmd 输入 node –v 如果没有出现，可以重启电脑再试一下</p>\n<a id=\"more\"></a>\n\n<p><img data-src=\"https://i.loli.net/2021/11/08/MjpVs3Ut6ohZAq1.png\" alt=\"image.png\"></p>\n<p>2、全局安装vue-cli3.0脚手架<br>卸载：如果已经全局安装了旧版本的vue-cli(1.x 或 2.x)，需要先卸载：npm uninstall vue-cli -g<br>安装：也是在cmd中输入命令  npm install -g @vue/cli<br>查看版本号：vue -V，（大写的V）出现版本号即安装成功。</p>\n<p>3、安装淘宝镜像 cnpm (非必装，网络慢的情况可安装)<br>npm install -g cnpm –registry=<a href=\"https://registry.npm.taobao.org/\">https://registry.npm.taobao.org</a></p>\n<h1 id=\"二、创建vue3-x项目\"><a href=\"#二、创建vue3-x项目\" class=\"headerlink\" title=\"二、创建vue3.x项目\"></a><strong>二、创建vue3.x项目</strong></h1><p>1、输入命令 vue create projectname</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/KfFkadX9HnUReEZ.png\" alt=\"image.png\"><br>注意：如果你想在某个目录下创建项目，可以先打开这个文件夹，然后在文件夹地址栏输入cmd 按回车键，弹出cmd窗口，输入命令</p>\n<p>2、输入命令后会跳出选项</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/mHdwEsbyFh7OBaj.png\" alt=\"image.png\"><br>我们选最后一个 Manually select features 自定义创建，按回车键进入下一步 3、我们可以按上下键，然后按空格键选中需要的选项，最后按回车键进入下一步</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/94QsLd6KNcDo3nJ.png\" alt=\"image.png\"></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&gt;( ) Babel &#x2F;&#x2F;转码器，可以将ES6代码转为ES5代码，从而在现有环境执行。 </span><br><span class=\"line\"> ( ) TypeScript&#x2F;&#x2F; TypeScript是一个JavaScript（后缀.js）的超集（后缀.ts）包含并扩展了 JavaScript 的语法，需要被编译输出为 JavaScript在浏览器运行</span><br><span class=\"line\"> ( ) Progressive Web App (PWA) Support&#x2F;&#x2F; 渐进式Web应用程序</span><br><span class=\"line\"> ( ) Router &#x2F;&#x2F; vue-router（vue路由）</span><br><span class=\"line\"> ( ) Vuex &#x2F;&#x2F; vuex（vue的状态管理模式）</span><br><span class=\"line\"> ( ) CSS Pre-processors &#x2F;&#x2F; CSS 预处理器（如：less、sass）</span><br><span class=\"line\"> ( ) Linter &#x2F; Formatter &#x2F;&#x2F; 代码风格检查和格式化（如：ESlint）</span><br><span class=\"line\"> ( ) Unit Testing &#x2F;&#x2F; 单元测试（unit tests）</span><br><span class=\"line\"> ( ) E2E Testing &#x2F;&#x2F; e2e（end to end） 测试</span><br></pre></td></tr></table></figure>\n\n<p>4、选择要创建的vue的版本，我们选3.x</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/VhmpyAazcDBRQ9T.png\" alt=\"image.png\"></p>\n<p>5、是否使用history路由模式(不带#号的)，输入 n</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/17cPdas894LQ2Ab.png\" alt=\"image.png\"></p>\n<p>6、选择css 模式，我们选择 node-sass css 预处理器，node-sass是自动编译实时的，dart-sass需要保存后才会生效。</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/tp6NQx8VPz1oJ3U.png\" alt=\"image.png\"></p>\n<p>7、代码验证模式，我们选择最后一个 ESLint + Prettier</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/ULS2wDsitKYxEAe.png\" alt=\"image.png\"></p>\n<p>8、热更新模式，选 Lint on save 保存的时候就热更新</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/AwYaqSZdT6hpmXE.png\" alt=\"image.png\"></p>\n<p>9、配置文件存放在单独的文件里 选 In dedicated config files</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/tyR3q1uwQbZknIY.png\" alt=\"image.png\"></p>\n<p>10、是否保存创建的选项，保存的话，下次创建也会按这个选择来创建，我们先选择 n 不保存</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/OtchW1exXQImlZV.png\" alt=\"image.png\"></p>\n<p>接下来就可以等待项目创建了</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/uEXbzfaHBGt7wjN.png\" alt=\"image.png\"></p>\n<p>创建完成后的界面如下</p>\n<p><img data-src=\"https://i.loli.net/2021/11/08/un1ao7OfviErgd2.png\" alt=\"image.png\"></p>\n<p>我们可以输入cd 命令 进入项目文件夹 cd oamyproject，然后输入 npm run serve 运行vue项目</p>\n","categories":["技术","前端","Vue框架"],"tags":["vue"]},{"title":"天真|死亡从不是我的第一选择","url":"/2021/07/27/%E5%A4%A9%E7%9C%9F-%E6%AD%BB%E4%BA%A1%E4%BB%8E%E4%B8%8D%E6%98%AF%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E9%80%89%E6%8B%A9/","content":"<p>以前我觉得我并不怕死，生命停在那一天都可以。 但是那可能是因为我还用有活着的权利。我的呼吸还不会嘶哑，也不会断断续续。如果我真的到了最后一刻，我可能也会想说， 别让我走。</p>\n<p>这些感悟放在平日里也是成立的，但是放在今年又有些不一样。</p>\n<a id=\"more\"></a>\n\n<center>\n\n<blockquote>\n<p><strong>死亡赋格——保罗·策兰</strong></p>\n<p>清晨的黑牛奶我们晚上喝</p>\n<p>我们中午喝早上喝我们夜里喝</p>\n<p>我们喝呀喝呀</p>\n<p>我们在空中掘个墓躺下不拥挤</p>\n<p>有个人住那屋里玩蛇写字</p>\n<p>他写夜色落向德国时你的金发哟玛格丽特</p>\n<p>写完他步出门外星光闪烁他一声呼哨唤来他的狼狗</p>\n<p>他吹哨子叫来他的犹太佬在地上挖个坟墓</p>\n<p>他命令我们马上奏乐跳舞</p>\n<p>清晨的黑牛奶呀我们夜里喝你我们喝呀喝呀</p>\n<p>早上喝你中午喝你晚上也喝你</p>\n<p>我们喝呀喝呀</p>\n<p>有个人住那屋里玩蛇写字</p>\n<p>他写夜色落向德国时你的金发哟玛格丽特</p>\n<p>你的灰发呀书拉密我们在空中掘个墓躺下不拥挤</p>\n<p>他吆喝你们这边挖深一点那边的唱歌奏乐</p>\n<p>他拔出腰带上的铁家伙挥舞着他的眼睛是蓝色的</p>\n<p>你们这边铁锹下深一点那边的继续奏乐跳舞</p>\n<p>清晨的黑牛奶呀我们夜里喝你</p>\n<p>早上喝你中午喝你晚上也喝你</p>\n<p>我们喝呀喝呀</p>\n<p>有个人住那屋里你的金发哟玛格丽特</p>\n<p>你的灰发呀书拉密他在玩蛇</p>\n<p>他大叫把死亡奏得甜蜜些死亡是来自德国的大师</p>\n<p>他大叫提琴再低沉些你们都化作烟雾升天</p>\n<p>在云中有座坟墓躺下不拥挤</p>\n<p>清晨的黑牛奶呀我们夜里喝</p>\n<p>中午喝你死亡是来自德国的大师</p>\n<p>我们晚上喝早上喝喝了又喝</p>\n<p>死亡是来自德国的大师他的眼睛是蓝色的</p>\n<p>他用铅弹打你打得可准了</p>\n<p>有个人住那屋里你的金发哟玛格丽特</p>\n<p>他放出狼狗扑向我们他送我们一座空中坟墓</p>\n<p>他玩蛇他做梦死亡是来自德国的大师</p>\n<p>你的金发的哟玛格丽特</p>\n<p>你的灰发呀书拉密</p>\n</blockquote>\n</center>\n\n<p>(下雨声)</p>\n<p>今年北京多了好多的雨，它们扒着玻璃窗爬下的时候，像是要把对面的树一条条地撕下来。我也被撕得差不多了，多余的精力令人进入一种表演但又疲于表演的状态。所有事都可做可不做，和人之间也只是简单地保持着友好。我明显地感觉到自己被剥落、下沉，很难说这种状态是属于我的一种偶然，还是大多数人都有的现象。</p>\n<p>我知道我逐渐丧失活着的热情，但我还是努力做一些看起来有意义的事。坐在海边，或者坐在火山口，说不定就会偶遇浪花和云朵。</p>\n<p>我参加了线上的戏剧朗读小组，像玛丽娜❶ 那样端茶送水，像柳苞芙❷ 一样感叹樱桃园里白色的童年，成为布兰奇❸ ，不敢被发光的灯泡照耀。</p>\n<p>我画画，拿出了以前买的画框和颜料，让画笔指引我的心。</p>\n<p>我听歌，架子鼓被锤下，我的心脏就弹起。电吉他波动，我的头颅就翻花绳。</p>\n<p>我重新开始写微博，试图找回属于自己的叙事。</p>\n<p>我写下一百个自己喜欢的词，桑榆、晚霞、壮丽，风枣、河流，当我在心里还原这些词语的样貌，对其赋予我的感情，我就晴朗一些。</p>\n<p>我看人的故事，看皮娜为爱跳舞， 瓦尔达为爱拍电影。看《吾栖之肤》里的文森特好几次为了活命说我愿意。</p>\n<p>但我和这些爱有距离，也不理解为什么那个男人那么想活下去。我和朋友们待在一起，又觉得和谁都不亲密。久而久之，总想成别人，又成不了人和人。我没能重新唤起我的活力，但我也找到了一个出路：</p>\n<p><font color=#FF0000>我在思考里，寻找意义。</font></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">“确实有很多女性的流行打扮是被男性的喜好塑造出来的,像是吊带裙,可爱的妆容,然后女权就会去分析这些现象,为的是让女性尽量的挣脱来自男性的束缚,但是随之而来又出现另外一种极端,就是有人会鄙视那些穿着打扮更符合传统男性审美的女性,觉得那样是谄媚的,俗气的,愚蠢的,所以本来是为了给女性争取更多的权利,但是却不知不觉就是让女性的可选择的更少了”</span><br><span class=\"line\"></span><br><span class=\"line\">“我发现一种现象,就是人们在认同一种高级审美的人,很容易展现出一种否定所谓低等的作品的姿态,比如音乐上,旅行团在比赛里唱玩具?,就被评价比较肤浅,然后他们自己是说这是他们做出来觉得听着很快乐的歌,这,其实我感觉这里就有做音乐的初心和比赛的不兼容,因为很多比赛是要在限定时间内展示你的影响力,所以它需要格局,需要情怀,需要创新,那这个时候讨论世界,讨论苦难,做的更加复杂就更会被肯定吗?如果你单纯是为了自己开心做了简单快乐的音乐,或者你暂时只掌握了常用的和弦,那你在比赛里其实是不容易被承认的,这当然是一套相对合理的标准,但是如果平常也是用比赛的这套标准去看作品,我感觉有很多闪光的东西会被忽略.我蛮喜欢李如一说过的一句话,她是说用对待高美的态度对待低美的文化产品,以及用看低美的态度去看高美的文化产品.她之所以在这里强调高美低美其实是为了消除这条界限,让我们在认同一个东西的时候,目的是为了彰显自己的审美还是阐述观点,也是需要我们去审视的.”</span><br></pre></td></tr></table></figure>\n\n<p><font color=#FF0000>思考和辨析虽然让我感觉到了理性的愉悦，却让我掉进了另一个困境，当我谈论越来越多的理论，对人抽丝剥茧的分析，我能敏锐的发现自己在观点上和别人有哪些不同，也能更轻易地辨别出一个人身上我不喜欢的部分。我本来是抱着连接在一起的目的，现在却竖起越来越高的墙，我和人逐渐分开。</font> 但还好我的高墙是四处透风的，光也从缝隙里透过来。</p>\n<p>有一天我在改《西方的起源-古希腊经典选读》的稿子，那是第十五集。徐贲在谈埃斯库罗斯的戏剧《波斯人》，在这部剧里波斯大流士的灵魂被波斯太后请了出来。而他在听说了希波战争之后，指责波斯人为什么要主动攻击希腊。他说不要看不起眼前的幸福。想要的太多，反而会浪费大量的人力物力。</p>\n<p><font color=#FF0000>「不要看不起眼前的幸福」</font>，我突然就被这句话触动了。一直以来我都在寻找更深刻的叙述，更特别的快乐，更亲密的关系，更纯粹的生活。而对于真实发生在自己身边的好，却无动于衷。别人要对我多掏心掏肺我才会觉得他是真诚的呢？世人要展现出多少的好，我才相信他们是友善的呢？我又要过多抽象的生活，才会认同自己的价值呢？</p>\n<p>带着新的认知去看世界，我感激朋友送给我的馈赠。听见杏鲍菇在烤盘上神奇的响声，会感到幸福。走过地下通道，一位爷爷拉琴唱歌剧，这是人生的奇遇。在后海和自由的人们一起合唱周杰伦，一起跳舞，被生活打动。</p>\n<p>以及上个月我参加了一个即兴配乐的诗会，其实在分享诗歌之前，我还提到了最近一直在看的动画《海马》，那是一个记忆可以数据化的世界，有钱的人可以购买一个叫做「chip」的芯片来备份记忆，然后通过购买新的身体让自己永生永世的活下去。但是落魄的人就很惨，有人会因为贫穷为了家人卖掉自己的身体，或者卖掉自己音乐的记忆，书的记忆，愉悦的记忆。我们要追问是哪种异常的逻辑和残酷的环境让有一些人需要做出那样的选择。而除了这个我还看到失去了愉悦的记忆之后，人也变了，他不再是原来的还怀有希望和善良的自己，所剩下的只是仇恨，只能看见痛苦。我并不想说去逃避痛苦，但是我们必须保全自己。</p>\n<p>从古希腊的悲剧里习得了智慧和承认现实，你不希望那是真的，但那就是真的。世界已经把能给的都给我了，他也一直会以好坏交杂的混沌状态存在下去。理想主义的我看不见身边的好，也不愿意承认世界有坏的一面。就算是到了记忆可以数据化的高科技世界，<font color=#FF0000>我们还是要处理老问题：人的寂寞，贫穷，童年的悲伤，对爱的渴望。</font></p>\n<p>有一位我心爱的朋友，曾经写下过这样一段话：<font color=#FF0000>回想过去的日子，一心要走在求生道路上。其实所走的都是同一条老路，不过是重蹈自我满足的覆辙。人不可能一劳永逸的离开，一切都很相似。重复出走只是意味着数月或者数年以后，再次精疲力尽的在新的废墟上醒来。</font></p>\n<p>我想在这段话后面再加上一段：<font color=#FF0000>我知道我一定会在某次醒来的时候，再次面对眼前的废墟。这种平静的绝望或许会让我怀疑活着的意义。但是它的存在恰恰反向证明了我对于生的渴望。死亡从来不是我的第一选择，活着才是，只要我们还在挣扎，这就会成为我们最有力量的部分。到时候我去另外一个废墟找你，我们相互拯救。&lt;\\font&gt;</p>\n","categories":["写作","文","播客:《看理想电台》"],"tags":["死亡","眼前的幸福"]},{"title":"如何在 Go 中优雅的处理和返回错误——函数内部的错误处理","url":"/2022/05/31/%E5%A6%82%E4%BD%95%E5%9C%A8-Go-%E4%B8%AD%E4%BC%98%E9%9B%85%E7%9A%84%E5%A4%84%E7%90%86%E5%92%8C%E8%BF%94%E5%9B%9E%E9%94%99%E8%AF%AF%E2%80%94%E2%80%94%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E7%9A%84%E9%94%99%E8%AF%AF%E5%A4%84%E7%90%86/","content":"<p>在使用 Go 开发的后台服务中，对于错误处理，一直以来都有多种不同的方案，本文探讨并提出一种从服务内到服务外的错误传递、返回和回溯的完整方案，还请读者们一起讨论。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"问题提出\"><a href=\"#问题提出\" class=\"headerlink\" title=\"问题提出\"></a>问题提出</h3><p>在后台开发中，针对错误处理，有三个维度的问题需要解决：</p>\n<ul>\n<li>函数内部的错误处理: 这指的是一个函数在执行过程中遇到各种错误时的错误处理。这是一个语言级的问题</li>\n<li>函数/模块的错误信息返回: 一个函数在操作错误之后，要怎么将这个错误信息优雅地返回，方便调用方（也要优雅地）处理。这也是一个语言级的问题</li>\n<li>服务/系统的错误信息返回: 微服务/系统在处理失败时，如何返回一个友好的错误信息，依然是需要让调用方优雅地理解和处理。这是一个服务级的问题，适用于任何语言</li>\n</ul>\n<p>针对这三个维度的问题，笔者准备写三篇文章一一说明。首先本文就是第一篇：<strong>函数内部的错误处理</strong></p>\n<h3 id=\"高级语言的错误处理机制\"><a href=\"#高级语言的错误处理机制\" class=\"headerlink\" title=\"高级语言的错误处理机制\"></a>高级语言的错误处理机制</h3><p>一个面向过程的函数，在不同的处理过程中需要 handle 不同的错误信息；一个面向对象的函数，针对一个操作所返回的不同类型的错误，有可能需要进行不同的处理。此外，在遇到错误时，也可以使用断言的方式，快速中止函数流程，大大提高代码的可读性。</p>\n<p>在许多高级语言中都提供了 <code>try ... catch</code> 的语法，函数内部可以通过这种方案，实现一个统一的错误处理逻辑。而即便是 <code>C</code> 这种 “中级语言”，虽然没有 <code>try catch</code>，但是程序员也可以使用宏定义配合 <code>goto LABEL</code> 的方式，来实现某种程度上的错误断言和处理。</p>\n<h3 id=\"Go-的错误断言\"><a href=\"#Go-的错误断言\" class=\"headerlink\" title=\"Go 的错误断言\"></a>Go 的错误断言</h3><p>在 Go 的情况就比较尴尬了。我们先来看断言，我们的目的是，仅使用一行代码就能够检查错误并终止当前函数。</p>\n<p>由于没有 <code>throw</code>、没有宏，如果要实现一行断言，有两种方法。</p>\n<h4 id=\"方法一：单行-if-return\"><a href=\"#方法一：单行-if-return\" class=\"headerlink\" title=\"方法一：单行 if + return\"></a>方法一：单行 if + return</h4><p>第一种是把 <code>if</code> 的错误判断写在一行内，比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123; <span class=\"keyword\">return</span> err &#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法有值得商榷的点：</p>\n<ul>\n<li>虽然符合 Go 的代码规范，但是在实操中，if 语句中的花括号不换行这一点还是非常有争议的，并且笔者在实际代码中也很少见到过</li>\n<li>代码不够直观，大致浏览代码的时候，断言代码不显眼，而且在花括号中除了 <code>return</code> 之外也没法别的了，原因是 Go 的规范中强烈不建议使用 <code>;</code> 来分隔多条语句（<code>if</code> 条件判断除外）</li>\n</ul>\n<p>因此，笔者强烈不建议这么做。</p>\n<h4 id=\"方法二：panic-recover\"><a href=\"#方法二：panic-recover\" class=\"headerlink\" title=\"方法二：panic + recover\"></a>方法二：panic + recover</h4><p>第二种方法是借用 <code>panic</code> 函数，结合 <code>recover</code> 来实现，如以下代码所示：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeProcess</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> e := <span class=\"built_in\">recover</span>(); e != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            err = e.(error)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    assert := <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">(cond <span class=\"keyword\">bool</span>, e error)</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> !cond &#123;</span><br><span class=\"line\">            <span class=\"built_in\">panic</span>(e)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    err = DoSomething()</span><br><span class=\"line\">    assert(err == <span class=\"literal\">nil</span>, fmt.Errorf(<span class=\"string\">&quot;DoSomething() error: %w&quot;</span>, err))</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方法好不好呢？我们要分情况看：</p>\n<p>首先，panic 的设计原意，是在当程序或协程遇到严重错误，完全无法继续运行下去的时候，才会调用（比如段错误、共享资源竞争错误）。这相当于 Linux 中 FATAL 级别的错误日志，用这种机制，仅仅用来进行普通的错误处理（ERROR 级别），杀鸡用牛刀了。</p>\n<p>其次，panic 调用本身，相比于普通的业务逻辑的系统开销是比较大的。而错误处理这种事情，可能是常态化逻辑，频繁的 panic - recover 操作，也会大大降低系统的吞吐。</p>\n<p>但是话虽这么说，使用 panic 来断言的方案，虽然在业务逻辑中基本上不用，但在测试场景下则是非常常见的。测试嘛，用牛刀有何不可？稍微大一点的系统开销也没啥问题。对于 Go 来说，非常热门的单元测试框架 goconvey 就是使用 panic 机制来实现单元测试中的断言，用的人都说好。</p>\n<h4 id=\"结论建议\"><a href=\"#结论建议\" class=\"headerlink\" title=\"结论建议\"></a>结论建议</h4><p>综上，在 Go 中，对于业务代码，笔者不建议采用断言，遇到错误的时候建议还是老老实实采用这种格式：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> err := DoSomething(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>而在单测代码中，则完全可以大大方方地采用类似于 <code>goconvey</code> 之类基于 panic 机制的断言。</p>\n<h3 id=\"Go-的-try-…-catch\"><a href=\"#Go-的-try-…-catch\" class=\"headerlink\" title=\"Go 的 try … catch\"></a>Go 的 try … catch</h3><p>众所周知，Go（当前版本 1.17）是没有 <code>try ... catch</code> 的，而且从官方的态度而言，短时间内也没有明确的计划。但是程序员有这个需求呀。这里也催生出了集中解决方案</p>\n<h4 id=\"defer-函数\"><a href=\"#defer-函数\" class=\"headerlink\" title=\"defer 函数\"></a>defer 函数</h4><p>笔者采用的方法，是将需要返回的 <code>err</code> 变量在函数内部全局化，然后结合 <code>defer</code> 统一处理：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeProcess</span><span class=\"params\">()</span> <span class=\"params\">(err error)</span></span> &#123; <span class=\"comment\">// &lt;-- 注意，err 变量必须在这里有定义</span></span><br><span class=\"line\">    <span class=\"keyword\">defer</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 这下面的逻辑，就当作 catch 作用了</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> errors.Is(err, somepkg.ErrRecordNotExist) &#123;</span><br><span class=\"line\">            err = <span class=\"literal\">nil</span>        <span class=\"comment\">// 这里是举一个例子，有可能捕获到某些错误，对于该函数而言不算错误，因此 err = nil</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> errors.Like(err, somepkg.ErrConnectionClosed) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...            // 或者是说遇到连接断开的操作时，可能需要做一些重连操作之类的；甚至乎还可以在这里重连成功之后，重新拉起一次请求</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// ...</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err = DoSomething(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这种方案要特别注意变量作用域问题：</p>\n<p>比如前面的 <code>if err = DoSomething(); err != nil &#123;</code> 行，如果我们将 <code>err = ...</code> 改为 <code>err := ...</code>，那么这一行中的 <code>err</code> 变量和函数最前面定义的 <code>(err error)</code> 不是同一个变量，因此即便在此处发生了错误，但是在 defer 函数中无法捕获到 err 变量了。</p>\n<p>在 <code>try ... catch</code> 方面，笔者其实没有特别好的方法来模拟，即便是上面的方法也有一个很让人头疼的问题：defer 写法导致错误处理前置，而正常逻辑后置了。</p>\n<h4 id=\"命名的错误处理函数\"><a href=\"#命名的错误处理函数\" class=\"headerlink\" title=\"命名的错误处理函数\"></a>命名的错误处理函数</h4><p>要解决前文提及的 defer 写法导致错误处理前置的问题，有第一种解决方法是比较常规的，那就是将 defer 后面的匿名函数改成一个命名函数，抽象出一个专门的错误处理函数。这个时候我们可以将上一段函数进行这样的改造：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeProcess</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err = DoSomething(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> unifiedError(err)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">unifiedError</span><span class=\"params\">(err error)</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> errors.Is(err, somepkg.ErrRecordNotExist) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">nil</span>        <span class=\"comment\">// 有可能捕获到某些错误，对于该函数而言不算错误，因此 err = nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> errors.Like(err, somepkg.ErrConnectionClosed) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> fmt.Errorf(<span class=\"string\">&quot;handle XXX error: %w&quot;</span>, err)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> err</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样就舒服一些了，至少逻辑前置，错误处理后置。不过读者肯定会发现——这不是什么语言都可以这么搞嘛？诚然，这怎么看都不像是对 <code>try ... catch</code> 的模拟,但这种方法依然很推荐，特别是错误处理代码很长的时候。</p>\n<h4 id=\"goto-LABEL\"><a href=\"#goto-LABEL\" class=\"headerlink\" title=\"goto LABEL\"></a>goto LABEL</h4><p>理论上，我们可以通过 <code>goto</code> 语句，将错误处理后置，比如：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">SomeProcess</span><span class=\"params\">()</span> <span class=\"title\">error</span></span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> err = DoSomething(); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">goto</span> ERR</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">ERR:</span><br><span class=\"line\">    <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>对 C 语言比较熟悉的同学可能会觉得很亲切，因为在 Linux 内核中就有大量这种写法。这种写法呢，笔者其实说不出具体不好的地方，但是这个看起来很像 C 的写法，其实限制很多，反而比起 C 而言，需要注意的地方也更多：</p>\n<ul>\n<li>仅限于 ANSI-C 的话，要求所有的局部变量都需要前置声明，这就避免了因为变量作用域而带来的同名变量覆盖；但 Go 需要注意这个问题。</li>\n<li>C 支持宏定义，配合前文可以实现断言，使得错误处理语句可以做得比较优雅；而 Go 不支持</li>\n<li>Go 经常有很多匿名函数，匿名函数无法 <code>goto</code> 到外层函数的标签，这也限制了 <code>goto</code> 的使用</li>\n</ul>\n<p>不过笔者倒也不是不支持使用 <code>goto</code>，只是觉得在现有机制下，还是使用前两种模式比较符合 Go 的习惯。</p>\n","categories":["技术","Go"],"tags":["Go","Go 异常处理"]},{"title":"小说：《月亮与六便士》","url":"/2020/12/15/%E5%B0%8F%E8%AF%B4%EF%BC%9A%E3%80%8A%E6%9C%88%E4%BA%AE%E4%B8%8E%E5%85%AD%E4%BE%BF%E5%A3%AB%E3%80%8B/","content":"<p><strong>第十五章</strong></p>\n<p>我总觉得有些人没有出生在正确的地方。偶然的命运将他们丢到特定的环境里，但他们总是对某个不知在何处的家乡念念不忘。他们是生身之地的过客，从孩提时代就熟悉的林荫小径，或者曾在其中玩耍过的热闹街道，都无非是人生路上的驿站。他们始终把亲友视如陌路，对生平仅见的环境毫无感情。<a id=\"more\"></a>也许正是这种疏离感推动他们远走高飞，去寻找某种永恒的东西，某片能让他们眷恋的土地。也许正是某种藏的很深的寻根意识，敦促这些天涯游子重返他们的祖先在湮远的太初变已离开的故地。有时候，人会偶然造访某个地方，却神秘地感到这里就是他的归宿。这里就是他朝思暮想的故乡，尽管周边的环境他从未见过，尽管当地的居民素未谋面，他却愿意安顿下来，仿佛这些都是他生来便已熟知的。在这里他的心终于不再躁动。</p>\n<p>我给缇亚蕾讲了个故事，主角是我在圣托马斯医院认识的。他是个犹太人，叫做亚伯拉罕，当时是个头发金黄、特别壮实的年轻人，生性很腼腆，也非常谦虚，但他的才华很出众。他考取了医院的奖学金，读书五年期间拿遍了所有能拿的奖励。他同时被委任为内科医生和外科医生。他的一出色是大家公认的。最后他被选进了医院的管理层，前途一片光明。按照常理来说，他肯定会上升到他这个职业的顶端。名誉和财富正在等着他。在履新之前，他想去度假，由于手头并不宽裕，他以外科医生的身份登上了一艘开往地中海东岸的不定期货轮。这艘货轮通常并不配备大夫，但圣托马斯医院有个年长的外科医生认识这条航线的经理，经理卖了个人情，特准亚伯拉罕上船。</p>\n<p>几个星期后，医院管理层收到他的辞呈，他放弃了那个令人XX的职位。医院的同事感到极其震惊，各种凭空猜测的谣言纷纷传开。每当有人做了不和常理的事情，他的熟人就会替他设想出最离奇的动机。但医院早就有人对亚伯拉罕的位子虎视眈眈，所以亚伯拉罕也就被遗忘了。人们再也没有听到他的消息。他消失了。</p>\n<p>大概十年后的某个早晨，我乘坐的轮船即将停靠在亚历山大港，在上岸之前，我和其他旅客依照要求排队接受医生的检查。那医生长得很壮，穿着破旧的衣服，当他摘掉帽子之后，我发现他的头发差不多全掉光了。我觉得我以前见过他。突然间我想起来了。</p>\n<p>“亚伯拉罕。“我说。</p>\n<p>他转头看着我，满脸疑惑，然后他认出我，紧紧的抓着我的手。互道惊喜后，听说我要在亚历山大港过夜，他邀请我到英国俱乐部和他共进晚餐。那晚再次见面时，我说我完全没想到居然会在那里碰见他。他的职位非常低微，看他的样子也有点寒酸。然后他跟我说起了他的故事。当初启程到地中海度假时，他其实是准备回到伦敦，去圣托马斯医院履任的。那天早晨，货轮在亚历山大港靠岸，他在甲板上观察这座城市，在阳光下白花花的，还有码头上的人群，他看到了穿着褴褛长跑的本地人，苏丹来的黑人，吵吵嚷嚷、成群结队的希腊人和意大利人，戴着红色菲斯帽的、深情肃穆的土耳其人，灿烂的阳光和蓝天的天穹，他产生了某种感触。他无法描述这种感受。就像是一声惊雷，他说，但随即又推翻了这个说法，改口说是一种天启。似乎有什么东西触动了他的心灵，于是他突然觉得非常快乐，有一种无拘无束的美妙感受。他觉得他回到家乡了，不用一分钟就决定他将会在亚历山大港度过他的余生。他离开那艘船没遇到什么困难，不到二十四个小时，他已经带着所有的行李，出现在海岸上。</p>\n<p>“船长肯定觉得你疯掉了。”我笑着说。</p>\n<p>“我不在乎任何人的看法。其实作出决定的不是我，而是我内心某种更为强大的力量。当时我环顾四周，想着要找家希腊人开的小旅馆住下来，我感觉我知道哪里能找着。说了你也许不信，我是直接走过去的，当我看见那个旅馆的时候，我立刻就认出它来了。“</p>\n<p>”你以前来过亚历山大港吗？“</p>\n<p>”没有，我从来没有离开英国。“</p>\n<p>他很快就进入了当地的海关部门，随后一直在那里上班。</p>\n<p>”你从来没后悔过吗？“</p>\n<p>”没有，完全没有。我赚的钱只够过日子，不过我很满足。我别无所求，只想在这里住到老死。我的生活很美好。“</p>\n<p>我翌日就离开了亚历山大港，也忘了亚伯拉罕的事情，直到不久之前才又想起来。当时我去另外一个当医生的老朋友家吃晚饭，他叫阿列克·卡迈克尔，因为短期休假回到英国。我偶然在马路上撞见他，并向他道贺，由于在战争中的杰出表现，他刚刚被皇室授予了爵士的头衔。我们都说要找个晚上好好叙叙旧，当我答应到他家吃晚饭时，他说他不会再请其他人，以便我们能够促膝长谈。他在安妮女王街有座漂亮的老房子，他是个很讲格调的人，把房子布置的很让人称羡。在餐厅的墙壁上我看到一幅秀丽的贝洛托，还有两幅让我很嫉妒的索范尼。在他的妻子——是个很高的美女，穿着金色的衣服——起身告退之后，我笑着说他现在的生活条件，跟我们以前在医院当学生时真是不可同日而语。当时我们到威斯敏斯特桥大街某家破落的意大利餐厅吃顿晚饭都会觉得太过奢侈。阿列克·卡迈克尔如今是六家医院的管理人员，我估计他每年的收入有一万英镑，而这次受封为爵士也只是他飞黄腾达的起点，他将来肯定还会得到更多荣誉。</p>\n<p>”我过的挺好，“他说，”但说来奇怪，我能过上这种生活，还是因为那次运气好。“</p>\n<p>”你这话什么意思呢？“</p>\n<p>”嗯，你记得亚伯拉罕吗？本来大有前途的人是他。当学生的时候，他各方面都比我优秀。他拿了许多我想拿又拿不到的奖励和奖学金。我总是争不过他。如果他继续努力，我今天的地位肯定是他的。那家伙做外科手术是个天才。谁也比不上他。在他被提拔为托马斯的主任医生之后，我完全没有指望进入医院的管理层。我顶多只能成为全科医生，全科医生获得晋升的机会有多大你是知道的。但亚伯拉罕却辞职了，我得到他的职位。那给了我机会。“</p>\n<p>”确实是这样的。“</p>\n<p>”这纯粹是运气。我觉得亚伯拉罕这人有点古怪。可怜的家伙，他整个人彻底废掉了。他在亚历山大港的医院找了份可怜的工作——好像是当检疫员还是什么。我听说他娶了个丑陋的希腊老女人，生了六七个邋遢XX的兔崽子。实际上，我觉得人光有脑子不够的。更重要的是性格。亚伯拉罕没有性格。“</p>\n<p>亚伯拉罕没有性格？我想只有非常有性格的人，才会在发现别的生活方式更有意义之后，经过半个小时的考虑，就毅然抛弃原本蒸蒸日上的事业。而事后从来不懊悔突然踏出这一步，那就更有性格了。但我什么也没说，阿列克·卡迈克尔继续发表他的感慨：</p>\n<p>”当然，如果我假装为亚伯拉罕感到惋惜，那未免也太矫情了。毕竟这件事情对我有很大的帮助。“他使劲地抽着手上那根花冠牌雪茄，志得意满地喷出几个烟圈。”但如果这跟我个人没有关系的话，我会为他浪费自己的才华而感到遗憾的。一个人竟然如此糟践自己，这实在是很让人痛心疾首的。”</p>\n<p>我很想知道亚伯拉罕是否真的糟践了自己。难道做自己最想做的事，生活在让你感到舒服的环境里，让你的内心得到安宁就是糟践自己吗？难道成为年入上万英镑的外科医生、娶得如花美眷就算是成功吗？我想这取决于你如何看待生活的意义，取决于你认为你应该对社会做出什么贡献，应该对自己有什么要求。但我再次闭上了嘴巴，因为我有什么资格和一位爵士争论呢？</p>\n","categories":["写作","文"],"tags":["《月亮与六便士》","毛姆"]},{"title":"彻底搞懂如何使用Hexo+GitHubPages搭建个人博客","url":"/2020/07/29/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<h1 id=\"使用Hexo-GitHubPages搭建个人博客\"><a href=\"#使用Hexo-GitHubPages搭建个人博客\" class=\"headerlink\" title=\"使用Hexo+GitHubPages搭建个人博客\"></a><strong>使用Hexo+GitHubPages搭建个人博客</strong></h1><h2 id=\"GitHubPages设置\"><a href=\"#GitHubPages设置\" class=\"headerlink\" title=\"GitHubPages设置\"></a><strong>GitHubPages设置</strong></h2><hr>\n<h3 id=\"git安装及配置\"><a href=\"#git安装及配置\" class=\"headerlink\" title=\"git安装及配置\"></a><strong>git安装及配置</strong></h3><a id=\"more\"></a>\n<p>搭建一个Hexo+GithubPages博客需要做的第一步就是在GitHub上创建一个仓库。在这之前，需要在你的电脑上安装git。无论是Mac、Linux、Windows系统中的哪一种，Google上都能找到详细的<br>安装教程说明，建议直接参考<strong>git官网</strong>的安装教程。</p>\n<p>初次运行git前，你需要做一些配置：</p>\n<ul>\n<li><p><strong>设置Git用户信息</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name “your_name”</span><br><span class=\"line\">$ git config --global user.email your_email</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>生成SSH Key公钥</strong></p>\n<p>  查看当前用户的目录下是否存在.ssh目录，如果存在进入到此目录下检查是否存在id_rsa和id_rsa.pub两个文件，这两个文件分别对应的是公钥和私钥，如果存在直接跳过此步，否则输入下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C “your_github_email”</span><br></pre></td></tr></table></figure>\n<p>  其中**-t type:指定你要生成的密钥类型**，-C commit:提供一个新的注释。然后一路回车，直到生成一个矩形的图案为止。记下生成的这串字符，这就是后面需要给GitHub配置的公钥。</p>\n</li>\n</ul>\n<h3 id=\"配置GitHub中的公钥\"><a href=\"#配置GitHub中的公钥\" class=\"headerlink\" title=\"配置GitHub中的公钥\"></a><strong>配置GitHub中的公钥</strong></h3><p>首先需要在**<a href=\"https://github.com/\" title=\"GitHub官网\">GitHub官网</a>**上注册一个账号，GitHubPages的创建需要一个GitHub的账号，这一步就直接跳过。如果有GitHub账号，直接登录就可以。</p>\n<p>登陆到后Github后，如果你是初次申请，需要先配置SSH，按照下述步骤进行操作：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/jxXEoAPVQf42Crb.png\"></p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/ip9B6nrZXIouOWj.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>Setp1:点击头像</p>\n</li>\n<li><p>Setp2:选择Settings</p>\n</li>\n<li><p>Setp3:选择侧边栏的SSH and GPG keys</p>\n</li>\n<li><p>Setp4:右上角点击New SSH key按钮</p>\n</li>\n</ul>\n<p>此时会看到如下界面，Titlt输入框中填写的是你要输入得SSH公钥的名称。我这里填的是”MacHome“，就是指我家里Mac电脑的SSH公钥。Key的输入框中需要填写刚才在本机生成公钥串：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/2HNPYM3dJQm91pF.png\" alt=\"image.png\"></p>\n<p>如果刚才你讲命令行窗口给关闭了，也不要紧，输入命令入cat ~/.ssh/id_rsa.pub就可以查看你刚生成的公钥</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/NJTWBzU256IArOh.png\" alt=\"image.png\"></p>\n<p>Key中复制查询到的SSH公钥。点击Add SSH key，这里需要你再次输入密码来确认。成功后会生成如下界面：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/pi7VC3Pzavh94sU.png\" alt=\"image.png\"></p>\n<h3 id=\"创建GitHub-Pages仓库\"><a href=\"#创建GitHub-Pages仓库\" class=\"headerlink\" title=\"创建GitHub Pages仓库\"></a><strong>创建GitHub Pages仓库</strong></h3><p>配置好git和GitHub后，需要在GitHub上创建Github Pages服务，具体步骤如下图：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/waoXLT9lj4nDZBc.png\" alt=\"image.png\"></p>\n<p>在GitHub首页的顶部菜单选择<strong>“+”号按钮，并且点击New respository选项</strong>。之后会出现下面的页面:</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/IEyjO8Kt7sumphC.png\" alt=\"image.png\"></p>\n<p>一定要注意：在Repository  name输入框中你需要填入你的【Github用户名】，这一点非常重要。因为这样才能保证你建立的是GithubPages页面而不是其他的代码仓库。另外一点记得勾选Initialize this repository with a README选项。这个时候你在浏览器输入https://<span></span>your_github_name.github.io后，可以看到一个简陋的界面，那么说明你已经成功开启了GithubPages服务了。下面需要做的就是安装Hexo，并且使用Hexo来生成Blog站点。</p>\n<h2 id=\"安装Hexo并初始化博客\"><a href=\"#安装Hexo并初始化博客\" class=\"headerlink\" title=\"安装Hexo并初始化博客\"></a><strong>安装Hexo并初始化博客</strong></h2><hr>\n<p>安装Hexo的过程非常的简单，只需要几行命令就可以轻松安装并创建Hexo框架，前提是已经安装好了Node.js。Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown(或其他渲染引擎)解析文章，Node.js所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。官方建议Node.js版本不低于8.10，建议使用Node.js 10.0及以上版本。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><strong>安装Node.js</strong></h3><p>安装Node.js请参照**<a href=\"https://nodejs.org/en/\">官网指南</a>**。安装完成后在终端输入以下命令，检查安装是否成功及Node.js对应的版本号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ node —version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a><strong>安装Hexo</strong></h3><p>安装Hexo也非常的简单，使用npm安装Hexo只需要一句命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化创建博客\"><a href=\"#初始化创建博客\" class=\"headerlink\" title=\"初始化创建博客\"></a><strong>初始化创建博客</strong></h3><ul>\n<li><p>创建站点根目录</p>\n<p>  创建一个默认主题的博客，首先需要初创建一个博客文件夹，注意这个文件夹的名字最好要和你刚才创建的GitHubPages的地址一致也就是your_github_name.github.io。这个文件夹以后也统称为站点根目录。</p>\n</li>\n<li><p>初始化站点根目录</p>\n<p>  使用以下命令初始化文件夹，Hexo会在指定的这个站点根目录中创建所需要的文件。然后进入到此文件夹下，安装npm所依赖的库文件。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir &lt;folder&gt;  #创建站点根目录</span><br><span class=\"line\">$ cd &lt;folder&gt;  #进入到站点根目录</span><br><span class=\"line\">$ hexo init &lt;folder&gt;  #使用Hexo初始化站点根目录</span><br><span class=\"line\">$ npm install  #安装npm所依赖的文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>创建完成后的目录结构如下图：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/MVYlJA6NUnjCvIK.png\" alt=\"image.png\"></p>\n<p>先不着急分析每个目录是做什么的，博客此时已经创建好了，只需要在命令行输入以下命令（也先不用理会这两行命令的含义，后面会做解释），就可以在本地预览已生成的博客了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate # 生成博客</span><br><span class=\"line\">$ hexo server # 本地预览</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，在地址栏输入http://<span></span>localhost:4000，先看下此时的博客是什么样子的。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/HcVbMwNkrjRFquz.png\" alt=\"image.png\"></p>\n<p>此时，可以看到一个默认主题的博客已经生成了，并可以在本地访问它。但目前距离计划中的博客还存在一些差距，具体如下：</p>\n<ul>\n<li><p>博客的主题和样式并不是理想中的主题，需要选择合适的主题；</p>\n</li>\n<li><p>目前只能在本地访问，其他人还访问不到这个博客，需要将其部署到GitHubPages上；</p>\n</li>\n<li><p>通过个性域名来访问博客</p>\n</li>\n</ul>\n<h2 id=\"Hexo生成站点目录结构\"><a href=\"#Hexo生成站点目录结构\" class=\"headerlink\" title=\"Hexo生成站点目录结构\"></a><strong>Hexo生成站点目录结构</strong></h2><hr>\n<p>在完成以上还未完成的目标前，回到上一节还未解释的目录结构。在了解了目录结构中每个文件夹的含义及作用后，才能更好地来改造它，达成以上目标。</p>\n<p>我们再来看一下这个目录结构，命令行打印出来：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/BX7HboYGOiycnlJ.png\" alt=\"image.png\"></p>\n<p>细心的你可能已经发现，此时的文件目录下比之前多出来一个文件夹public/和一个文件db.json。执行了hexo generate和hexo server这两步操作产生了public/文件夹和db.json文件。实际上，正是在执行了hexo generate命令之后，将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件。下面来介绍一下使用Hexo生成的跟站点目录结构。</p>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"config.yml\"></a><strong>config.yml</strong></h3><p>_config.yml是整个博客的配置文件，至于每项配置参数可以**<a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo官网文档</a>**有详细的介绍。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/1rot7Y4eUhSKJ68.png\" alt=\"image.png\"></p>\n<p>目前博客只能在本地浏览，还没有部署GitHubPages上。将博客发布到GitHubPages最直接的方式：使用git将本地博客文件夹关联到GitHub的远程仓库，并且把本地文件push到对应的仓库中。Hexo提供了一种更简便地方式，只需要在_config.yml中作相应的配置，通过命令行命令就可以很方便地把静态文件部署到对应的仓库中。</p>\n<p>打开根站点文件夹下的_config.yml博客配置文件，在deployment配置项下设置如下参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:yourname&#x2F;yourname.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<p>安装以下插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>\n<p>执行以下命令发布本地博客到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>然后在浏览器中输入GitHubPages的地址：<a href=\"https://your_github_name.github.io/\">your_github_name.github.io</a> ，你会发现刚才你在本地生成的博客已经可以在互联网上访问到了。但此时使用的依然是GitHub加仓库名称的URL来访问博客，当输入我们自己的个性域名访问时发现还是404错误，因为此时还没有做域名的解析配置，下一章节会具体讲解如果配置个性域名。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a><strong>package.json</strong></h3><p>package.json是应用程序信息，打开此文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class=\"line\">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class=\"line\">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;4.2.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^2.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个json文件，可以得到hexo的版本信息，所有安装的依赖程序。并且在scripts字段下发现了几个刚才执行的命令，其实之前执行的几个命令实际是执行了对应的脚本。以下列出了Hexo中最重要的几个命令及其缩略形式，记住以下几个命令，就可以基本完成Hexo的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean  &#x3D; hexo c # 清除本地缓存，也就是清除public&#x2F;文件夹和db.json文件。</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate &#x3D; hexo g # 将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server &#x3D; hexo s # 开启本地调试模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy &#x3D; hexo d # 将本地资源部署到GithubPages</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a><strong>scaffolds</strong></h3><p>scaffolds是模板文件夹，当创建新的文章时，Hexo会根据scaffold里的不同模板来建立文件。什么意思呢？当使用Hexo新建一篇文章时使用的命令是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;    </span><br></pre></td></tr></table></figure>\n<p>一般都会忽略[layout]可选参数，此时默认为post，也可以通过_config.yml中的default_layout参数来指定默认布局。</p>\n<p>继续打开此文件夹，发现有三个.md文件：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/3suvYOcgjaFA7XR.png\" alt=\"image.png\"></p>\n<p>其实这是Hexo的三种默认布局post、page和draft。使用Hexo创建三种模板类型的文件时，被创建的文件会被保存到不同的路径。而我们自定义的其他布局和post相同，都会保存在source/_posts文件夹下。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/wNsK7qJaMIGj8Ez.png\" alt=\"image.png\"></p>\n<p>由此可见其对应的保存路径关系如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">布局</th>\n<th align=\"center\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">post</td>\n<td align=\"center\">source/_post</td>\n</tr>\n<tr>\n<td align=\"center\">page</td>\n<td align=\"center\">source/</td>\n</tr>\n<tr>\n<td align=\"center\">draft</td>\n<td align=\"center\">source/_draft</td>\n</tr>\n<tr>\n<td align=\"center\">自定义</td>\n<td align=\"center\">source/_post</td>\n</tr>\n</tbody></table>\n<p>关于模板及文章发布相关的详细知识点建议您参考**<a href=\"https://hexo.io/zh-cn/docs/writing\">官网文档</a>**。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a><strong>source</strong></h3><p>source资源文件夹，是存放用户资源的地方。除post文件夹除外，开头以_（下划线）命名的文件/文件夹或隐藏文件都会在generate时被忽略。Markdown和HTML文件夹会被解析到public文件夹下，其它文件格式的文件会被直接拷贝过去。</p>\n<h3 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a><strong>themes</strong></h3><p>themes是主题文件夹。Hexo会根据设置的主题来生成静态的页面，刚才说到<strong>使用Hexo init生成的初始化站点的主题可能并不是你预估的样子。Hexo提供了丰富的站点主题供你选择，现在先去官网提供的主题页面</strong>选取一个你喜欢的主题，下一章我们会讲解如何更换主题。</p>\n","categories":["技术"],"tags":["Hexo","GithubPages","博客"]},{"title":"拼多多事件：除了抱怨996，你真的在乎吗？","url":"/2021/01/07/%E6%8B%BC%E5%A4%9A%E5%A4%9A%E4%BA%8B%E4%BB%B6%EF%BC%9A%E9%99%A4%E4%BA%86%E6%8A%B1%E6%80%A8996%EF%BC%8C%E4%BD%A0%E7%9C%9F%E7%9A%84%E5%9C%A8%E4%B9%8E%E5%90%97%EF%BC%9F/","content":"<p><img data-src=\"https://i.loli.net/2021/01/07/ugOl8GDamv7Xxqb.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/dDijlN1nFYUkXW9.png\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">“</span><br><span class=\"line\">互联网企业对内用高工资、期权、996拷问着员工；对外，用红包、便利性拷问全社会。</span><br><span class=\"line\"> </span><br><span class=\"line\">最后他们想证明一个问题，别搞什么阳春白雪的权利和尊严，就像拼多多的回应，‘这不是资本的问题，这是社会的问题’。</span><br><span class=\"line\">”</span><br></pre></td></tr></table></figure>\n\n<p><strong><center>文 | 李厚辰 </center></strong></p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/vOKbSc82ZwUHEqN.png\" alt=\"image.png\"></p>\n<p>996已经闹了4年有余。</p>\n<p>该术语首先出自“58同城”于2016年9月流出的其内部加班通告。当然在那之前，互联网企业的加班已经是成文或不成文的一种文化。</p>\n<p>其后，随着996的概念被不同的企业提及和批判，它像一种传染病一样从互联网企业弥漫到其他领域，成为我们久久抵制而愈发严重的问题。</p>\n<p>刚摆脱所谓最难的2020不到几日，便传出年仅23岁的拼多多员工在下班路上腹痛倒地，不治身亡的新闻，其后的风波不必再复述。</p>\n<p>在这样的情况下，一个自媒体人可以做什么？可以把拼多多痛斥一番，或者把这个情况下依然认为996有其存在基础的人痛斥一番。反正找个值得恨的人或公司或群体来痛骂一阵，就像过去4年我们做的那样。</p>\n<p>这说明绝大多数人已然彻底悲观，认为除了言辞的惩罚和审判以换取一些公正的感觉，我们可能都什么都不剩了。</p>\n<p>不过，我还想再努努力。</p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/vPWqFyKdA5z3nhV.png\" alt=\"image.png\"></p>\n<p><strong><center>01.</center></strong><br><strong><center>道理和事实穷尽的无望感</center></strong></p>\n<p>关于996，我们已经产生了一些基本的信念，正是基于这些信念我们认为其不可改变，甚至会愈演愈烈。</p>\n<p>首先，确实有不少人支持，或变相支持这样的工作制度，这是由以下的几个理由构成的。</p>\n<p>高强度的工作确实会带来健康风险，但猝死的案例只是极其罕见的个例，绝大多数人会遭遇亚健康等状况。剔除那些罕见的个例，绝大多数人面临的是一个高强度竞争社会无法避免的代价，这并不特别。</p>\n<p>互联网的工作确实高薪，因此即便996，如果计算时薪，依然极有可能高于一般工作，因此只要接受，你就可以将加班时长考虑在内，你可以认为高月薪已经预支了一部分的加班工资。所以整体上，互联网的工作符合多劳多得的原则。</p>\n<p>不管如何反对996，如何设想公平的原则，<strong>在一个一切向钱的社会，高薪似乎是一个在一定时间内高于“健康”、“公平”的硬条件，这也符合功利主义的原则。</strong></p>\n<p>也就是说，如果大多数人面临一个年薪百万，但极端劳累的工作，恐怕很多人都能接受。</p>\n<p>因此如果我们的发问在于，为何有人发明年薪百万，且极端劳累的工作，为何不是年薪百万，且劳累度适中的工作，这就进入第二个问题。</p>\n<p>在第二个问题中，我们认为有一个应然世界，即工资报酬是企业间竞争的结果，而工作强度，尤其工作强度的上限是一个法律问题，应该由《劳动法》给予约束，而现在企业可以无度压榨员工恰恰是法律缺位的表现。</p>\n<p>当然，在深圳探索“特殊工时管理制度”的新闻确实为这个问题蒙上一层暧昧的色彩，进一步削减着我们对法律体系支持用工者权益的信任。</p>\n<p>再加上工会的缺位，让个体通过法律手段对抗996制度，总被理解为一种个体对抗体制，从而显得既悲壮又无可能。</p>\n<p>另一方面，996也不是互联网大厂的“特权”。</p>\n<p>不管是建筑、广告等乙方行业，项目周期中，似乎有一种行业性质自带的长时间工作基因。而其他制造业，医生教师等，虽然在他们的领域没有术语“996”，但无偿加班，甚至非高薪的无偿加班都非常普遍。</p>\n<p>所以当我们面对一个如此普遍的问题，我们心里也总会认为，问题似乎来源于一些比劳动法和互联网行业更高的问题，例如竞争的根本性，例如经济的下行，例如房价的高企。</p>\n<p>千头万绪，似乎只有求诸于“内卷”一词方可解决。所以，“过劳”就成了只能抱怨攻击，而无望解决的问题了。</p>\n<p><strong><center>02.</center></strong><br><strong><center>996，非对称制度</center></strong></p>\n<p>换个角度吧，不如从冰激凌开始。</p>\n<p>便利店销售的绝大多数冰激凌，背后都有“清真”的标识，指这款产品穆斯林也可放心食用，因为里面没有猪油。</p>\n<p>这是一个典型的非对称的例子，清真饮食习惯的人在总人口中是少数，但是他们的偏好却影响了几乎所有冰激凌。</p>\n<p>原因是他们在乎。冰激凌里放什么东西对百无禁忌的我们是无所谓的，而他们有所谓，因而少数有所谓的人，可以决定大多数人的生活形式。这就是纳西姆•尼古拉斯•塔勒布在他的名著《反脆弱》中呈现的一个重要观点。</p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/qaksmjJAuCzQ4cd.png\" alt=\"image.png\"></p>\n<center>《反脆弱：从不确定性中获益》</center>\n\n<p>996也产生于非对称。</p>\n<p>如果我们要在一个小的组织内抵制996，几乎需要所有人一致的意见，而要在一个地方推行996，只需要少数支持者就可以了。</p>\n<p>为什么呢？我们这里要明白的是，996工时制度不是一个单一体系，它脱胎于另一个制度，而另一个制度，才是这套非对称性的罪魁祸首。</p>\n<p>那就是落实到个人的KPI绩效考核。</p>\n<p>在互联网公司的读者们应该了解，只要有基于个人的KPI绩效考核，即使企业绝口不提996，长时间加班都是必然。996不过是将“搭便车者”彻底赶尽杀绝的手段罢了。</p>\n<p>而KPI绩效考核的初衷听上去很公平，即“能者多劳，多劳多得”。对于基本薪资水平已然较高的行业，即便野心不大的人，也很难提出这种制度有什么问题——你们去争那些钱，我老老实实拿我的薪资就行。毕竟你们付出更多，得到更多。</p>\n<p>单人和部门KPI就是这个非对称制度，大多数人不反对，少数人很在意。不过就是从这里开始，整个企业不得不向这个企业中最努力的人趋同。</p>\n<p>这里的原因比较庞杂，但还是很容易为我们所理解，就是一种“多劳多得，一般劳动一般获得”的均衡状态，如何变成“多劳多得，一般劳动可耻”的状态？</p>\n<p>因为企业的KPI并非评价员工为“进取型”、“稳健型”、“踏实型”，而是从A+到D-的明确价值评判。在这样的情况下，评价为D-的人当然会被当作公司表现不佳或部门表现不佳的替罪羊。</p>\n<p>也就是“一般劳动”成为阻碍他人“多劳多得”的祸端，而“多劳多得者”，成为福泽“一般劳动者”的英雄。</p>\n<p>这样的文化在企业中可以有无数种“企业文化”的面孔，<strong>让“多劳多得”不成为一个个体的自由选择，而成为一种具有强烈道德判断的，被少数“最多劳者”塑造的文化。</strong>而“最多劳者”不仅“多得”，还包括更多的荣誉、权力、晋升、尊严。</p>\n<p>因此，越是执行高绩效工资，且绩效考核落实到个人的公司，越来越长的劳动时间，所有人效法“最多劳者”就成为一种必然。</p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/tFH1aSN8KmdbD3P.png\" alt=\"image.png\"></p>\n<p>那么在这个情况下，为何还要颁布996呢？那是因为“搭便车效应”。</p>\n<p>即这个效法“过劳者”的文化和高考一样，总是一个少数人上行的独木桥，毕竟企业的高级职称是有限的，那种少数的“自愿多劳者”也不是时时刻刻都鸡血满满。</p>\n<p>尤其在一个分工极其细碎的组织，人们总是忍不住想，我稍微松懈一点，整个组织也不会因为我垮掉，当然这也是事实，这样的人就可以“搭便车”了。</p>\n<p>而搭便车会带来一种极强的不公平感，即有人可以坐享其他人的劳动成果，因而具有传染性，一旦有人明显开始搭便车，就会引得其他人效仿。</p>\n<p>这是另一种不对称，而996制度，就是为了遏制“搭便车”者的方法。</p>\n<p>所以我们发现，企业内部的文化和风气，是由少数人塑造的，少数“多劳者”会逼得所有人提高工作时间，而少数“搭便车”的人，也会有机会让所有人懒懒散散。</p>\n<p>前者逼得大家过劳工作，而后者逼得企业祭出“996工作制”，来保住前者的成果。</p>\n<p><strong><center>03.</center></strong><br><strong><center>你没那么在意996</center></strong></p>\n<p>所以，之前的一个论断是错误的，即维持“996只需要少数人，而停止996需要所有人的共识。”</p>\n<p>其实停止996，同样只需要极少数真正在意的人。我们总觉得我们是在意996的，因为我们私人时间被侵占，身体也在慢慢消耗，留给家庭和孩子的时间减少，苦不堪言，怎么会不在意？</p>\n<p>不过想想在和上司讨论升职加薪时付出的心思，争论，甚至以离职要挟，那才是真正的在意。</p>\n<p>而你可以想想你所在公司对前景最在乎，最“多劳多得”的人，他们为自己的生涯，和公司又有什么样的谈判和拉扯，这个才是真正的在意。</p>\n<p>恰恰是这样的在意，即便是很少数人，也能够塑造企业制度和文化。</p>\n<p>企业当然明白该如何平息员工对996的在意，有时候只需要一些小恩小惠，例如加班报销晚餐和打车费用。</p>\n<p>很多人会因此说服自己接受，毕竟晚高峰挤地铁回家也很难受，毕竟现在物价上涨，自己吃一顿晚餐也要不少钱。四舍五入这就像变相发了加班费，996也就不那么难以接受了。</p>\n<p>在意的东西，你会非常勉力地争取，如果争取不到，你就会报复或激烈地反对。</p>\n<p>就像很多时候公司如果不给加薪，你就会愤然离职。而996，不过像你点了一盘难吃的饭菜，你很不高兴，骂骂咧咧，但你依然会选择吃完它。</p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/c6WigEVLn4jawYf.png\" alt=\"image.png\"></p>\n<p>说到底，996是个均匀分配的负担，在公正算计上，这起码在一个企业内部是公平的。</p>\n<p>如果社会上越来越多的企业采取996，公平的负担就更少了。你开始相信这是竞争中的不得以，企业为了生存，或是适应行业的要求，那听上去更像某种坏运气，而坏运气降临，我们都不会特别在意。</p>\n<p>看上去，996是不可避免了，在不对称下，我们似乎必然面临要么走入大锅饭效率低下，要么走入996过劳工作的环境。</p>\n<p>但真的是么？</p>\n<p>在一种情况下是的，如果我们假设人工作与否，全靠收入刺激，自然重赏之下必有勇夫，有无望之人必然放弃努力。</p>\n<p>只要人必然地“算计”，我们将在一切领域和行业遭遇要么“大锅饭”，要么996的困境。</p>\n<p><strong><center>04.</center></strong><br><strong><center>算计，一场人性较量</center></strong></p>\n<p>所以人是必然算计的吗？这是互联网经济拷问全社会的一个问题。互联网企业对内用高工资、期权、996拷问着员工；对外，用红包、便利性拷问全社会。</p>\n<p>最后他们想证明一个问题，别搞什么阳春白雪的权利和尊严，就像拼多多的回应，“这不是资本的问题，这是社会的问题”。</p>\n<p>因此，这是社会的问题吗？某种程度上是。</p>\n<p>在拼多多不幸殒命的这位员工，其就职的部门，正是下一场巨大的社会实验——“社区团购”。</p>\n<p>很快，便利的送菜上门，巨大的折扣和红包，花样百出的减价方式，就会席卷全国。互联网企业都认为他们将彻底改变所有人买菜的习惯。</p>\n<p>菜市场、中间商、小业主也都被摧枯拉朽地消灭，而众巨头们，在价格战、补贴战后，会留下两三家，垄断人们最后分散的购物习惯。</p>\n<p>其代价是你平时认识的那个小店主，那个菜贩的失业，以及上游无数中间商的失业和生活的毁灭。我们会为了算计，而摧毁他们的生活吗？</p>\n<p>我想答案会有点悲观，因为我们一输再输，面对瑞幸咖啡的超低折扣，面对网购外卖的便利，面对共享单车的便利，我们从来都输。现在连抖音在网上的广告，也对抖音的内容绝口不提，而说“刷抖音能赚钱”。</p>\n<p><strong>互联网企业一直在向我们发问：是不是为了便宜和便利，你们什么代价都不管？</strong></p>\n<p>而我们的回答确实一直是：是啊，再便宜一点！再方便一点！为了便宜方便和快感，我们什么都不在乎！</p>\n<p>这位殒命的女孩，工作量有多么巨大，就代表拼多多对这个业务的期待有多大；拼多多对这个业务的期待有多大，就代表拼多多对我们算计的预期有多大，对我们对更便宜和更便利的生活的欲望之不可抵挡有多大。</p>\n<p>在这里，我还不想说这是类似“没有买卖，没有伤害”的逻辑，也不会简单地说互联网企业的过劳猝死者是我们杀死的，这太夸张了，也不是事实。</p>\n<p><strong>但意识到我们行为的外部性却非常重要。</strong></p>\n<p>假设我在一家互联网企业工作，我不能将我的“个人努力”看作一个纯粹是我与企业“多劳多得”的承诺，所以我每天拼命工作12个小时，伤害的仅仅是我的身体，和别人无关。</p>\n<p>因为我的个人努力，因为之前所谈到的外部性，将会成为对他人努力的压迫，虽然我的身体可能耗个两三年没有问题，但是我的这种行为，将会对同组一个也许身体孱弱的同事带来巨大的压力和伤害。</p>\n<p>读到这里，不少人一定觉得我的要求太苛刻，过于理想化吧？一个人自己的努力还要为他人负责？</p>\n<p>不妨仔细想想，为什么很多企业不喜欢从阿里和华为跳槽来的员工，不喜欢他们带来一种自顾自的疯狂“奋斗”？这样的外部性是存在的。</p>\n<p>在这里，我们自身的虚伪就显现出来了。如果发生在他人身上，问题就非常显著，同样的问题在我们自己身上，立马就合理起来。</p>\n<p>那么，如果这种外部性是真的，我们与互联网企业的每一笔订单，也不单单是一次商业的交付，也是对互联网企业“算计逻辑”的一次承认。</p>\n<p>我们多么疯狂地拥抱他们的算计商品，就如同一位从阿里跳槽去一家正常企业，并玩命加班的人一样，<strong>输出着算计。</strong></p>\n<p>互联网同样被少数人塑造。</p>\n<p>打开淘宝看看，最显著的地方写着“红包卡券”、“成就奖励”、“淘金币”、“省钱消消消”，你对这些东西有多陌生，使用这些人的就有多少，那一部分价格最敏感，最需要以各种方式获得折扣的人，他们塑造着淘宝。</p>\n<p>原因很简单，没有这个，他们就不会使用淘宝，而你不在意，就像996一样，有没有这个功能，你都会继续用淘宝的。</p>\n<p>我们的网络购物软件就是这样一步一步变得越来越复杂的。这对我们也是一种训练。</p>\n<p><strong>少数人的习惯最终用于塑造我们，就是通过拼多多帮忙砍价的方法，一种条件反射的训练。</strong>我们得以熟练一种新的算计，以便可以接受更加复杂的游戏。</p>\n<p>这就是社会算计与企业内部算计的同构。我们不能想象一个社会，极端的便宜、高效、不断完成着发展的奇迹，但每个企业内部又是从容而闲适的。</p>\n<p>你可能认为我又在讲一些大而无当的理想主义内容，对于解决问题没有帮助，但实际情况和你想的不一样。</p>\n<p>苹果在去年更新了iOS14系统，这个系统会逐渐关闭IDFA（Apple’s identifier for advertisers），这是苹果帮助广告商实现精准投放的大数据系统。除此之外，还会监控和显示什么APP在调用用户的剪切版数据，以及如果有软件在调用麦克风和摄像头，屏幕上会有图标提示。</p>\n<p>想一想，即便在国外，这么深度的个人隐私敏感也并非大众的刚需。那么苹果为何要做这种反效率的系统更新呢？</p>\n<p><strong>逻辑和极端折扣一样，这是满足少部分隐私极端敏感者的要求。</strong></p>\n<p>因为手机毕竟是消费者埋单的工具，极端敏感隐私的人只要到达一个不大的份额，苹果就必须为他们更改隐私设置。其他用户呢？他们不在意，手机是什么隐私状况他们都会买的。</p>\n<p><strong>因此请记住，很多东西都不像我们想象中那样，要达到一个多么大的份额才会发生改变。社会被少数人的偏好塑造，你的公司也一样。</strong></p>\n<p><strong><center>05.</center></strong><br><strong><center>在意需要代价</center></strong></p>\n<p>我们对法律的想法也要改变。我们总认为996的遏制需要《劳动法》，但其实《劳动法》对于遏制996的一切条件都几乎已经准备好了。</p>\n<p>除了法律不是一个全自动机器人，我们在用互联网企业的方式想象司法系统，只要听到网民的呼吁，它就会自动过来，约谈企业，命令他们停止996。</p>\n<p>可惜司法系统不是一个积极的互联网服务业，它非常被动，只响应真正在意的人。</p>\n<p>如果没有特殊情况，劳动法的司法一般不会主动介入管理，不管社会上已经闹得多厉害。</p>\n<p>但基于企业加班制度的劳动仲裁，在员工熟悉这套流程，采集充分证据的情况下，赢得仲裁并不是不可能，甚至还比较简单。因为至少在深圳外，现行的996制度，连同那种变相逼迫员工“自愿加班”的，都可以通过仲裁获得加班工资。</p>\n<p>不过代价也是有的，和企业进行劳动仲裁需要准备不少的材料，这需要长时间潜心的准备，但这大概不会比996更辛苦。另外和企业进行劳动仲裁，基本意味着离开这个企业，而HR也会向你威胁，甚至导致你被行业封杀。</p>\n<p>这倒不是全无依据，去年末杭州数家企业确实在高新区成立“HR智库联盟”，虽然没有细节消息，不过互相有竞争的企业建立HR联盟，还是让人生疑。</p>\n<p>竞争性互联网企业HR为了限制员工的联盟在美国（苹果，Google，Intel，Adobe等）和韩国（三星和LG）都存在。不过因为少数人发起的集体诉讼，这样的联盟也都赔偿巨额资金因而瓦解。在今年“互联网平台经济领域反垄断”的背景下，这样的诉讼未必在中国就不会发生。</p>\n<p>当然，如果你“智慧地”洞悉我们的国情，因而作出终极的宣判，认为这一切在我们这里都不会有用，那么至少你就不会是那个塑造环境的少数人了。</p>\n<p>如果所有人都这样想，那996就会永世长存了吧。</p>\n<p><strong><center>尾声.</center></strong><br><strong><center>在意的和不在意的</center></strong></p>\n<p><img data-src=\"https://i.loli.net/2021/01/07/hRVwt5CQLBpkfSz.png\" alt=\"image.png\"></p>\n<ul>\n<li>文章配图来自《未生》《沉默警报Hush》。声明：文章观点仅代表作者本人，不代表看理想平台立场。欢迎提供不同意见的讨论。编辑：林蓝；监制：猫爷。</li>\n</ul>\n<p><img data-src=\"https://i.loli.net/2021/01/07/YyN1QGwPTX2cSHI.png\" alt=\"image.png\"></p>\n<hr>\n<h2 id=\"精选留言\"><a href=\"#精选留言\" class=\"headerlink\" title=\"精选留言\"></a><strong>精选留言</strong></h2><p>燕君</p>\n<p> “现在的年轻人也有可能从中学时期的早6晚12一周学习7天就开始长年累月积累的病根”</p>\n<p>王雪晶 SIG</p>\n<p> “说实话 能被大型互联网公司录取的大多数是教育背景还可以的一批年轻人 所以也是相信努力学习 不能荒废 才能换来自我安慰的一批人 我直到现在工作十年了 休息日感觉到一刻放松和无所事事 都会突然感到害怕 觉得自己要废了 12年上学的那种压力深深刻在骨子里 我的同学也跟我一样 跟我说一休息就紧张 然后要反复安慰自己 我已经很努力了 我没有废掉 你懂吗 不是大家就在乎几个钱几个股票期权 而是这批人 跟外卖骑手一样 自己在给自己设定目标和任务 不断的在奔跑”</p>\n<p>savoir</p>\n<p> “说出了我想说的。现在资本变成了最好用的背锅侠，其实呢，社会是什么，资本是什么？其实就是你，就是我，就是她/他。如果你在意但是从不表达，别人就以为或者假装以为你默认了，只有大声说出，不行，我不愿意。才有可能是改变的开始。如果某些事情到现在还毫无改变，不过就是因为我们都不在乎。”</p>\n<p>hirah</p>\n<p> “逻辑完整 论证严密。</p>\n<p>最后对MeToo和996境遇的差别的解释也呼之欲出了：</p>\n<p>MeToo运动能赢得几乎所有女性群体的共鸣，女权运动对整个女性群体，不论是个人还是整体，不论是短期还是长期，都是有价值的。</p>\n<p>但996不同，超时但高薪的生活对年轻人来说是危机和利益并存的。所以才会激起人群的算计和分化。</p>\n<p>那么要解决996对社会带来的伤害，我们需要更多人更有意识的保护自己的私人生活，给八小时之外的生活赋予更高的不能被金钱收买的价值。”</p>\n<p>然后十元</p>\n<p>“ 只要有人接受996，这事就难”</p>\n<p>Lynette</p>\n<p>“ 提供两个仅代表个人经验的案例:<br>我“偏安一隅”的母亲:985本科毕业，生下我之后英国读硕士，回国后进入某500强美企的财务部门从最基础的岗位开始工作，一直在这家公司供职，一步步晋升。我观察到，我母亲的公司有非常rigid制度来保障休息和付出劳动后应得的收入，另外有各种部门内部精神文化生活分享会、反歧视教育、职业技能教育。作为财务工作者的确有需要赶ddl的时候，几乎每年国庆黄金周前三天都要赶进度，但结果就是干三天的活拿九天的钱。我清清楚楚看到制度性的保障，自下而上的申诉，自上而下的自觉执行，有多给人带来幸福感。并非不想谋利，而是这不是企业的长远经营之计，更违反了这个企业所信奉的价值。最近这个企业背后家族的第四代继承人也成长起来了，我想我能明白它为什么能延续。</p>\n<p>我个人的一点点工作经验: 19岁的时候大二，进入一个忘年交朋友的新媒体公司兼职，老板因为是我朋友所以对我很好，但是甲方爸爸order下来的时候确实会需要熬夜通宵，有时候那种累和消耗除了因为工作量还因为自上而下都高度紧张，我能观察到那种焦虑和权力传导的链条。现在干了一年多，即将辞职准备留学，这是一段很好的经历，但是也真的很厌烦了。”</p>\n<p>幻欢子</p>\n<p>“ 对于国家的未来我很乐观，对于大多数普通人个体的未来而言，我略觉悲观。”</p>\n<p>杨秋实</p>\n<p>“ 加缪说，“荒诞人”必须拒绝永恒和希望，他们要做的是直面残酷和没有前途的世界，而后用反抗获得一种全新的自由。<br>谁都不想要996，但谁又都不想放弃对当代所谓成功生活方式的“希望”。自由就在那里，想获得它你就得放弃一些东西，可人们总是说：不行啊，我做不到！<br>凡事都有代价，想要当代的成功生活方式，就要付可能猝死和异化的代价；想要自由的人生，就要付适当出离和孤独的代价。<br>虽然最后大家殊途同归，但沿途风景绝然不同。能拯救“996”们的，大概只可能是他们自己。”</p>\n<p>十七</p>\n<p>“ 看起来比起尊严和权利，大家还是更喜欢算计”</p>\n<p>La</p>\n<p>“ 并非毫无改观，大众心理上越来越明确的价值导向，越积压越浓重的不满就是改观的起始。日常压力会寻求日常消解，但每次消解都不是消失，都会在人心里留下痕迹。”</p>\n<p>sein</p>\n<p>“ 肯定有很多人觉得996是为了挣钱养家的必然结果，是为了能过上体面尊严生活的必要选择。所以除了对996剖析，还需要一种生活形式的根本改变，回答何为良好生活这个问题在现在这样的情形显得尤为重要。”</p>\n<p>杨光</p>\n<p>“ 工会呢？在这个需要他时他不存在或者只是象征性存在，反而在不需要他的领域挥舞大棒的旧文明社会，我们总在探讨这些如何让这部分自己改变另一部分自己的问题真的有意义么？”</p>\n<p>欧墨</p>\n<p>“ 实际上脱离996不需要那么多人同意，只要改变自己就行，离开大城市，找一个安静的地方，钱不在多，吃饱穿暖就行。身处那样的环境会不自觉的跟着相同的思维走，会想我要这样，我要那样，实际上那些东西对你来说真的很重要吗？”</p>\n<p>橡皮</p>\n<p>“ 几乎整整一代人竟然不会休息、不会生活，除了没日没夜的刷题刷卷子上班加班，下来就是消费娱乐手机游戏。想一想这样的一代人有多悲哀呢？”</p>\n<p>落花流水</p>\n<p>“ 为了多挣点钱，多点班，为了不失业，只能996。<br>老人要看病，孩子要上学，年轻人也想留下来。工作也是想让生活好过一些，亲人能体面一些。<br>实话说，谁又想996，谁又想加班呢，正常工作，正常下班，不好吗？<br>社会的资源分配已然这样，大多人的选择也不多。努力的生活，下班了，再去兼职的人，也很多，没人想干不发加班费还加班的工作，只是希望企业能把打工人当人看，就像不拖欠农民工工资一样，把加班费按照国家出台的合理的规定补发一下。<br>一些人的生活本就选择不多，算计是让自己和亲人在日益富强的祖国境内生活得更健康一些”</p>\n<p>deserts</p>\n<p>“ 看到两条留言，其实正是小李老师在这篇里面尝试说明的问题。我们不需要全员抵制996才能停止996，996也并不是一个不愿意干就走的问题，企业文化的塑造是“一部分真正在意的人”引领的，但结果波及每个人。让更多的人的生活得以喘息，对吗？”</p>\n<p>哈尔等风来</p>\n<p>“ 文章强调的是人的主观意愿，要学会say no，可是很多时候我们并没有资本拒绝，或者说，如果我们变成老板，我们也会疯狂压榨，这就是屠龙少年的故事，整个社会经济还在稳步上升阶段，就会卷入到这样的旋涡之中，所以期盼立法或者社会共识，反而是我们认为最简便，偷懒，可能的方法”</p>\n<p>书雅</p>\n<p>“ 我是一个出版行业的小编，前两年对互联网行业还很向往，但现在避之不及，因为我知道我根本不能接受那样的工作强度。但是，我也很清楚，如果按我现在的工资水平，在北京买房，生子是不可能的。那我只有两个选择，要么不生小孩，不买房；要么离开北京。其实这两个选择我都可以接受，我觉得都比996好。<br>但是我有时候还是会想，为什么我就得住五户合租的房子呢？为什么我在北京，就连留下都不能妄想？而且其实，我现在的工资水平，回老家也还是买不起房，付不起首付。<br>我知道有多少年轻人，还想拼一拼，觉得有留北京的可能，想在北京安家，所以他们“算计”，我也觉得无可厚非。<br>我希望有一天，大家都一般努力，就可以住上自己的房子，哪怕一居室。”</p>\n<p>Marshall</p>\n<p>“ 不太理解抱怨996是在抱怨什么，愿意干就干不愿意干就辞职，不是这样吗？”</p>\n<p>啊偶🍊</p>\n<p>“ 这不是社会的问题，这是每一个在面对问题时说着“这是社会的问题”的人的问题。”</p>\n<p>nnʞɐɐɐɐlq</p>\n<p>“ 并不单单是这样，当时996icu最汹涌的时候问题不也某方面说明了现在社会的风气？<br>能坚定站出来用自己的生命去捍卫生产力的再生这一权利的人太少一方面可能是因为算计，另一方面不也和我们的从众文化有关吗”</p>\n<p>腩肉</p>\n<p>“ 愿我们在需要勇敢的时候能够足够勇敢”</p>\n<p>老旭弟</p>\n<p>“ 一开始的公司，没有996，而且是弹性上班时间，时间够了就可以走人，直到有一天老板说，不能再这样下去了，行业里其他公司都是996，我们无论做什么总要比他们慢一步。<br>这玩意跟小孩上学一样，一开始有人课外上补习班得利了，就会有人效仿打算赢在起跑线，逐渐演变到幼儿园开始上小学课程，没有外力的话，总会是这种结果，而那个该出现的外力，却总像文章里说的，暧昧”</p>\n<p>夏天里的冰</p>\n<p>“ 如果给我一次能不持续加班的能一直干下去的工作（房租能不要那么高随便涨价），我不想靠任何人会一直干下去，并且也懒得去算计那么多，因为我的生活已经满足了。<br>是别人的满满的物质欲望，让我只想做普通人的机会都如此艰难。”</p>\n<p>hyone</p>\n<p>“ 除了少数人的选择附和了这种风气，更多的是意见领袖和企业决策层煽动且推动这种风气。选择权无可厚非，但是退而求其次的机会也不见得有很多。忍辱负重究竟是褒义词还是贬义词，再想想吧。”</p>\n<p>Farrah</p>\n<p>“ 同意评论区有人说的，异化也许从上学时代就开始了。还有一个问题在于，对很多人而言，是否996给自己的生活带来的不是量变而是质变，站出来的代价确实难以承受。个人感觉其实现在社会上是存在一种割裂的，我们的意识是在的，但是从国家所处的发展阶段来说确实没办法和发达国家比，很多矛盾是环环相扣的，最根本的那个环节没解开就只能先拧巴着”</p>\n<p>蓝.lan</p>\n<p>“ “在意需要代价”说得太对了，关注那些恨不得它消失的东西时，关注的过程并不愉快，和关注喜欢的内容完全不同，肯定还是无视忽视来得轻松，但是漠视不会带来任何改变。不漠视未必有用，但漠视肯定无用。”</p>\n<p>淡如</p>\n<p>“ 不能寄希望于规则的制订者，只能靠自己发声。”</p>\n<p>探索与发现</p>\n<p>“ 我一直在想，我们究竟在争什么？那么垃圾的工作为什么要抢？大家都谦让谦让，这种工作自然就会消失了，这样和平演变不好吗？真到了没饭吃的饥荒年代吗？并没有，这几年我在家养身体，也总是反思自己究竟为什么这么脆弱，反思好了因为我不想累吐血，更不想向邪恶低头做邪恶的支持者”</p>\n<p>Swan</p>\n<p>“ 除了996以外的时间，谁也没法说服那些抱着手机不睡觉的年轻人注意身体健康，压根就感觉好多人每天都不怎么睡觉。除了大公司，周围公司，很少996啊，今年有工作做就不错的”</p>\n<p>📖Wang.L</p>\n<p>“ 杨照老师讲解资本论的节目，小伙伴们都去听一下吧！”</p>\n<p>Vicky～</p>\n<p>“ 有时候觉得我们和解放前的纺织厂流水线女工有什么区别呢？社会好像进步了，但好像也没有我们想象的进步那么多”</p>\n<p>李乙己</p>\n<p>“ 怪不得共产党宣言最后一句话是全世界的无产者“联合起来””</p>\n<p>佚名</p>\n<p>“ 996不可怕，可怕的是996之后毫无价值感，以及996之外因为透支的精力陷入懒散与不健康的习惯的恶性循环。声讨996的人，如果你们不需要养家糊口还贷，难道也没有为了成就一点什么通宵达旦的时候？”</p>\n<p>王亚光</p>\n<p>“ 如果你996，理由是挣钱，那当你失去你的钱（比如被骗走的时候），你会立刻变得虚无，因为那些本该用时间去培养的牵挂的东西，已被你先前的价值观否定了，你绝对会崩溃，生活剩余一片虚无，你无可面对自己的孩子，因为你的承诺落空。但如果你花更多的时间去陪伴和鼓励，你们将会共同面对这一切，前面还有希望。不过我也希望在996加班的人看到一个事实，就是你希望得到的东西比你想象中更容易获得，如果你想去一个地方最快的方式是走去——转述自《瓦尔登湖》。”</p>\n","categories":["写作","文","公众号:《看理想》"],"tags":["996"]},{"title":"梵高：他怀着对整个世界炙热的爱，却没有一个人想要","url":"/2021/08/01/%E6%A2%B5%E9%AB%98%EF%BC%9A%E4%BB%96%E6%80%80%E7%9D%80%E5%AF%B9%E6%95%B4%E4%B8%AA%E4%B8%96%E7%95%8C%E7%82%99%E7%83%AD%E7%9A%84%E7%88%B1%EF%BC%8C%E5%8D%B4%E6%B2%A1%E6%9C%89%E4%B8%80%E4%B8%AA%E4%BA%BA%E6%83%B3%E8%A6%81/","content":"<p><img data-src=\"https://i.loli.net/2021/07/31/o3tEQBz7fRvai8O.png\" alt=\"image.png\"></p>\n<p><img data-src=\"https://i.loli.net/2021/07/31/lqrzBjLeQ7GS4EP.png\" alt=\"image.png\"></p>\n<p>今天（7月29日），是文森特·威廉·梵高（Vincent Willem van Gogh）逝世131周年的日子。</p>\n<a id=\"more\"></a>\n\n\n\n<p>他生前是活得最惨的画家之一，穷、孤独，不被理解，只卖出过一幅画；但在死后大红大紫，如今他的作品成为艺术拍卖会上最贵的作品之一。</p>\n<p>每年今日，总会有很多人怀念梵高，而他之所以值得怀念，或许不仅在于卓越的艺术贡献，还在于这位艺术家强大到令人折服的精神力量——以“痛苦”为生命的燃料，不计后果地燃烧。</p>\n<p>在西方艺术史中，我们谈论大师的艺术，一般没有必要去触及他们的个人生活。可是，谈梵高的艺术却必须谈他的人生，因为他把生命完全融进艺术，或者说他把艺术完全作为了个体生命的表达。</p>\n<p>“我疯狂地工作，但是目前还没有什么令人满意的结果，我希望这些荆棘最终可以开出白色的花。”可梵高一直到死，都没有等到这充满荆棘的人生之路开出花来。明明心中怀有对整个世界炙热的爱，普天之下竟没有一个人想要这种爱。</p>\n<p>而正是这种做法，打开了西方绘画“表现主义”的先河，后来所有的表现主义流派或画家都从这里开始。</p>\n<p>今天，艺术史教授、 看理想App节目《西方艺术三万年》主讲人王瑞芸将带我们走进梵高的世界，聊聊这位艺术即人生的绘画大师，看他如何在与磨难不断的抗争中，走过曲折但伟大的一生。</p>\n<p><img data-src=\"https://i.loli.net/2021/07/31/iUSjlGT3Ph2Fqy5.png\" alt=\"image.png\"></p>\n<p><strong><center ><font color=#d1c09a>01.</strong></p>\n<p><strong>画家的内心不放别的东西，只放满满的激情</font></center></strong></p>\n<p>梵高出生于荷兰一个新教牧师家庭，出生日期恰逢哥哥忌日，因此不被家人喜爱，从小性格孤僻。成年后，他做过职员和商行经纪人，都因性格原因被辞退，早年的恋爱也遭到拒绝。</p>\n<p>他这个人的行事风格的确少见，做什么都全心投入，这种做法平常人往往吃不消，就无法认同他。</p>\n<p>后来，他选择去比利时最贫困的矿区当传教士，这是一般传教士都不肯去的苦地方。他去了还不算，还对教区里每个贫苦的劳动者倾囊相助，把自己的最后一片面包都拿出来了。可这样极度献身的做法并不被教会看好，因为其他传教士全被他比得平庸了，很难开展工作。</p>\n<p>最后，这个热情如火、爱走极端的人，在屡遭挫折之后，选择了绘画，决心要“在绘画中与自己苦斗”。<strong>果然，就和他之前的行事风格一模一样，他开始在绘画上彻底投入，充分燃烧自己，十年功夫就把自己燃烧殆尽了。</strong></p>\n<p>梵高从27岁成为画家，到37岁逝世，一共从事艺术十年。他早期的作品色彩非常阴郁，画的对象都是悲苦的底层人，《吃土豆的人》是这时期的代表作。</p>\n<p> <img data-src=\"https://i.loli.net/2021/08/01/skcAbyJdWNI3PEK.png\" alt=\"image.png\"><p align=\"right\">《吃土豆的人》 1885</p></p>\n<p> 1886年他去了巴黎，结识了印象派画家们，调色板上的颜色开始变得明亮了。那是他生命中难得的开朗时期，艺术环境开放，朋友们志同道合。可是两年后，梵高开始厌倦巴黎的浮华，尤其不想在印象派的影响下作画。于是在1888年，他去了法国南部的小镇阿尔。</p>\n<p>到了阿尔，梵高感觉来对了地方，“我确信哪怕仅仅呆在这儿，我的个性都会得到自由。”这句话寓示着他将以绘画来表达个性，也成为他后续创作一直坚持的方向。在阿尔的时间，是梵高生命的最后两年，他主要的杰作都在这两年中完成。</p>\n<p>在梵高不同时期的几幅自画像上，可以清晰地看出他在艺术上的变化轨迹。1886年的自画像是遇到印象派之前的作品，规矩、色彩偏暗；</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/yalkJIPo9hxTMDF.png\" alt=\"image.png\"><p align=\"right\">梵高《自画像》 1886</p></p>\n<p>1887年去巴黎后的自画像，画面明亮了，色彩丰富了，但这也就是一幅符合印象派特点的画罢了；</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/ZLqAkYPhGRKy9tp.png\" alt=\"image.png\"><p align=\"right\">梵高《自画像》 1887</p></p>\n<p>而1889年到阿尔之后的自画像，梵高的艺术风格特色就完全形成了。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/EYFca7pTVrOx1ID.png\" alt=\"image.png\"><p align=\"right\">梵高《自画像》 1889</p></p>\n<p>归纳来说有这样三方面：</p>\n<p>用色非常夸张，不仅有极高的纯度，而且有极大的主观性，比如他脸上的皮肤竟然是用粉绿色画的；笔触强悍奔放，画面干脆成为颜色和笔触的狂欢；画面中的物体开始变形。</p>\n<p>这些因素充分体现了梵高的艺术追求：<strong>真正的画家不是照物体的样子去作画的，而是照他所感觉到的样子去作画。</strong></p>\n<p>其实，梵高和塞尚（“后期印象派”的另一位代表性画家）都在运用色彩建立他们的绘画世界，但梵高的色彩完全不同于塞尚的理性构造，更不同于印象派的光色表达，他是直接用色彩来表达内心。</p>\n<p>他曾明确地表态：“颜色不是要达到局部的真实，而是要启示某种激情。”可以说，这个画家的内心几乎不放别的东西，只放满满的激情。</p>\n<p><strong><center><font color=#d1c09a>02.</strong></p>\n<p><strong>普天之下，竟没有一个人要这种爱</font></center></strong></p>\n<p>在阿尔的乡间，梵高完全亲近自然，他迷恋上了大自然中生命生长的神秘力量，满心要把这种力量在画上捕捉住并传递出来。<strong>为此，他从早画到晚，在烈日下不吃不喝连续作画四五个小时，几乎被阳光烤焦了也全然不顾，那真是一种燃烧自己的节奏。</strong></p>\n<p>然而，梵高激情四射的画却不被当时的人们接受，因为画中夸张的颜色和造型对时代来说过于超前了。</p>\n<p>于是他给自己打气：“我疯狂地工作，但是目前还没有什么令人满意的结果，我希望这些荆棘最终可以开出白色的花。”可他一直到死，都没有等到这充满荆棘的人生之路开出花来。</p>\n<p><strong>明明心中怀有对整个世界炙热的爱，普天之下竟没有一个人想要这种爱。</strong>梵高长时间处在这种不被理解、备受冷遇的环境中，内心的压力和凄苦可想而知。</p>\n<p>天底下能接受和理解梵高的人，只有他的亲弟弟提奥，他一直全靠弟弟养活。他给弟弟写信倾诉痛苦：</p>\n<p>“在我们的心里或许有一把旺火，可是谁也没有拿它来让自己暖和一下。从旁边经过的人只看见烟筒里冒出的一缕青烟，没去理会。现在我应该做点什么呢？……有谁走来，挨近它，坐下，大概会有人停下来吧，我心里是多么着急。”</p>\n<p>在漫长的孤独等待和无休止的煎熬中，梵高的画也越画越变形。</p>\n<p>《黄房子》画于1888年，那时梵高刚搬到阿尔，一切都还新鲜，还有希望，心境是相对平和的。因此，尽管画面上的色彩强烈，但画出的房子的却是平整端正的。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/euynJYik4svtlcr.png\" alt=\"image.png\"><p align=\"right\">《黄房子》 1888</p></p>\n<p>渐渐的，梵高在阿尔被周遭人群侧目、排斥，他和另一位印象派画家高更也从惺惺相惜走向了决裂。不久前，高更从巴黎来到阿尔，梵高热情地接待了他，然而两个月后两人却闹翻了，甚至还闹出了“割耳朵”事件。</p>\n<p>在这个世界，梵高几乎是到处碰壁。在超常的体力透支和内心彻底无望的双重折磨中，他感到自己迅速被消耗，给弟弟的信上写道：“你知道，我个人的冒险主要是快速成为一个满脸皱纹、胡子粗硬、牙齿松动的小老头。”</p>\n<p>在如此痛苦的生存境遇中，他画下了《阿尔的教堂》。此时，画上建筑不再四平八稳，而是扭曲的、激动不安的。这显然不是梵高的创新，根本就是他内心宣泄的需要，画面中几乎每一笔都在倾述一个人内心的纠结和难受。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/Dtv8NurkmbPF4py.png\" alt=\"image.png\"><p align=\"right\">《阿尔的教堂》 1889</p></p>\n<p>这也构成梵高生命后期所有作品的特点，他笔下的麦田、柏树、星空，都被画成了如火焰般升腾、扭动的图像。</p>\n<p><strong><center><font color=#d1c09a>03.</strong></p>\n<p><strong>他的一生，树立了一种生命榜样</font></center></strong></p>\n<p>画寄托了画家内心全部的激情，表现力便达到了不可思议的强度，就如梵高所说：<strong>“我变得越丑、越穷、越有病，我越要通过创造明亮、有序、灿烂的色彩来复仇。”</strong></p>\n<p>对此，我有一个亲身体会。在大学艺术系读书的时候，学习资源还非常有限，系资料室买到了一套国外出的梵高画册，因为珍贵，学生只能照着排出的时间表，每人看一个小时。</p>\n<p>我开始还嫌时间太短，可翻看了一个小时之后，便迫切地感到需要冲到校园的草地上平躺下来，彻底放松，否则大脑几乎承受不住，这就是梵高作品的表现力达到的强度。</p>\n<p>直到很多年后在国外看到原作，我才可以冷静地细看他的用色技法，才能用一个同行的眼睛看出，作为画家，梵高对于颜色的运用，达到了登峰造极的水平——让高纯度的色彩在画面上呈现出饱满明亮的和谐，是很多人穷其毕生精力都极难达到的技术高度。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/9utnW84vjaE3DrN.png\" alt=\"image.png\"><p align=\"right\">《星空》 1889</p></p>\n<p>而一旦达到那种技术高度，他就能把一切不起眼的耕地、树根、草木，那一类我们根本不愿去画的东西，全都画得蓬勃旺盛且激动人心，每张画都放射出宝石一般的光芒，形成了极高级的视觉享受。然而，一个画家在技术上达到了这么高的程度，却不被认可，这对生命来说真是罕见的磨难。</p>\n<p>但我们却看到这样一个结果：<strong>梵高生命的磨难越剧烈，画作的表现力就越强烈，艺术的成就也越耀眼。</strong></p>\n<p>这简直令人怀疑梵高干脆是上帝有意策划的一个悲剧人物，似乎为了创造出伟大的艺术，必须把他放在那样的命运里，连梵高自己都说：“我的冒险，不是靠主动选择，而是被命运推动的。”</p>\n<p>他和弟弟的关系也充满神奇的意味，他的一生全靠弟弟无条件支持才能画画。然而，梵高一死，他的弟弟半年后也就过世，死时只有33岁。医生给出的死因是：过度悲痛和紧张。兄弟俩葬在一起，构成了世间非常罕见的命运组合。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/01/C9q1tP6WzDI2lXw.png\" alt=\"image.png\"><p align=\"right\">梵高和弟弟的墓地</p></p>\n<p>但是，我同时也怀疑，上帝“策划”了梵高的命运，或许并不是为了艺术能产生新的风格，而是为了向我们展示一种生命的真相。<strong>这个真相是：每一个生命体都具备无限的能量，一个人精神越集中，生命的能量就越大。</strong></p>\n<p>虽说世间人人都有一条性命，但我们往往心思复杂、杂念丛生，精神无法集中，生命的能量于是全在各种杂事上漏得精光。梵高用他的一生告诉我们，精神可以达到怎样的纯度，生命究竟能迸发多大的能量。</p>\n<p>在西方艺术史上，梵高的知名度高到离奇，几乎家喻户晓，无数人被他感动，热爱他、怀念他，不只因为他的艺术，更因为他树立了一种生命的榜样。</p>\n<p><strong><center><font color=#d1c09a>04.</strong></p>\n<p><strong>尾声：精神的归途</font></center></strong></p>\n<p>梵高的弟弟提奥死后，提奥年轻的妻子乔安娜几乎是莫名其妙地继承下来一屋子堆积如山的油画和素描，以及梵高写给提奥的几百封信。</p>\n<p>乔安娜对丈夫的这位兄长其实并不了解，但当她慢慢地读完梵高写给弟弟所有的信后，被深深感动了，从此开始整理编辑梵高的书信，还将梵高的作品安排出去展览。</p>\n<p>1914年，梵高的书信集终于在阿姆斯特丹出版，后续又被翻译成多种语言，梵高因此渐渐进入人们的视野。</p>\n<p>1927年乔安娜去世，她的儿子，也就是梵高的侄儿文森特继承了自己伯父所有的画。二战后，由于担心画作散落到各处，文森特以捐赠为条件，向阿姆斯特丹请求提供永久陈列的场所。荷兰政府开始落实这件事，终于在1973年建成了梵高美术馆，并在阿姆斯特丹正式开放。</p>\n<p>梵高的侄子亲眼见证了这件事的圆满完成，在1978年过完88岁生日后去世了。他的朋友写道：“住了四十年的家，里面梵高的作品全部搬空了，但就像卸下常年扛在肩上的包袱一般，他的心情非常轻松愉快。”</p>\n","categories":["写作","文","公众号:《看理想》"],"tags":["梵高"]},{"title":"歌词：《谁来剪月光》- 作词人：易家扬","url":"/2020/12/15/%E6%AD%8C%E8%AF%8D%EF%BC%9A%E3%80%8A%E8%B0%81%E6%9D%A5%E5%89%AA%E6%9C%88%E5%85%89%E3%80%8B-%E4%BD%9C%E8%AF%8D%E4%BA%BA%EF%BC%9A%E6%98%93%E5%AE%B6%E6%89%AC/","content":"<h1 id=\"誰來剪月光\"><a href=\"#誰來剪月光\" class=\"headerlink\" title=\"誰來剪月光\"></a>誰來剪月光</h1><p><a href=\"https://www.google.com/search?q=%E9%99%B3%E5%A5%95%E8%BF%85&stick=H4sIAAAAAAAAAONgVuLSz9U3MCwoLzcvW8TK-XLm5qdLp77Y3woAPmaf2RoAAAA&sa=X&ved=2ahUKEwjZu-KGk-_oAhVKCqYKHWINBTgQMTAAegQIDBAF\">陳奕迅</a></p>\n<p>我找不到那個妳曾說的遠方</p>\n<p>也想不到要怎麼問妳別來無恙</p>\n<p>世界亂的一塌糊塗可是 能怎樣</p>\n<p>偶爾抬起頭來還好有顆月亮可賞<a id=\"more\"></a></p>\n<p>太多回憶要我怎麼擺進行李箱</p>\n<p>一直沒哭一直走路走灰多少太陽</p>\n<p>因為往事沒有辦法懸賞</p>\n<p>隱形在那大街小巷</p>\n<p>剪斷了它 還囂張</p>\n<p>我的嘴在說謊 說的那麼漂亮</p>\n<p>說我早就忘了妳像月一樣的俏臉龐</p>\n<p>最怕一邊忙呀忙 一邊回想那舊時光</p>\n<p>剪不掉的是妳</p>\n<p>帶淚的臉 還真是煩</p>\n<p>多少原因將我綁在半夜屋頂上</p>\n<p>一直沒再愛一個人如今就是這樣</p>\n<p>因為故事跟妳說了一半</p>\n<p>於是擱在所謂雲端</p>\n<p>誰忘不了誰孤單</p>\n<p>我的心在說謊 說下去會瘋狂</p>\n<p>如果沒有月亮 那些日子都無妨</p>\n<p>最怕一邊忙呀忙 一邊想那舊時光</p>\n<p>剪不掉的是妳 帶笑的苦 還真煩</p>\n<p>我的嘴又說了謊 說的那麼漂亮</p>\n<p>以為已經忘了妳的那些美像月光它剪不斷</p>\n<p>因為愛早就鑽進心臟</p>\n<p>心一跳淚就會燙</p>\n<p>那些帶淚的臉</p>\n<p>帶笑的苦 還真煩</p>\n<p>月亮是個兇手</p>\n<p>想妳的我 是通緝犯</p>\n<p>我有時候真的很怕望見那月光中的妳</p>\n<p>來源： <a href=\"https://www.musixmatch.com/\">Musixmatch</a></p>\n<p>作詞/作曲：Jia Yang Yi / Ying Qi Feng</p>\n<p>《誰來剪月光》歌詞 © Fei Xing Shi You Xian Gong Si, Chez V Creation Ltd.</p>\n","categories":["写作","文"],"tags":["易家扬","《谁来剪月光》"]},{"title":"爬虫遇到网页审查元素（开发者工具）打不开怎么办？","url":"/2021/08/05/%E7%88%AC%E8%99%AB%E9%81%87%E5%88%B0%E7%BD%91%E9%A1%B5%E5%AE%A1%E6%9F%A5%E5%85%83%E7%B4%A0%EF%BC%88%E5%BC%80%E5%8F%91%E8%80%85%E5%B7%A5%E5%85%B7%EF%BC%89%E6%89%93%E4%B8%8D%E5%BC%80%E6%80%8E%E4%B9%88%E5%8A%9E%EF%BC%9F/","content":"<h2 id=\"问题描述\"><a href=\"#问题描述\" class=\"headerlink\" title=\"问题描述\"></a>问题描述</h2><p>今天想用Python写一个脚本，批量爬取某站图片。发现该网站的开发调试工具打不开，右键和F12都没用。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"原因分析\"><a href=\"#原因分析\" class=\"headerlink\" title=\"原因分析\"></a>原因分析</h2><p>个人推测右键和F12可能都被JS脚本禁用了。</p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><p>点击浏览器右上角-更多工具-开发者工具即可强制启动开发调试。</p>\n<p><img data-src=\"https://i.loli.net/2021/08/05/XFngmkPeaNlRTOE.png\" alt=\"image.png\"></p>\n<h2 id=\"引用参考\"><a href=\"#引用参考\" class=\"headerlink\" title=\"引用参考\"></a>引用参考</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_21567385&#x2F;article&#x2F;details&#x2F;109253191</span><br></pre></td></tr></table></figure>\n\n\n","categories":["技术","网络爬虫"],"tags":["爬虫","Chrome 网页检查元素"]},{"title":"请求转发（Forward）和重定向（Redirect）的区别","url":"/2021/12/13/%E8%AF%B7%E6%B1%82%E8%BD%AC%E5%8F%91%EF%BC%88Forward%EF%BC%89%E5%92%8C%E9%87%8D%E5%AE%9A%E5%90%91%EF%BC%88Redirect%EF%BC%89%E7%9A%84%E5%8C%BA%E5%88%AB/","content":"<p>forward（转发）：</p>\n<p>是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,因为这个跳转过程实在服务器实现的，并不是在客户端实现的所以客户端并不知道这个跳转动作，所以它的地址栏还是原来的地址.</p>\n<a id=\"more\"></a>\n\n<p>redirect（重定向）：</p>\n<p>是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</p>\n<p>转发是服务器行为，重定向是客户端行为。</p>\n<h1 id=\"区别：\"><a href=\"#区别：\" class=\"headerlink\" title=\"区别：\"></a><strong>区别</strong>：</h1><ol>\n<li><p>从地址栏显示来说</p>\n<p>forward是服务器请求资源,服务器直接访问目标地址的URL,把那个URL的响应内容读取过来,然后把这些内容再发给浏览器.浏览器根本不知道服务器发送的内容从哪里来的,所以它的地址栏还是原来的地址.</p>\n<p>redirect是服务端根据逻辑,发送一个状态码,告诉浏览器重新去请求那个地址.所以地址栏显示的是新的URL.</p>\n</li>\n<li><p>从数据共享来说</p>\n<ul>\n<li><p>forward:转发页面和转发到的页面可以共享request里面的数据.</p>\n</li>\n<li><p>redirect:不能共享数据.</p>\n</li>\n</ul>\n</li>\n<li><p>从运用地方来说</p>\n<ul>\n<li><p>forward:一般用于用户登陆的时候,根据角色转发到相应的模块.</p>\n</li>\n<li><p>redirect:一般用于用户注销登陆时返回主页面和跳转到其它的网站等</p>\n</li>\n</ul>\n</li>\n<li><p>从效率来说</p>\n<ul>\n<li><p>forward:高.</p>\n</li>\n<li><p>redirect:低.</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"本质区别：\"><a href=\"#本质区别：\" class=\"headerlink\" title=\"本质区别：\"></a><strong>本质区别：</strong></h1><h2 id=\"解释一：\"><a href=\"#解释一：\" class=\"headerlink\" title=\"解释一：\"></a><strong>解释一：</strong></h2><p>一句话，转发是服务器行为，重定向是客户端行为。为什么这样说呢，这就要看两个动作的工作流程：</p>\n<p>转发过程：客户浏览器发送http请求—-》web服务器接受此请求–》调用内部的一个方法在容器内部完成请求处理和转发动作—-》将目标资源发送给客户;在这里，转发的路径必须是同一个web容器下的url，其不能转向到其他的web路径上去，中间传递的是自己的容器内的request。在客户浏览器路径栏显示的仍然是其第一次访问的路径，也就是说客户是感觉不到服务器做了转发的。转发行为是浏览器只做了一次访问请求。</p>\n<p>重定向过程：客户浏览器发送http请求—-》web服务器接受后发送302状态码响应及对应新的location给客户浏览器–》客户浏览器发现是302响应，则自动再发送一个新的http请求，请求url是新的location地址—-》服务器根据此请求寻找资源并发送给客户。在这里 location可以重定向到任意URL，既然是浏览器重新发出了请求，则就没有什么request传递的概念了。在客户浏览器路径栏显示的是其重定向的路径，客户可以观察到地址的变化的。重定向行为是浏览器做了至少两次的访问请求的。</p>\n<h2 id=\"解释二：\"><a href=\"#解释二：\" class=\"headerlink\" title=\"解释二：\"></a><strong>解释二：</strong></h2><p>重定向，其实是两次request,</p>\n<p>第一次，客户端request A,服务器响应，并response回来，告诉浏览器，你应该去B。这个时候IE可以看到地址变了，而且历史的回退按钮也亮了。重定向可以访问自己web应用以外的资源。在重定向的过程中，传输的信息会被丢失。</p>\n<p>例子：</p>\n<p>请求转发是服务器内部把对一个request/response的处理权，移交给另外一个</p>\n<p>对于客户端而言，它只知道自己最早请求的那个A，而不知道中间的B，甚至C、D。 传输的信息不会丢失。</p>\n<h2 id=\"解释三：\"><a href=\"#解释三：\" class=\"headerlink\" title=\"解释三：\"></a><strong>解释三：</strong></h2><p>转发是服务器行为，重定向是客户端行为。</p>\n<h1 id=\"两者的内部机制有很大的区别：\"><a href=\"#两者的内部机制有很大的区别：\" class=\"headerlink\" title=\"两者的内部机制有很大的区别：\"></a><strong>两者的内部机制有很大的区别：</strong></h1><ol>\n<li><p>请求转发只能将请求转发给同一个WEB应用中的组件，<br>而重定向还可以重新定向到同一站点不同应用程序中的资源，甚至可以定向到一绝对的URL。</p>\n</li>\n<li><p>重定向可以看见目标页面的URL，<br>转发只能看见第一次访问的页面URL，以后的工作都是有服务器来做的。</p>\n</li>\n<li><p>请求响应调用者和被调用者之间共享相同的request对象和response对象，<br>重定向调用者和被调用者属于两个独立访问请求和响应过程。</p>\n</li>\n<li><p>重定向跳转后必须加上return，要不然页面虽然跳转了，但是还会执行跳转后面的语句，转发是执行了跳转页面，下面的代码就不会在执行了。  </p>\n</li>\n</ol>\n","categories":["技术"],"tags":["转发","重定向","Forward","Redirect"]},{"title":"高效使用Github寻找开源项目","url":"/2021/11/08/%E9%AB%98%E6%95%88%E4%BD%BF%E7%94%A8Github%E5%AF%BB%E6%89%BE%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/","content":"<h1 id=\"怎么在GitHub上靠谱的找一些开源项目\"><a href=\"#怎么在GitHub上靠谱的找一些开源项目\" class=\"headerlink\" title=\"怎么在GitHub上靠谱的找一些开源项目\"></a><strong>怎么在GitHub上靠谱的找一些开源项目</strong></h1><p><img data-src=\"https://i.loli.net/2021/11/08/qrx7dsyRXj2avfu.png\" alt=\"image.png\"></p>\n<a id=\"more\"></a>\n\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># 按照项目名&#x2F;仓库名搜索（大小写不敏感）</span><br><span class=\"line\">in:name xxx</span><br><span class=\"line\"># 按照README搜索（大小写不敏感）</span><br><span class=\"line\">in:readme xxx</span><br><span class=\"line\"># 按照description搜索（大小写不敏感）</span><br><span class=\"line\">in:description xxx</span><br><span class=\"line\"># stars数大于xxx</span><br><span class=\"line\">stars:&gt;xxx</span><br><span class=\"line\"># forks数大于xxx</span><br><span class=\"line\">forks:&gt;xxx</span><br><span class=\"line\"># 编程语言为xxx</span><br><span class=\"line\">language:xxx</span><br><span class=\"line\"># 最新更新时间晚于YYYY-MM-DD</span><br><span class=\"line\">pushed:&gt;YYYY-MM-DD</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a><strong>示例</strong></h2><p><img data-src=\"https://i.loli.net/2021/11/08/X2MWICdnbR3LTju.png\" alt=\"image.png\"></p>\n","categories":["技术"],"tags":["github"]},{"title":"《瞬息全宇宙》|  别吵了！爱与和解又错了吗？","url":"/2022/08/08/%E3%80%8A%E7%9E%AC%E6%81%AF%E5%85%A8%E5%AE%87%E5%AE%99%E3%80%8B-%E5%88%AB%E5%90%B5%E4%BA%86%EF%BC%81%E7%88%B1%E4%B8%8E%E5%92%8C%E8%A7%A3%E5%8F%88%E9%94%99%E4%BA%86%E5%90%97%EF%BC%9F/","content":"<h2 id=\"一-EVERYTHING：-Evelyn-的困境\"><a href=\"#一-EVERYTHING：-Evelyn-的困境\" class=\"headerlink\" title=\" 一 EVERYTHING： Evelyn 的困境 \"></a><center> 一 EVERYTHING： Evelyn 的困境 <center></h2><p>瞬息全宇宙的开头是中年妇女 Evelyn 焦头烂额的一天，她不仅要准备新年派对，为父亲过生日大寿，阻止女儿向公公出柜，还要处理洗衣店的各种杂事, 当然还有最重要的报税。在这 10 分钟里你能明显观察到杨紫琼的体态，她一直微微驼背，像被生活压得喘不过气来，与之对应的是第一部分里就有强烈压迫感的框式构图，疲惫的 Evelyn 像被困在了糟糕的日常生活里，这 10 分钟看似累赘，却是理解整部电影的关键。</p>\n<a id=\"more\"></a>\n\n<p>仔细观察会发现电影中的艾弗伦一直在拒绝沟通，每个人跟她说话的时候，她的大脑都仍然在飞速运转，这种被一团乱麻的生活围的喘不过气来的状态，正是很多亚洲母亲们的缩影。</p>\n<p>（ Evelyn ）“如果今天我需要再多想一件事情，我的脑子就要爆炸了。（电梯中）”</p>\n<p>也就是在这里剧情出现了转折，中年妇女 Evelyn 竟然成了 The One（天选之子）。而荒谬的是被选中不是因为天资聪颖，而是因为她是各个宇宙里最糟糕的版本，穿越宇宙的逻辑不是越扎实越好，而是怎么荒谬怎么来。</p>\n<p>在多重宇宙里，我们看到了 Evelyn 无限的可能，她可能是功夫巨星，可能是京剧名伶，可能是铁板烧大厨，也可能是阿尔法宇宙里训练天才的科学家。</p>\n<p>到这里大家有没有发现一点不对劲，功夫、京剧、美食和鸡娃似乎全都是对华裔的刻板印象，那么是谁塑造这些刻板印象？是导演吗？不，恰恰是 Evelyn 自己，所有的这些刻板印象都是她想象中正确和成功的人生，而整个故事讲的是多重宇宙选中了她吗？还是她自己制造了一个多重宇宙？</p>\n<p>如果重新回过去看开头的 10 分钟，你会发现一切答案都在其中，大鼻子女人耳朵上的耳机，电视机上的歌舞，税务局路上转披萨牌的人，当然还有税务局女士身旁那个形状奇特的奖杯，这些现实的细节后来都出现在了多重宇宙里，而丈夫雨伞上的贝果，洗衣店里不断转动的滚筒，或许正是贝果宇宙的灵感，或许这个时候可能会有人觉得，如果这全都是母亲的幻想，那整部电影就变得没意思了，但是让我们换种角度来看，电影天马行空的多重宇宙，正因为它基于一个母亲的幻想，它拥有了现实的力量。</p>\n<p>整部电影里 Evelyn 先后和税务员、女儿、公公战斗，每场战斗都对应着她现实里的困局。电影中有一段对话特别关键，阿尔法 Waymand 对她说。</p>\n<p>（阿尔法 Waymand ）“我了解你，你每时每刻都在担心自己是否错过了掌握人生，成就自我的机会。我现在就是来告诉你。你所经历的每一次拒绝，每一次失望，都带领着你，来到此时此刻，不要让无关紧要的事情耽误了你。”</p>\n<p>是的，多重宇宙其实是对现实失望的产物，所以我们看到她幻想中的人生都是一部部电影的样子。在厨师宇宙里，她的同事是《料理鼠王》，在热狗宇宙里，她们经历了《太空漫游2001》式的进化，又来到《与龙共舞》的场景，在功夫宇宙里她的人生是《卧虎藏龙》，是《一代宗师》，是《泰坦尼克号》，甚至是《花样年华》，这是她认为最好的人生版本，也是她想象中所有浪漫的总和。</p>\n<p>杨紫琼饰演的 Evelyn ，实际上是个被 “正确” 所绑架的人，她希望父亲认可自己，希望丈夫像个真正的 “男人”，希望自己拥有正确的人生，也希望让女儿走上正确的道路。这种正确的枷锁就像一个个沉重的方框压得她喘不过气来，所以她才要逃到荒诞的幻想里喘一口气，那么怎么打破这种困局？答案或许就藏在那些荒谬的跳跃路径里，如果说混乱的现实就像是一个在多重宇宙里升级打怪的过程，那么最好的办法就是接受它的随机与荒谬，而非执着于存在一个绝对正确的人生，这也是为什么电影里存在着那么多屎尿屁的情节，就像导演所说的。</p>\n<p>“现实生活是混乱的交织，而那些愚蠢的东西正是重点。”</p>\n<p>在我看来《瞬息全宇宙》的表层其实讲了一个再简单不过的故事，一个认为自己 “是世界上最糟糕的人” 的母亲如何跟生活和解的过程。电影的第一部分正是她踏出的第一步改变自己的观念，或许本来就不存在正确的观念与正确的道路，这个世界正是由混乱和荒谬组成的，而也正是这一系列的选择定义了现在的我。而当你沉溺于多重宇宙中的不同人生时，真正的自我反倒会破裂，这也是为什么第一部分的结尾会用影院中电影结束的方式来呈现。</p>\n<p>多重的宇宙，实际上都是别人的电影，而你自己的电影就是此刻的生活。</p>\n<h2 id=\"二-EVERYWHERE：-Joy-的困境\"><a href=\"#二-EVERYWHERE：-Joy-的困境\" class=\"headerlink\" title=\" 二 EVERYWHERE： Joy 的困境 \"></a><center> 二 EVERYWHERE： Joy 的困境 </center></h2><p>如果说电影第一部分的主角是母亲 Evelyn ，那么电影的第二部分主角实际上是 Joy ,不知道大家有没有发现 Evelyn 幻想中的自己充斥着东方的刻板印象，而女儿 Joy 的造型则满是异域色彩？从致敬猫王的套装到弗拉明戈舞裙，再到高尔夫套装， Joy 的造型多变且切换迅速，就像母亲眼中捉摸不定的孩子，电影最快速的那段镜头剪接里有特别多后现代的戏谑拼贴，当你把这段慢放会发现各种各样的恶搞画面，《权游》的夜王，《双峰》的红房间，交友 APP 的界面，恶搞式的拼贴，甚至还混入了一帧特效五人组给杨紫琼做后期的截图。</p>\n<p>第二段故事里 Evelyn 体验的正是女儿这一代人的虚无，在信息过载的互联网时代，每个人都看过了太多的世界，太多的可能性，所谓的多重宇宙映射到现实里，就是互联网上一个个帖子里所展现出来的多重生活，各种目不暇接的快闪镜头，就像你的手指不断上滑浏览着各式各样的人生，电影里母亲不断告诉女儿，“你该过更正确的人生”，而女儿则不断告诉母亲，“这个世界比你想象中的要更大”。《瞬息全宇宙》所讲的，事实上就是两代人之间无法弥补的裂缝。</p>\n<p>在母亲的困境里我们看到了很多的框，而在女儿的困境里我们则看到了很多虚空的圆，影片中的 Everything Bagel 就是虚空之圆最好的象征，它似乎承载了一切，中心却如此空洞，这像极了被赋予太多期待的孩子在互联网生态下成长起来的状态，在这个信息过载的时代，我们看到了万事万物（Everything），却始终找不到自己的位置（Everywhere），正因如此，石头宇宙的这一幕才显得如此动人。在一个荒芜的世界里，你不需要去寻找任何的意义，没有纷繁复杂的信息，也没有相互伤害的言语，只有沉默只是安静的存在，这一幕的力量正在于它洞穿了我们这一代人的困境。</p>\n<p>它也同时显示着在这一刻母亲终于理解了女儿， Joy 想要做的是毁灭宇宙吗？事实上她想要毁灭的只有自己，她一切的悲伤都源于在浩瀚的宇宙里找不到自己存在的位置，事实上她质问的也并不是这个世界的意义，而是自己存在的意义。</p>\n<p>在理解女人的困境之前，母亲眼中的 Joy 是一个完全黑化的大魔头，而当她理解了女儿之后，她发现原来在五颜六色外衣之下藏着一个如此悲伤的内核，石头宇宙之后 Joy 变换了两次造型，第一套是五颜六色的小熊套装看似华丽缤纷，但仔细看她脸上的妆容，粉色的亮片洒在眼睛的周边，仿佛彩色的眼泪，额头上如同蛇一般的头发也象征着她纠结的内心。再看这一身五颜六色布料拼贴的衣服，一半卷一半直的头发，甚至是这个酷似小丑的妆容，其实都在暗示在走入贝果象征的虚空时， Joy 的内心并不快乐，相反她是挣扎、撕裂和悲伤的，她一直在各个宇宙里寻找母亲，寻找自己存在的位置。</p>\n<p>所以《瞬息全宇宙》究竟讲了一个什么故事呢？我想或许在最简单的意义上，它关乎一个自我否定的母亲和一个自我厌恶的女儿，她们如何在爱中相互拉扯，弥补两代人之间的鸿沟，而在更深层的意义上，这部电影其实在问我们该如何在万事万物间找到自己存在的位置。</p>\n<p>（ Joy ）“你为什么就不去一个。。。能有更好的女儿的。。。地方呢？”</p>\n<h2 id=\"三-All-at-Once：-Waymand-的方式\"><a href=\"#三-All-at-Once：-Waymand-的方式\" class=\"headerlink\" title=\"三 All at Once： Waymand 的方式\"></a><center>三 All at Once： Waymand 的方式</center></h2><p>事实上《瞬息全宇宙》并不是一个只关于母女的故事，这样的话它会是另一部《青春变形计》，在《瞬息全宇宙》里丈夫 Waymand 扮演着重要的角色，在 Evelyn 看来，真正的男人应该像阿尔法 Waymand 那样勇敢刚毅承担起拯救世界的重任。但在电影里真正陪她战斗到最后的是自己那个一事无成的丈夫，Waymand 这个名字在台湾被翻译成 “威猛“，而它念起来又像极了Women（女人），我猜想这或许是有意为之。</p>\n<p>导演在采访中提到，“我们以为力量就是指阳刚之气，是坚韧不拔，是虚张声势，但此时同理心和善意也是一种力量”。是的，就像饼干也可以是功夫一样，温柔也可以是一种力量。导演用 Waymand 的这个角色解构的正是对于性别的刻板印象，电影有个很动人的细节，在功夫宇宙里 Evelyn 惊讶的发现，如果没有她，原来丈夫也会拥有更好的人生，电影里她一直沉浸在《花样年华》《泰坦尼克号》式的浪漫里，但丈夫更在意的却是他们能否在一起， Waymand 知道如果多一张船票，如果 Jack 没有死，那他们最终都会走向柴米油盐的日常生活，而这些凄美爱情故事里无法实现的结局其实都在当下。</p>\n<p>面对看起来琐碎和平庸的日常 Waymand 的方式，是看到事情更好的一面，在他看来这不是天真，而是必要和必须。在日常生活里他给很多东西都贴上了 Googly Eyes 只要换一个角度杂乱无章的麻烦，都会成为生活中的乐趣。这些塑料眼睛正对应着影片中的贝果，空心的贝果消解着一切象征着虚无，眼睛则是个有核心的圆，它意味着面对和接受也意味着创造，这就是 Waymand 的人生哲学。如果生活本身没有意义，我们为什么不创造意义。在一个家庭故事的内核下，导演在讨论的其实正是存在与虚无的问题，而这个家庭中的每个人都代表着这个问题不同的面向，在我看来影片结尾母女的和解并不是在说 “爱可以拯救一切”，而是在说爱定义了我们的存在。</p>\n<p>母亲和女儿像极了两颗在荒芜世界里的石头，也像极了浩瀚宇宙里相互牵引的两颗行星。就像 Evelyn 说的。</p>\n<p>（ Evelyn ）“这世界能去的地方那么多，为什么我就非得待在你身边？是啊，你是对的，这毫无道理可言。”</p>\n<p>爱这件事也毫无道理可言，但它就是存在。它像一股引力牵引着两颗行星的关系，定义着它们在宇宙中的位置，《瞬息全宇宙》和解的结尾其实并不突兀，导演用了整整两个半小时在论证，不是爱拯救了一切，而是爱定义了我们在万事万物间存在的位置。</p>\n<p>如果你仔细看会发现在 Evelyn 贴上塑料眼睛之后，她洞悉了每个人所需要的东西，有的人抱着小孩，有人抱着狗，有人拿着饼干，每个人的爱其实都不尽相同，是的，导演用了两个半小时的天马行空在不断论证我们为何而存在，是为了我们所爱之人，也是为了我们所爱之物。如果你曾经看过两位导演的前作《瑞士军刀男》一定会印象深刻，在这部电影里同样充斥着各种无厘头的荒谬，荒岛上的一只尸体居然会放屁，而他的屁居然可以作为驱动力帮助主角逃离荒岛。</p>\n<p>导演之一关家永其实就出生在一个典型的华裔移民家庭，他曾经饱受多动症的困扰，在电影的映后采访中，他这么说道，“在我生命的大部分时间里，我都无法逃脱这个自我厌恶的深坑，而试图让放屁的尸体变成可爱的人，其实是我试图说服自己的过程，如果能让放屁的尸体有意义，那么也许我可以让自己的生活有意义，我们试图在电影中找到那些大家看起来觉得荒谬而无意义的东西，然后告诉大家，为什么不呢？这些东西难道不值得有意义吗？而且我们不仅要说为什么不，我还要告诉你，我还要向你证明，也许我们可以想办法让这一切变得美丽，想办法让香肠手指变得浪漫，想办法让荒芜的石头变得超凡脱俗。我认为这就是人类存在的方式，即使在这个浩瀚的宇宙里，我们只是一粒尘埃。”</p>\n<p>实际上《瞬息全宇宙》在国外又叫座又叫好，正是因为他们在后疫情时代下对回到当下拥抱和解的一种渴望，但在国内很多人的评价则聚焦于这部电影并没有切中东亚家庭里最复杂的病根，许多人觉得相比东亚家庭真正的痛处，这部电影最后抛出爱与和解，显得老套而轻飘。</p>\n<p>但我想导演想做的并不是用一部电影来探讨它如何发生如何解决，他只是给出了一个家庭的切面，或许我们并不需要强求一部电影给出一个正确答案，爱和存在有很多种论证方式，而在我看来《瞬间全宇宙》就是美妙的其中一种。</p>\n<p>（切片计划摘录）</p>\n","categories":["写作","文","电影"],"tags":["《瞬息全宇宙》","虚无与存在"]},{"title":"关于焦虑问题的总结（引自张朝阳——星空下的对话）","url":"/2022/08/13/%E5%85%B3%E4%BA%8E%E7%84%A6%E8%99%91%E9%97%AE%E9%A2%98%E7%9A%84%E6%80%BB%E7%BB%93%EF%BC%88%E5%BC%95%E8%87%AA%E5%BC%A0%E6%9C%9D%E9%98%B3%E2%80%94%E2%80%94%E6%98%9F%E7%A9%BA%E4%B8%8B%E7%9A%84%E5%AF%B9%E8%AF%9D%EF%BC%89/","content":"<h4 id=\"第一部分\"><a href=\"#第一部分\" class=\"headerlink\" title=\"第一部分\"></a>第一部分</h4><p>人可以重塑大脑，不要抱怨<br>行为特别重要<br>恐惧焦虑是人的本质<br>解决焦虑会放大焦虑<br>回避、消除会放大焦虑<br>无视、接受焦虑<br>价值观指引<br>忍着难受，做更重要的事<br>eg:担心睡不着觉，去跑步，其实更不好；转移注意力也是解决焦虑不好。（问题行为）<br>忍着痛苦难受，该干啥干啥（治疗行为）<br>关注的时候就会放大，解决就会增加营养。<br>（条件：做事不要极端，要中间。）</p>\n<p><font color=#3399EA>尽早确立你的人生价值观，按照价值观，坚定、主动、积极的生活工作，不论什么情绪来了，继续坚持做事情。</font><br>（价值观引导的有意义的事）<br><font color=#3399EA>行为的正确性很重要。</font><br>不进入情绪化的套子里，就事论事，做可以做能做的事。<br>不要抱怨和过度理想化，要乐观一点点。</p>\n<a id=\"more\"></a>\n\n<hr>\n<h4 id=\"第二部分\"><a href=\"#第二部分\" class=\"headerlink\" title=\"第二部分\"></a>第二部分</h4><p>不要钻牛角尖，保持在中间地带。</p>\n<p><font color=#3399EA>负面情绪来了不要思考、关注、解决，越思考越关注越解决就越放大，反之则会在一段时间后自行远离消失。人生中有更重要的事情要做，所以对自己彻底的诚实，当负面情绪来了就忍着负面情绪去继续做人生中更重要的事，负面情绪跟这事没有任何关系，这样负面情绪就会远离。</font></p>\n<p><strong>tips：</strong></p>\n<ol start=\"0\">\n<li>情绪是对既定事实的认知与反应，事是事，情绪是情绪，要积极的认知与反应。</li>\n<li><font color=#3399EA>前额叶和海马区与负面情绪建立回路，这个回路会自动消失，但思考和关注就会加强这个回路，放大焦虑、抑郁，从而深陷泥潭。</font></li>\n<li>大脑是可塑的，如果你的行为是错误的，会负向加强，即你过去什么样会加强你什么样；而如果你的行为是正确的，你就可以彻底的改变自己。（动作、想法都是行为）</li>\n<li>做更重要的事不是为了转移焦虑、抑郁、恐惧的注意力，更不是解决焦虑、抑郁、恐惧，而是更重要的事是有意义的，是积极、主动地践行价值观。（eg.楼上邻居吵闹，找邻居协调不是为了解决情绪，而是为了让自己有更好的环境，保护整个家庭的利益。）</li>\n<li>重要的事是价值观引导的有意义的事，所以要尽早的确立人生价值观，然后按照价值观去坚定地、主动地、积极地生活、工作。</li>\n<li>每日要发声</li>\n</ol>\n<hr>\n<h4 id=\"第三部分\"><a href=\"#第三部分\" class=\"headerlink\" title=\"第三部分\"></a>第三部分</h4><p>我经常会想很多后果，于是为了避免这些后果逃避，比如面试觉得自己上不了就不去，后来想通了，不考虑那么多，就按照招聘的要求准备面试，等来的那一天逼自己出门不要取消，真的到了那个场地就不会有临阵脱逃的想法，整个过程都很流畅，虽然我实力确实不够，但是起码我那之后就不畏惧面试了，反而投了更多</p>\n<hr>\n<h4 id=\"第四部分\"><a href=\"#第四部分\" class=\"headerlink\" title=\"第四部分\"></a>第四部分</h4><p>逃避是为了避免产生这种情绪而刻意去选择的行为（例如为了缓解焦虑，睡好觉而选择去跑步）。<br>而无视是单纯在价值观驱动下去选择当下对我有价值的行为，（例如价值观希望自己成为健康，身材好的人，所以选择去跑步）<br>不要选择逃避，更不要尝试去解决，越关注，负面情绪越得到强化，陷得越深。<br><font color=#3399EA>接受这种负面情绪无法被迅速解决的事实，它将与你在一段时间内并存，然后忍着痛苦难受，无视它！去选择做自己价值观内所认为的有意义的事情或者对自己有价值的事情。坚持两周或者一个月，等这种无意义的负面情绪完全被你略过去，这时候的你才是冷静且客观的，以理性的角度（不带任何消极情绪）再回头看这件事情，反倒解决了！</font><br>所以，确立自己的价值观（无论说小到你要做一个爱干净的人，所以你选择每天打扫卫生。还是说大到你要做一个有毅力不畏惧失败的人，所以当面试多次遭拒，考试屡战屡败，你选择不放弃，继续努力）。对自己多一点耐心，多一点包容，谁都不是一帆风顺。<br>价值观确立了，但问题是在每一次细微的负面小情绪来临时，怎样才能坚定的去做价值观所认为的有意义的行为呢？这源于你的自信！<br>真正的自信不是你的学习工作社交能力有多强，你的智商情商有多高，你的长相有多出众，你的家境有多优越，这些都是客观的短期内无法改变的事实。而是你对你自己当下所确立的价值观充分完全的认可！</p>\n<p>所以我们年轻人要多读书，多经历，尽早确立自己的价值观，并充分认可它！然后坚定的去实践它！</p>\n","categories":["写作","焦虑"],"tags":["张朝阳","《星空下的对话》","焦虑"]},{"title":"对话张朝阳","url":"/2022/08/13/%E5%AF%B9%E8%AF%9D%E5%BC%A0%E6%9C%9D%E9%98%B3/","content":"<p>程苓峰：江湖上有个说法。搜狐老出能独当一面的人，龚宇、古永锵、李善友、陈一舟、王滔、王小川。这跟你的风格有关。“张老板在后面。下面人要想清楚，然后去急、拼、要资源，逼着你成熟。”另一个风格是陈天桥。“桥哥很快，想清楚后直接画张蓝图给你；但下面跟不上，揠苗助长。”马化腾和马云处于两个风格之间，比较平衡。</p>\n<p>张朝阳：我部分认可。我的姿势是lay back。更多是观察形态，看它的生长。不像陈天桥那种。主观的计划性往往跟不上现实。尤其互联网，哪里能爆发这个事难以预测。</p>\n<p>如果要想预测，你必须深入的潜入这个产品当中，你才能准确预测。这就是腾讯为什么做得好的原因。战略计划的推进的前提条件是，你必须成为一个最好的产品经理，你在第一线能摸得着方向，能判断，开启战线。</p>\n<p>我介于马云和马化腾之间，我没像马化腾变成深入浅出的产品经理。但也不像马云那样，那么不是一个产品经理。我以前在营销上做得很多，在产品上花时间不多。我曾经深入过，但没特别在第一线做产品经理。这样的话，我太主动规划产品，方向就可能错。我就坐在旁边看怎么生长。</p>\n<a id=\"more\"></a>\n\n<p>程苓峰：你现在最想“天下皆知”的是什么？</p>\n<p>张朝阳：人生的意义。</p>\n<p><font color=#3399EA>以前目标就是把搜狐做好，让员工都赚到钱，然后就休闲娱乐。现在觉得人生意义在于参与和创造。这是人和动物的区别，人要创造价值，活着才有意义。工作本身就是一种存在。</p>\n<p>人存在的意义以及快乐的前提，是人要跟这个世界充分的交流。这样就能理解为什么默多克70多了还在拼命为公司工作，为什么盖茨那么成功还要做慈善事业，每天乐此不疲去解决人类的问题。</p>\n<p>以前我不太理解，以前我觉得我人生太快乐了，有那么多好玩的事，为什么要工作。但那些好玩的事很肤浅，人存在的深刻意义在于他必须参与。做一些有价值的事。</font></p>\n<p>程苓峰：做搜狐是件有价值的事吗？</p>\n<p>张朝阳：比如搜狐有一万个员工的责任，比如搜狐做新闻媒体，有社会责任。中国娱乐业以前很糟糕，后来我们打盗版，现在版权起来了，做内容的能赚到钱了。</p>\n<p>现在中国娱乐业处于爆发前夜。我在美国亲眼看到好莱坞的伟大，让美国文化输出全世界，让美国人民生活有趣。我希望在中国的娱乐业爆发过程当中推一把力。同时搜狐作为新闻平台能以建设性和向上的力量推动中国进步。这样在人生存在的意义又增加了一层。</p>\n<p>这都是脱离小我、脱离低层次的赚钱，花天酒地的那个层面。这也是人类的进化所选择的，引起人类深刻的快乐而不是浅层次的快乐。几十万年前有很多物种，物种如果不创造价值让自己快乐，就不能延续。</p>\n<p><font color=#3399EA>丛林法则和弱肉强食不会产生规则、秩序、精神力量、道德尺度。那个环境里没有谁有序的去创造，那样的物种会消亡。</p>\n<p>人和动物的区别，是人类大脑皮层极其发达，对理智的精神的超越，不是动物层面的愉悦感。愿意利他、而且创造价值，人类才能发展。其他物种消亡了，人类存在，这是大脑的进化选择。如果说我以前规划的人生是赚很多钱出很大名，自己享乐渡过余生。现在觉得那个东西持久不了。必须还要工作创造价值，活到老工作到老。</font></p>\n<p>程苓峰：说中国娱乐产业处于爆发前夜，为什么？</p>\n<p>张朝阳：市场规模很大。两件事促进了它。</p>\n<p>一个打盗版，涓涓溪流到现在成为洪流。对知识产权的尊重使影视作品能赚钱，这很重要。一些私营制作企业即使没关系卖到电视台，也可以卖给网站。网站是民营的。</p>\n<p>二是民营的文化地产院线起来了。比如万达影城。以前都是国营电影院。现在要账算得清楚，要能赚到钱。这两个推动力导致中国对内容的制作产生前所未有的爆发，品质越来越好。</p>\n<p>程苓峰：听说你至少五六年前就开始打坐了。</p>\n<p>张朝阳：<font color=#3399EA>以前不是真打坐，包括以前练瑜伽、登山、对健康极其关注，身体也好。但那些都是小儿科，我这两年还真打坐了一段时间。</font></p>\n<p>程苓峰：真打假打有什么区别？</p>\n<p>张朝阳：<font color=#3399EA>以前打坐就是自己思考问题。真打坐是不思考，关注呼吸。我倒没有出禅，但体会到清安的感觉。进入到什么都不想、一种快乐的感觉。</font></p>\n<p>这两年是人生观整体在苦难中成长。现在看我之前，那时真是快乐得不知所以然。</p>\n<p>程苓峰：在苦难中成长。你的苦难是什么？</p>\n<p>张朝阳：这个我不想多谈，这是一个精神问题。</p>\n<p><font color=#3399EA>结果是我对大脑必须有关注。了解到所谓神经原可塑性原理。如果你的思维不管好它，如果朝负面走，像漩涡一样，很可怕。往正面走就很好。大脑是任意的，思维是可塑的。</p>\n<p>一个痛苦的人可以变成一个快乐的人，一个快乐的人如果钻牛角尖也变得痛苦。脑子是可以变的。但改变大脑的方式不能靠思想，而是靠重复性的行为。只有行为可以改变脑子，而且要重复。佛教已经证明这一点，西方科学也在证明这一点。佛教几千年来让多少人摆脱了痛苦。通过重复的打坐念咒，重复性的行为。修为，是说你的人格一定是要修的，靠思考是出不来的。一定要修，修的话，需要重复性的行为才能改变。</font></p>\n<p>程苓峰：怎么样形成重复性的行为？</p>\n<p>张朝阳：<font color=#3399EA>要有一些原则和一些坚持，也就是所谓的价值。有了坚定的价值观和原则，就会坚定不移重复去做很多事。当重复做很多事，长时间后你的性格就会被改变。价值观、以及原则的重要性。</font></p>\n<p>程苓峰：<font color=#3399EA>这就是佛教里的“戒”和“定”？</font></p>\n<p>张朝阳：对。</p>\n<p><font color=#3399EA>我们这代人尤其是成功的人，出现精神危机的很多。比如在美国就不是。像盖茨、巴菲特，基督教文化以及整个国家的价值观很牢固。基本的谦卑，做事有一定的规则，有媒体、公众、上帝看着他。所以美国成功的人没有发展成精神问题。因为他认为自己在上帝面前是谦卑的，他有规则。如果不按照这个规则，像泰格·伍兹那么多女朋友，社会和媒体就一棍子打死，他没法活。</p>\n<p>中国知识分子的传统的观念是先天下之忧而忧、后天下之乐而乐。但利他概念被中断了。这些多年。共产主义信仰大家也不信。</p>\n<p>我们这代人实际是没价值观的，也没原则。所以有丛林法则，各种各样的原因你可能就成功了。你开始利用而不是遵守原则，利用的尺度很大。最后你放弃了谦卑，开始自我膨胀。</p>\n<p>神经原可塑性原理就是说，你管理不好自己就到负面，思维很容易陷入。尤其当你获得很多、自我膨胀时，神经原可塑性原理就会从负面角度来攻击你。神经原可塑性原理是2000年一个诺贝尔奖获得者证明的。近几十年人类大脑最大的科学发现。</font></p>\n<p>程苓峰：<font color=#3399EA>中国很多人是为所欲为。</font></p>\n<p>张朝阳：<font color=#3399EA>对，没原则。导致中国现在的精神危机、抑郁群体非常多。尤其在企业家里面。</font></p>\n<p>程苓峰：<font color=#3399EA>外面人很少知道。</font></p>\n<p>张朝阳：<font color=#3399EA>很多人都不说。</font></p>\n<p>程苓峰：<font color=#3399EA>他们怎么解决这个问题？</font></p>\n<p>张朝阳：<font color=#3399EA>中国心理学发展不够。靠药物。</font></p>\n<p>程苓峰：<font color=#3399EA>中国的儒释道能解决这个吗？</font></p>\n<p>张朝阳：<font color=#3399EA>传统这一套有几千年了。可能能解决。但中断了很久。汉地的佛教被官化了，寺庙变成民政部的单位，汉地佛教很悲惨，近60年没出什么大家。没一个整体的全民族的整体文化，每个人都探索各种各样的方式。</font></p>\n<p>程苓峰：互联网这种技术本身，对这个有帮助吗？</p>\n<p>张朝阳：<font color=#3399EA>互联网把西方价值观带进来了。搜索引擎能找到各种东西。那些潜移默化的行为方式，通过美国电影进来。现在年轻人挺美范儿的。但好莱坞的电影并没准确反映美国社会，美国真正的社会是非常善的。我们电影里整天看的是枪击、凶杀。到美国小城市，人们非常善良，有很强的价值观。</p>\n<p>光靠引进美国的文艺作品，对价值观的树立还是有限的。我们现在需要中国年轻人的精神导师，或者确立中国的大家，给中国年轻人提供价值观。</font></p>\n<p>程苓峰：生长于本土。</p>\n<p>张朝阳：对，植根于本土。不止嫁接于好莱坞文化，那个只是有帮助。</p>\n<p>程苓峰：这两年你去了什么地方？</p>\n<p>张朝阳：<font color=#3399EA>看佛教去尼泊尔、西双版纳。也跟西方的心理医生接触讨论。读一些书。还有中医，各方面都尝试。挺不容易的。希望是一种成长。</font></p>\n<p>（摘自《云科技》）</p>\n","categories":["写作","精神问题"],"tags":["神经原可塑性原理","人生的意义","打坐","重复性的行为","价值观","信仰","规则","精神危机"]},{"title":"张朝阳和俞敏洪吃着火锅唱着歌：人生就在半山坡上，要一脚一脚的","url":"/2022/08/13/%E5%BC%A0%E6%9C%9D%E9%98%B3%E5%92%8C%E4%BF%9E%E6%95%8F%E6%B4%AA%E5%90%83%E7%9D%80%E7%81%AB%E9%94%85%E5%94%B1%E7%9D%80%E6%AD%8C%EF%BC%9A%E4%BA%BA%E7%94%9F%E5%B0%B1%E5%9C%A8%E5%8D%8A%E5%B1%B1%E5%9D%A1%E4%B8%8A%EF%BC%8C%E8%A6%81%E4%B8%80%E8%84%9A%E4%B8%80%E8%84%9A%E7%9A%84/","content":"<center>\n\n<p><img data-src=\"https://s2.loli.net/2022/08/13/tyb3k9Nr8aTxjBH.png\" alt=\"image.png\"></center></p>\n<p>文/陈睿雅</p>\n<p>&emsp;&emsp;见到张朝阳，俞敏洪主动讲起自己“最大的问题”是睡眠不好。他每经历睡得非常不好的3、4天，才会有一个深度睡眠。</p>\n<p>&emsp;&emsp;直播的地址选在离北京主城区车程约100公里的密云清水河畔。数年前，张朝阳在这里购置了土地，命名为“搜狐农场”。但他自己来得并不多。</p>\n<p>&emsp;&emsp;这里山清水秀，茂盛的芦苇荡、河水清澈。两个商界大佬主动脱掉鞋袜，挽起裤腿，踩进了河水中。</p>\n<p>&emsp;&emsp;如果说东方甄选是俞敏洪的二次创业，那张朝阳的物理课则是这位早年将互联网带入中国的商业人物的一次跨界尝试。</p>\n<p>&emsp;&emsp;5个小时的直播里，他们天南地北的聊，聊退休、俞敏洪的二次创业、张朝阳的物理课、人生、心理困境等等。据俞敏洪在“老俞闲话”里记载，最终结束的时候，搜狐视频有4000万人次路过，俞敏洪的抖音也有3000多万人路过。</p>\n<a id=\"more\"></a>\n\n<p>&emsp;&emsp;以下为对话内容，篇幅所限，本文作不违背原意的删减：</p>\n<center>\n\n<p><img data-src=\"https://s2.loli.net/2022/08/13/5dEH649rYmqkfPo.png\" alt=\"image.png\"><br>来源：搜狐微博</center></p>\n<p>&emsp;&emsp;<strong>谈退休：如果没有这一次的变化，我应该只有20%～30%的时间放在新东方</strong></p>\n<p>&emsp;&emsp;俞敏洪：你现在每天在公司上班几个小时？</p>\n<p>&emsp;&emsp;张朝阳：我现在每天12个小时，早上7点到晚上7点，但是我5点就到公司了。</p>\n<p>&emsp;&emsp;俞敏洪：所以没人的时候，你自己这个时候在工作是吧？</p>\n<p>&emsp;&emsp;张朝阳：对。我的工作包括物理课，也想点物理问题，或者计算一下，或者是看看公司其他方面产品。</p>\n<p>&emsp;&emsp;俞敏洪：有退休的打算吗？我是一直有退休的打算。</p>\n<p>&emsp;&emsp;张朝阳：没有，我都不太相信退休这个词。我在国外碰到一些人，他退休那天马上给自己打造一个新的办公室，他每天还是从住的地方去他新的办公室。</p>\n<p>&emsp;&emsp;人是可以不做你现在的工作的，但是你一定要有工作做。所以说，可能退休以后你可以选一个自己的爱好，然后把它当成一件事来做。</p>\n<p>&emsp;&emsp;你是想退休是吗？</p>\n<p>&emsp;&emsp;俞敏洪：不。我想说的是，我们这个身份，退休它是没有一个明确界限的。我把退休界限区分成什么？区分成，我为新东方干活多，还是为自己的性命干活多？为自己的性命干活，就是人要活得真性情，你干的事情都是自己喜欢干的，你在剩下的生命中间，你做的每件事情都不是因为责任和义务，不是因为环境的压迫，或者是某种你没有办法、不得不去做的事情。</p>\n<p>&emsp;&emsp;所以，如果没有这一次新东方的变化的话，我现在应该是只有百分之二三十的时间放在新东方了，百分之六七十时间肯定是放在我个人想要做的事情上面。比如说，我再也不用计算几点到几点，我要干什么。</p>\n<p>&emsp;&emsp;比如说我想出去旅游，我就可以背着包出去了，我想读哪本书，我可以坐在家里，一天我就读那本书。比如说我想跟Charles喝个啤酒、聊聊天，我打个电话就去了。这个是我想要的生活。</p>\n<p>&emsp;&emsp;但是因为新东方转型，我现在不是百分之二三十的投入了。到我这个年龄，60岁，肯定不会100%投入，我现在大概在新东方上面投入了应该还不到60%。</p>\n<p>&emsp;&emsp;我现在有一半时间其实还在做自己喜欢做的事情。甄选这件事情其实至少有一半以上真的是我喜欢做的。比如说直播跟朋友聊天，我还是挺喜欢请一些嘉宾聊聊天、沟通。</p>\n<p>&emsp;&emsp;第二个喜欢的是，因为你在帮农民卖农产品，这个农产品是你在帮助别人。但是，这种事情的出现，肯定会带来很多你不喜欢的事情，怎么处理内部的利益结构调整分配，上市公司怎么和股东等等打交道。你喜欢任何事，都不能完全根据爱好、热爱，其实都是需要在责任、义务的驱使下，最后变得很喜欢。</p>\n<p>&emsp;&emsp;所以我还是有比较深刻的意识。你喜欢干的事情背后，一定会有某些你不喜欢的事情出现。所以，你刚才问挣钱是不是我喜欢干的，一部分肯定是我喜欢干的，另外一半肯定就是我不喜欢干的。但是你为了把喜欢干的事情干下去，不喜欢干的事情，你就不得不干下去。</p>\n<p>&emsp;&emsp;<strong>谈高潮与低谷：从高潮掉下去与从低谷走出来，哪个更难？</strong></p>\n<p>&emsp;&emsp;俞敏洪：在高潮的时候掉下去（这件事更难）。</p>\n<p>&emsp;&emsp;张朝阳：我觉得低谷走出来很难。</p>\n<p>&emsp;&emsp;俞敏洪：我觉得（低谷走出来）倒不难。因为我习惯低谷。</p>\n<p>&emsp;&emsp;这么说吧，我跟张朝阳比，也许我更加习惯一无所有。因为（我）一无所有的时间太长。我是拿着国家的助学金度过了我的所有大学时光的。</p>\n<p>&emsp;&emsp;所以我觉得，只要不把命丢了，（就）没事。爱干嘛干嘛。</p>\n<p>&emsp;&emsp;大不了我回农村，我家还有个宅基地。所以我对低谷不担心，反而就是忘乎所以这件事情，有的时候就会有问题。</p>\n<p>&emsp;&emsp;我觉得我一点都不厉害。你看学英语的英语没学好；号称自己喜欢中文，中文没学好；号称自己喜欢教育，教育没做好，是吧？号称自己喜欢直播，结果还被董宇辉抢了风头。</p>\n<p>&emsp;&emsp;张朝阳：我觉得你有反向凡尔赛的嫌疑。</p>\n<p>&emsp;&emsp;尽管你说一无所有，但是当年你如果是大学生的话，那是天之骄子。如果你考上北大了，你简直都觉得自己是人上人了，你知道吗？</p>\n<p>&emsp;&emsp;你看我从西安到北京坐在火车上，我带着清华的校牌，你知道吗？特别骄傲。</p>\n<p>&emsp;&emsp;俞敏洪：跟我不一样，我一出北大立刻就把校牌摘掉了。唯恐人说这是北大的，完了我猥琐样，怕给北大丢脸。</p>\n<p>&emsp;&emsp;我大学一二年级穿的都是打补丁的衣服，一点不假。所以我们体育老师上课的时候叫我“大补丁”，因为我整个屁股上的一块布打了一块大补丁。</p>\n<p>&emsp;&emsp;张朝阳：尽管那时候物质比较匮乏，但是他（指俞敏洪）确实有点过了。</p>\n<p>&emsp;&emsp;俞敏洪：（知道）当初为什么我到了美国叫王强、徐小平，他们能回来吗？他们的推理特别简单，就是连俞敏洪都能在中国把事情做成，我们回去没有做不成的道理。因为在他们眼中，我在我们班是一个挺没出息的（人）。</p>\n<p>&emsp;&emsp;（但）他们放心我的人品。他们觉得，他们回来一定能够比我做得更加天翻地覆。</p>\n<p>&emsp;&emsp;张朝阳：所以黄晓明演的电影《中国合伙人》……</p>\n<p>&emsp;&emsp;俞敏洪：一半真一半假。那个电影一半真一半假。</p>\n<p>&emsp;&emsp;我的那句口号（在绝望中寻找希望）是新东方的校训，在93年就提出来了，因为当时也是比较艰难的时候。</p>\n<p>&emsp;&emsp;我觉得我有两个特点值得大家稍微学一下的。一个是做事情确实比较坚韧，坚韧就是有弹性，你遇到什么问题你不退，并且看准了目标，你觉得这个目标值得做的话，你会努力前行。坚韧也包含了不怕失败。我刚才已经说了，因为出生就是一个很普通的家庭，所以失败对我来说，它就有一个底在那。</p>\n<p>&emsp;&emsp;还有一个，我觉得我确实还是比较善于学习。我的学习比较慢，也就是说我不是成绩上一学就好（的类型）。在北大，我学到大四毕业的时候，我的成绩也不怎么样，但是我善于持续性地去观察别人做事情的方式，并且回过来再看看我自己这样的事情到底能不能做。比如说我比较擅于看人好的一面，比如说Charles一定也有很多问题，但是我看到他都是好的一面，值得我学习的一面。</p>\n<p>&emsp;&emsp;<strong>谈“张朝阳的物理课”：马斯克的卫星一天绕多少圈？我在下香山的路上心算出了公式</strong></p>\n<p>&emsp;&emsp;俞敏洪：这一次Charles出来，其实引起了很多讨论。我觉得他就应该这么做，为什么？</p>\n<p>&emsp;&emsp;他在讲物理课的时候，尽管是小众，但是他知道能听到他物理课的人都是一群高智商的、并且对物理有兴趣的人，得到他们点赞的时候，他心理的满足和（把）搜狐做成功（获得）点赞是不一样的。</p>\n<p>&emsp;&emsp;搜狐做成功（获得）点赞的反射弧是非常长的。你把一个企业做成功，到最后人们给你点赞，并且长久保持对你企业的赞扬，这件事情是一个特别长久的过程。而他讲一堂物理课，当场的激励是非常重要的，能使任何人摆脱内心的不痛快。</p>\n<p>&emsp;&emsp;人由长久的反馈和及时的反馈构成的正能量（驱使着）不断前行。有的人自己能够做到，有的人要靠别人来做，但是实际上它是内外兼容的一个结果。</p>\n<p>&emsp;&emsp;张朝阳：每个人在寻求这个世界对你的认可，这件事是无可厚非的，是天经地义的，这是人的本性。</p>\n<p>&emsp;&emsp;更长远的，你关心你在死亡之后，你的墓碑上怎么描述你？所以说人的折腾，像出名，或者说做一些有贡献、有意义、让别人认可你的事情是非常光明正大的，不应该被称作是这个人瞎折腾，这个人就得瑟。</p>\n<p>&emsp;&emsp;其实我们人活着就应该折腾，如果你不折腾的话，你活着干嘛对吧？我们每个人一丝不挂地到了宇宙来，一丝不挂地走，所以你一定要留下痕迹，你要有所受益，你要创造点价值，你要给别人带来一些贡献，让环境有所改善，或者说能够有一种进步意义。这是人的本质。</p>\n<p>&emsp;&emsp;俞敏洪：你教物理其实（就）是这么一种感觉，这是为什么？</p>\n<p>&emsp;&emsp;张朝阳：它是一一箭三雕，三、四个意义。其中一个是我个人的兴趣。</p>\n<p>&emsp;&emsp;这辈子这个世界给你分配了很多角色，这种角色的分配可能是偶然造成的。</p>\n<p>&emsp;&emsp;我的分配角色（之一），我早年是碰到了当年科学特别兴盛（的时期），科学特别流行。所以我在中学、大学的时候对物理特别感兴趣。</p>\n<p>&emsp;&emsp;如果分配给我的这个角色是研究物理的，而我这辈子没有把它搞明白，我就觉得对我的角色没有尽到责任。所以这是一个角度，我要研究清楚，这是兴奋、兴趣。</p>\n<p>&emsp;&emsp;另外，包括对现在搜狐视频的直播，也是有帮助的，对业务也有好处。</p>\n<p>&emsp;&emsp;第三个还是有一些公益。</p>\n<p>&emsp;&emsp;因为物理教学或者自然科学，现在在中文网络平台上，它的短视频表达和文字表达特别的少。所以说我们的这种表达，包括一些学习方法，都是有所贡献的。所以有好几个意义。</p>\n<p>&emsp;&emsp;俞敏洪：你这个物理课会给大学教授们带来压力吗？我觉得一定会吧。</p>\n<p>&emsp;&emsp;张朝阳：我觉得他们圈里的人，更多是一种欣喜的感觉。因为他们以前觉得自己在象牙塔里面做研究，好像不被人、社会认可，觉得没有人知道他们干嘛。物理老师或者物理教授或者物理科学工作者，你说的什么别人不知道，还是有点孤独。</p>\n<p>&emsp;&emsp;俞敏洪：你把物理变成了一个大众的话题。</p>\n<p>&emsp;&emsp;张朝阳：从牛顿到后来的伽利略、麦克斯韦、波尔兹曼、凯尔文，到爱因斯坦，到后来的很多人，在那么早早的时候，把人类的智慧搞出这么完美、优美的理论。200年以后它应该成为一种通识教育。</p>\n<p>&emsp;&emsp;现代人对200年前高深的理论应该有所了解。因为它构成了我们这个世界，真的贡献非常大。</p>\n<p>&emsp;&emsp;所以很多物理圈里的人就很高兴，觉得我这么一出来讲，我们的物理终于变成了一个大众的话题。很多小男孩小女孩，平常一天到晚就玩抖音，突然开始要想这些重大问题了，他们物理工作者、圈里人挺高兴的。这是一种传播。</p>\n<p>&emsp;&emsp;俞敏洪：你自己倒不是（感到）压力，现在是一个越来越认可的过程是吧？</p>\n<p>&emsp;&emsp;张朝阳：我倒自我认可，我觉得渐入佳境，我的水平也在提高。</p>\n<p>&emsp;&emsp;其实我以前不是搞理论物理的，我的中学物理特别好，但是大学是有点厌学了，后来我到美国去做实验物理。所以我在理论方面后来没什么长进了，也不怎么学，也有点厌学。</p>\n<p>&emsp;&emsp;现在等于把我再造了，过去四五年我是重新reinvent myself。</p>\n<p>&emsp;&emsp;俞敏洪：你在直播之前准备了多长时间？从你有这个想法到开始公开讲物理课，中间有多长的时间跨度？</p>\n<p>&emsp;&emsp;张朝阳：我在16年就已经开始再造人生。</p>\n<p>&emsp;&emsp;俞敏洪：16年已经从阴影中走出来了？</p>\n<p>&emsp;&emsp;张朝阳：还没有完全。16年、17年就开始往外走，然后就开始直播英语。</p>\n<p>&emsp;&emsp;直播英语好几年之后，播一播物理的课，经常有时候会算一算，有时候有点小兴趣。我发现我当年的兴趣还是没有灭掉，后来我就说我要讲一讲，所以从决定讲到开讲也就一个月。</p>\n<p>&emsp;&emsp;其实我们公司高管团队在爬香山的路上，我们谈到同步卫星的角速度的问题——马斯克的卫星它一天是绕多少圈？</p>\n<p>&emsp;&emsp;然后我一算，我当时就在下香山的路上，我心算就算出来公式了你知道吗？然后我拿公式回来算了算，一天转16圈。后来我们（国家）也发射卫星，我就预测它转16圈，然后一看，跟公开的新闻报道完全一样。</p>\n<p>&emsp;&emsp;后来我就开始（直播物理课），所以说从去年11月份开始讲物理了。</p>\n<p>&emsp;&emsp;<strong>谈墓志铭：当有一天你离开的时候，你的墓志铭会写什么？</strong></p>\n<p>&emsp;&emsp;张朝阳：我活在中国从封闭走向改革开放、也接触世界的年代。学习也足够好，后来成为物理方面的一个学生。后来看到了互联网的时代，成为早期把互联网带向中国的几个人之一。后来也创办了一个不错的公司，以后还可能会更好。同时也对物理的大众传播起到了一定的作用，也热爱运动、热爱生活。还是一个不错的人生。</p>\n<p>&emsp;&emsp;俞敏洪：我觉得他的墓志铭很简单。这里埋葬的张朝阳，一个最有意思的灵魂。就可以了。我呢，一个很没意思的灵魂。</p>\n<p>&emsp;&emsp;张朝阳：你这种叫Self depreciated(自贬)。英文叫humanity，是一种非常好的品质，就是谦卑的品质，humility。</p>\n<p>&emsp;&emsp;俞敏洪：我要写的话很简单。一个生活得还算凑合，对得起自己的人。</p>\n<p>&emsp;&emsp;我觉得我活的还算凑合，因为这个世界它毕竟不是所有的知识你都能学到。比如说物理数学我都不行，但是你用自己的能力让自己生活得更好，让周围的朋友们、家人生活的更好，并且还能为社会做点事情。</p>\n<p>&emsp;&emsp;回顾来看，你自己还能做的事情不一定是所有的事情，绝大部分的事情对得起自己良心的拷问，我觉得就可以了。</p>\n<p>&emsp;&emsp;张朝阳：而且我们的墓志铭还没写完是吧？</p>\n<p>&emsp;&emsp;我觉得人生依然很长，我这辈子还要做好多事情，现在我觉得这辈子可能只做了1/3的事情，还有2/3的事情没做。The best is yet to come.还有更精彩的一些还没体验到。可能每天都有新鲜的内容去等着你。</p>\n<p>&emsp;&emsp;俞敏洪：（假设我们有某种神奇的技术可以发一条信息给20岁的自己）我肯定会发，你tmd不知道后面你还是能做点事情的。</p>\n<p>&emsp;&emsp;张朝阳：（我会说）保持谦卑吧。Stay humble。你要是不stay humble你会有很多遗憾。</p>\n<p>&emsp;&emsp;人生是过得很快的，很多事情一爽就过去了。所以当你在做这个事情的时候，你一定要珍惜机会，珍惜得到的东西，要认真地对待，因为很快就过去了。</p>\n<p>&emsp;&emsp;俞敏洪：其实很快过去也没关系，因为人生总是回头看的时候才发现时间过得好快，往前看的时候常常会觉得时间还有或者过得很慢。</p>\n<p>&emsp;&emsp;所以快慢之间其实一个是往前看，一个是往后看。比如说我跟Charles都会觉得时间过得很快，他做搜狐、我做新东方都是青春年少，都没超过30岁。但是现在回头一看，我们都快60岁了，所以时间过得很快。</p>\n<p>&emsp;&emsp;回头一看，我觉得只要有一个问题，你能回答，就是说你从青春时期到现在，你做的事情基本上能对得起自己度过的这段时间，至少我个人觉得不后悔。</p>\n<p>&emsp;&emsp;人对自己的选择本身就不应该后悔，你选择了，就从选择中间再争取最好的结果。就像你选择了一条路往东，选择了一条路往西，你选择了往西再往东是不可能的，往东再往西是不可能的。Get the best all of it.</p>\n<p>&emsp;&emsp;张朝阳：我是觉得，我成长得比较慢，已经长到年龄很大的情况下，也都不知道自己这辈子要干什么，这样的话就浪费时间。</p>\n<p>&emsp;&emsp;所以为什么我现在每天要工作这么长时间，是因为我觉得我浪费了很多的时间，因为我花了很多年才成长（起来）。我在美国见到我的一些同学，一些美国人，他们中学或者是大学的时候，就已经知道自己这辈子要干什么，很明确了。所以他们就成熟得很快。这样他们人生的大段时间认真在做很多的事情。这个是我感受到的。</p>\n<p>&emsp;&emsp;<strong>谈心理困境：我本来想开一门心理课的，但现在光英语和物理课已经够我忙的了</strong></p>\n<p>&emsp;&emsp;俞敏洪：我觉得张朝阳的感性非常丰富。他正是因为感情太丰富了，后来才会遇到一些心理上的问题。</p>\n<p>&emsp;&emsp;张朝阳：没问题，没问题。</p>\n<p>&emsp;&emsp;俞敏洪：现在当然绝对没问题。</p>\n<p>&emsp;&emsp;我恰恰就是因为理性的东西不够，感性太丰富了，也遇到了一些心理上的问题。</p>\n<p>&emsp;&emsp;每个人对世界的感受都是不一样的，我觉得这个感受不一样，其实完全没有问题，只要不越过边界就行。因为每个人必然会有对这个世界的不同的感受方式，看见同一颗星星，他想的是氢核聚变。我想的是这颗星星是不是前辈子我的命运（笑）。</p>\n<p>&emsp;&emsp;张朝阳：以我个人的经历和现在我来看的话，我觉得人是可以被彻底改变的，但是是个双刃剑。其实有一个很著名的、获得诺贝尔奖金级别的研究，就是叫大脑可塑性原理。人的大脑是可塑的，但是是个双刃剑，如果你的行为不对，它就会加强你的负向，你过去什么样的，会加强你是什么样的；如果你的行为正确，你就可以彻底改变自己。</p>\n<p>&emsp;&emsp;行为的正确性是很重要的，我们每个人离抑郁症和焦虑症只有一步，你不要以为你自己没有、挺好，其实每个人就差那么一步。如果每个人都在半山坡上待着。半山坡我们稍微不小心一步走岔了，我们就往下滚了。</p>\n<p>&emsp;&emsp;所以人生就逆水行舟，或者人生就在半山坡上，要一脚一脚地，或者拿冰镐卡住，别让你滑下去。</p>\n<p>&emsp;&emsp;比如说我们有疑病症。我上次在搜狐视频上看直播，有一些医生讲疑病症，（我）就老担心我得那个病了，然后就把自己折磨得不行，整天都没法干活，工作什么都没想，一天担心自己得什么病了。后来（我）就下定决心我要开始振作。然后我要按照我的价值观引导，我的价值观告诉我要去做一个健康的人，我要开始每天起早上班。</p>\n<p>&emsp;&emsp;所以要对自己彻底诚实。当你焦虑恐惧难受的时候，你忍着难受，想着你还有人生更重要的事情要做，你去做那件事情，这件事情跟你之前没有关系，这样你最后突然发现你焦虑本来在这，然后会diffuse、diffuse。</p>\n<p>&emsp;&emsp;俞敏洪：他刚才说的diffuse，我如果用一个通俗易懂的话来说就是转移注意力。</p>\n<p>&emsp;&emsp;张朝阳：就像我跟他们说的，尽早地确立你的人生价值观，然后按照你的价值观坚定、主动地去积极生活和工作。不论什么情绪来了，你都要继续坚持做这件事情。这个对心理健康非常重要。</p>\n<p>&emsp;&emsp;俞敏洪：对。不能沉浸在你的焦虑和恐惧害怕中，因为这个东西让你无法往前，这个东西有的时候会让人无法自拔。</p>\n<p>&emsp;&emsp;张朝阳：这个无法自拔就跟举重运动员举不起自己一样，你越举越难受，就跟你在泥潭沼泽里边你越挣扎却越陷越深。</p>\n<p>&emsp;&emsp;俞敏洪：最好的办法是去做，你认为对你还有点用的事情。</p>\n<p>&emsp;&emsp;张朝阳：所以你在泥潭里边，你的价值观就像一个绳子把你拖上去。</p>\n<p>&emsp;&emsp;我本来想开一门心理课的，但是也一直没开，因为光现在英语和物理已经够我忙的了。</p>\n<p>&emsp;&emsp;俞敏洪：你面对焦虑的态度可能也是解决问题的方法。我觉得Charles本身也是一个例子，我也是一个例子。我曾经有过基本上算是狂躁症。</p>\n<p>&emsp;&emsp;我有一次在国外出差，20层楼，看着打开的窗户，我就一心一意想跳下去。在渥太华。</p>\n<p>&emsp;&emsp;没有任何外部力量，就我一个人，但是因为当时我已经有了孩子，我知道这个肯定不能跳。所以我穿上了羽绒服，在渥太华零下30度的大街上走了4个小时，第二天早上，我坐6:00的飞机飞到我一个朋友家里，我说我不行了。</p>\n<p>&emsp;&emsp;我那个朋友把我摁住了。他是一个小洋房，刚好也不是楼房，他陪了我18个小时，直到最后我的孩子飞到了我身边。所以每个人都有这种过程。更何况（我）还有被动的、被人弄得差不多就死掉的过程。</p>\n<p>&emsp;&emsp;张朝阳：就整个被绑架对吧？</p>\n<p>&emsp;&emsp;俞敏洪：所以当你挺过来以后，有的时候你会知道其实人生更多的还是你的态度。当然有些东西是病理的，如果达到了病理状态，你要纠正过来难度就会非常大，因为我觉得我看到20层楼想跳下去已经是病理状态了。</p>\n<p>&emsp;&emsp;所以我后来我吃了很长一段时间药。但是你看我今天很乐观，因为我想通了。</p>\n<p>&emsp;&emsp;<strong>谈人生：人生不能以成败论英雄，你有没有全力以赴地努力？</strong></p>\n<p>&emsp;&emsp;俞敏洪：对于我个人来说，坦率地说，我个人最喜欢的几件事情，比如说读书，现在我的书应该是足够我读的，不用花太多钱是吧？吃饭，我这个人对饮食不是那么挑剔。再比如说我旅游，尽管我也喜欢住五星宾馆，也喜欢看世界的各种美景，但是我觉得我这个钱是应该够了的，写东西就更加不需要钱了是吧？一台电脑就可以了。</p>\n<p>&emsp;&emsp;所以对我个人来说，钱多钱少已经不影响我个人的生活质量了。两个孩子该上大学的上大学，该毕业的毕业了，但是我依然认为可以有更多的钱，因为我觉得我还是能有更多的钱，我一定能设想出来做更多的事情。</p>\n<p>&emsp;&emsp;张朝阳：针对这个话题延伸一下，第一，赚钱更多是一个我们做企业的参数指标。</p>\n<p>&emsp;&emsp;个人财富，比如说住更好的房子，开更好的车，坐更好的飞机，或者说什么，它能带来一些金融的自由度。</p>\n<p>&emsp;&emsp;但是，人，我觉得不是一个物质的动物，人是精神的动物是吧？</p>\n<p>&emsp;&emsp;所以，人的物质生活得到一定的满足之后，金融带来的自由度能够让自己按照自己的想法做一些事情。就像刚才俞敏洪说的，可以在每个乡村建一个图书馆，主动做一些慈善。</p>\n<p>&emsp;&emsp;在我们的墓碑上，不是描述我们这辈子山珍海味什么都享受过是吧，这个人生是不是太没意义了？所以人是有spiritual的，人是spiritual好吧？</p>\n<p>&emsp;&emsp;你看美国现在有很多伟大的大学，无论是MIT也好，还是斯坦福，还是耶鲁、哈佛，这些学校都是私立的。它是私立的，但它又是non profit的，是不为盈利的。</p>\n<p>&emsp;&emsp;它为什么既有既是私利的，又不是为盈利的？</p>\n<p>&emsp;&emsp;就是因为那些做企业的人或者有很多的钱的人，他除了自己生活的满足之外，他是个spiritual的，他是做要endowment（捐款），他要做慈善的，大量的有钱人最后就捐钱、去办学校。</p>\n<p>&emsp;&emsp;俞敏洪：我是北大毕业以后当了6年半北大老师才创业的。我个人的感觉是年轻人一辈子一定要经历一次创业，当然你可以参与创业，不一定非要主导，就像我跟徐小平、王强，他们算是参与我的创业，但是他们也是创业者。</p>\n<p>&emsp;&emsp;哪怕是你为了赚钱，因为你毕竟冒了一次风险，因为创业是没有底线的，你可能会输得精光，当然你也可能赚得满盆满钵。但输的精光的可能性比盆满钵满的可能性要大很多。</p>\n<p>&emsp;&emsp;但为什么我说人生要经历一次创业，就像你人生不能不经历一次自己不顾后果的冒险，当然我说的不顾后果还是有底线的，就说你不要你的命，剩下别的都可以丢掉。</p>\n<p>&emsp;&emsp;另外我建议，创业你不要花你父母的钱，你自己存的钱怎么花掉都没事，光了屁股重新再买条裤衩就完了。但是如果你花父母的钱，花父母的血汗钱创业，这是有问题的，高利贷创业是有问题的。</p>\n<p>&emsp;&emsp;因为你把自己弄到最后你输不起的状态，不行，但只要你输得起，有人跟你一起创业，你自己积攒下来的钱把它输光了，没关系。我觉得只要你有创业的想法，你觉得能激动你自己的人心，你就应该去创业。</p>\n<p>&emsp;&emsp;失败了回到体制内也好，继续为张朝阳、俞敏洪打工也好，我觉得不丢脸。但是如果你一辈子只是循规蹈矩、变成一个唯唯诺诺、为上司的指令马首是瞻的人，到最后你自己没有任何自己的主见，觉得一辈子就委屈了自己的这样一个生命，我觉得不合算。</p>\n<p>&emsp;&emsp;我觉得在项羽乌江自焚的时候，他绝对没有遗憾，因为他努力过了，他尽了心，他知道尽管刘邦很流氓，但是他弄不过。所以他的死是英雄的死。</p>\n<p>&emsp;&emsp;人生不能以成败论英雄，你有没有全力以赴地努力？你实在没有办法的时候，对自己说一声，老子值得了，就可以了。</p>\n<p>&emsp;&emsp;我觉得我们到60岁其实还是在创业的年龄。所谓的创业并不是你从0做起，而是说你不断能够翻陈出新，不断能够突破自己的局限。</p>\n<p>&emsp;&emsp;比如说Charles曾经有一段很低沉的时间，后来我看到他讲物理课的时候，我特别振奋。这也是为什么这一次Charles找我说，我们聊聊天，我立刻就答应的原因。我觉得对于一个振奋的人来说，你没有理由拒绝。</p>\n<p>&emsp;&emsp;他之所以找我，一定是他看到了我也是个振奋的人。</p>\n<p>&emsp;&emsp;张朝阳：我的振奋不是说因为做公司就萎靡不振，然后讲物理课就眼里放光。其实不是的，我其实已经振奋了好几年了，我大概18、19年就开始振奋了，彻底重整了价值观好吗？已经好几年了。</p>\n<p>&emsp;&emsp;俞敏洪：这个能看出来的。人有低谷有高潮。你有多大的高潮就有多大的低谷，我觉得张朝阳的高潮在于高潮太高了，到了喜马拉雅山，所以他必然要面临一个马尔亚纳海沟。</p>\n<p>&emsp;&emsp;张朝阳：因为我们的成长经历太复杂了，在文革中长大，又经历了最极端的考试竞争，上了最好的学校，又去了异国他乡，孤独地流浪了那么多年，回来创业，冰与火。</p>\n<p>&emsp;&emsp;所以对我来说，我的人生太密集、太烧脑，早年的那种学物理特别烧脑的考试竞争，后来到美国的孤独年月。所以我当时消沉跟公司没关系，就是自己人生太利己、太拧，所以就产生了到一定阶段会产生的问题。</p>\n","categories":["写作","对人生的看法"],"tags":["张朝阳","俞敏洪"]},{"title":"markdown段首空格/段首缩进问题","url":"/2022/08/13/markdown%E6%AE%B5%E9%A6%96%E7%A9%BA%E6%A0%BC-%E6%AE%B5%E9%A6%96%E7%BC%A9%E8%BF%9B%E9%97%AE%E9%A2%98/","content":"<h4 id=\"方法一：（无效）\"><a href=\"#方法一：（无效）\" class=\"headerlink\" title=\"方法一：（无效）\"></a>方法一：（无效）</h4><p>不废话了，在oschina上找到了解决方法，觉得还不错，就是</p>\n<p>p{ white-space:pre-wrap;}</p>\n<p>很简单吧。基本上是把空格都解决了。但是问题是对于那些大拇指经常抽搐，多敲空格的人来说，这个可能就会造成些许麻烦了。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"方法二：（有效）\"><a href=\"#方法二：（有效）\" class=\"headerlink\" title=\"方法二：（有效）\"></a>方法二：（有效）</h4><p>直接写<br>半方大的空白&ensp;或&#8194;<br>全方大的空白&emsp;或&#8195;（采用：中文段首空格）<br>不断行的空白格&nbsp;或&#160;</p>\n<h4 id=\"方法三：（无效）\"><a href=\"#方法三：（无效）\" class=\"headerlink\" title=\"方法三：（无效）\"></a>方法三：（无效）</h4><p>　Markdonw不支持行首空格缩进，以前要是想空格，我采用的方法是手动输入空格：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"symbol\">&amp;nbsp;</span></span><br></pre></td></tr></table></figure>\n\n<p>　在逛知乎的时候，发现了这种方法：来源链接<a href=\"http://www.zhihu.com/question/21420126\">http://www.zhihu.com/question/21420126</a></p>\n<blockquote>\n<p>推荐全角空格，切换到全角模式下（一般的中文输入法都是按 shift + space）输入两个空格就行了。这个相对   来说稍微干净一点，而且宽度是整整两个汉字，很整齐</p>\n</blockquote>\n<p>想要多少个空格，就在“全角”模式下，敲多少个空格就ＯＫ了。这种方法比我最上面的那个方法要好多了。</p>\n","categories":["技术","Markdown"],"tags":["Markdown","段首空格","段首缩进"]},{"title":"你几乎没有真朋友的根本原因","url":"/2022/08/14/%E4%BD%A0%E5%87%A0%E4%B9%8E%E6%B2%A1%E6%9C%89%E7%9C%9F%E6%9C%8B%E5%8F%8B%E7%9A%84%E6%A0%B9%E6%9C%AC%E5%8E%9F%E5%9B%A0/","content":"<p>之所以一路走来朋友稀少，究其根源可能因为你是“依赖无能者”。</p>\n<p>这类人每次向人求助或者提出要求是都会发自内心的不舒服。他们乍看起来可能是强大，自信，甚至是很成功的。但在内心他们其实脆弱不安，害怕同时也极其渴望亲密关系。这种依赖无能也包括情感上的👉当自己难过的时候也难以主动去寻求他人的慰藉。</p>\n<p>于是，在人际交往中，他们有“逃避人际交换”的倾向。他们觉得似乎避免了你来我往的付出与交换，才能获得“孤独版的独立性”。</p>\n<a id=\"more\"></a>\n\n<p>他们身边可能也不乏朋友和熟人，每当那些试图亲近他们，与他们建立联结的人总会在某个时刻发现和他们之间总是有一种距离感，像隔了堵墙一样无法亲近。</p>\n<p>依赖无能者即使面对亲近的人，也会把得到和给予的关系算的格外清楚-【你帮我了，我下次一定要还回来】。导致他人难免会感觉到他们的“过度客气般的疏远”。</p>\n<p>这类人会过度解读人际交往中的微小信号，极其容易将他人的某种无心之言理解成为对于他们的否定和拒绝，并从此用更加坚硬的“外壳”武装自己。他们内心其实渴望他人的帮助和缔结亲密的关系，但是表达需求却总令他们如鲠在喉。更有甚者善于【负面表达】自己的需求，在别人提出帮助时反而去指责和控诉对方没有做好，关系反而变得更糟糕。</p>\n<p>依赖无能产生的原因有两个👇</p>\n<ol>\n<li><p>成长过程中家长主观引导让他们总有种【我没有】的低人一等的感觉。一些家长出于各种原因总会在教育孩子之时过于夸张的强调【我们家很穷，你要节约，你和别人家的孩子是不一样的】。对于一般人来说，接受别人的付出感觉是温暖的；但对于他们而言，却感受到更多的是虚弱和低姿态。</p>\n</li>\n<li><p>成长过程中信任感的长期缺失。成功的成长需要达到两点：1.情感联结的建立 2. 基于信任基础上实现与父母的分离实现精神上的独立</p>\n</li>\n</ol>\n<p>情感联结才能带来信赖，即<font color=#3399EA>【相信自己的需求其实是被欢迎的】</font>，<font color=#3399EA>【相信他人是有意愿帮助你的】【相信暴露自己的需求并不会引发别人之后以此为料伤害你】</font>。在此基础上，孩子才能建立起对这个世界真正的信任，随时间发展意识到自己是一个独立个体，并为此勇敢奋斗。<font color=#3399EA>而那些没有成功获得情感联结的孩子，就会产生一种【假独立】，他们只能成为【别人眼中独立的人】，其实内心脆弱不堪。</font></p>\n<p>要想改变这一切，依赖无能者要从根源上学会建立情感联结 👇</p>\n<font color=#3399EA>\n\n<ol>\n<li><p>深刻认识到你对于【依赖他人】这个行为的恐惧之处和【强行独立】的痛苦</p>\n</li>\n<li><p>向他人承认和交流你的这种恐惧</p>\n</li>\n<li><p>从小事做起建立【依赖习惯】</p>\n</li>\n</ol>\n</font>\n\n","categories":["写作","心理学","人际关系"],"tags":["朋友","依赖无能者","强行独立","假独立"]},{"title":"25岁以后人生最大命题就是对抗虚无感","url":"/2022/08/14/25%E5%B2%81%E4%BB%A5%E5%90%8E%E4%BA%BA%E7%94%9F%E6%9C%80%E5%A4%A7%E5%91%BD%E9%A2%98%E5%B0%B1%E6%98%AF%E5%AF%B9%E6%8A%97%E8%99%9A%E6%97%A0%E6%84%9F/","content":"<h4 id=\"1⃣️-持续的有事做，不如持续的做一件事\"><a href=\"#1⃣️-持续的有事做，不如持续的做一件事\" class=\"headerlink\" title=\"1⃣️ 持续的有事做，不如持续的做一件事\"></a>1⃣️ 持续的有事做，不如持续的做一件事</h4><p>试过找很多事情把自己的生活填满，去喝酒、看展、旅行、滑雪、看书、弹琴、健身，但感觉对情绪都没有什么改善。19年去了5、6个地方，几乎有个3天假期都会请假出国玩，辞了职干脆休息一个月去了新疆。但也是这一年秋天突然在某一天黄昏，一个人走在圆明园，清晰的意识到了生命的空虚感，从此之后彻底陷入了低落的情绪里。</p>\n<a id=\"more\"></a>\n\n<p>唯独跑步这件事是从大学开始形成的习惯，只有每天固定的时间去跑步40分钟才会稍微缓解日常的焦虑。<font color=#3399EA>归根结底是因为大部分零碎的事情没有形成固定的规律，所有的积累都是碎片化的，看不到明显的进步即感受不到做这件事带来的正反馈。</font></p>\n<h4 id=\"2⃣️输入型的爱好不如输出型的爱好\"><a href=\"#2⃣️输入型的爱好不如输出型的爱好\" class=\"headerlink\" title=\"2⃣️输入型的爱好不如输出型的爱好\"></a>2⃣️输入型的爱好不如输出型的爱好</h4><p>我理解这世上的爱好大致分为两类，一类是输入型，是在被动接受这个世界的观点，比如看一本书、一部电影、一个展。<font color=#3399EA>当然这个过程也很愉悦，有时候也有引发深层的思考和共鸣，但是这种刺激的频次和强度远不如输出型的爱好。输出型的爱好比如写作、拍照拍视频、画插画，这种可以在过程中将自己的思考整理输出的爱好，在整个过程中都保持着高强度和高频率的多巴胺分泌。我想人只有输出，才可以和这个世界产生交互和关联，才不至于有一种飘浮感。</font></p>\n<h4 id=\"3⃣️要爱具体的人\"><a href=\"#3⃣️要爱具体的人\" class=\"headerlink\" title=\"3⃣️要爱具体的人\"></a>3⃣️要爱具体的人</h4><p>如果看《卡拉马佐夫兄弟》给我生命留下些什么的话，那最重要的就是这句话：要爱一个具体的人，不要爱一个抽象的人，要爱生活，不要爱生活的意义。<font color=#3399EA>或者更准确的说，是维持一段亲密关系，可以不是爱情，但一定要具体。之前跟一位豆友交流，日常琐碎和争吵都是两个人之间的互相羁绊，都会增加你对生活的真实感，这种真实感会丝丝缕缕拴住你变成你的重量，继而摆脱生命不能承受之轻。</font></p>\n<h4 id=\"4⃣️目标感\"><a href=\"#4⃣️目标感\" class=\"headerlink\" title=\"4⃣️目标感\"></a>4⃣️目标感</h4><p>回顾了一下我从大学毕业之前，不论是高考、转专业、留学申请、实习、找工作，都是因为有明确的目标指引。工作以后经历的种种，加上读加缪和萨特的影响，越来越觉得人生不过是不断推着巨石登上山顶再坠落的周而复始，困在西西弗斯的荒谬故事里。</p>\n<p>但其实我没读懂加缪的是，人生意义虽然是一个谎言，但人也可以选择相信这个谎言去完成自己所选择的命运，这是与虚无对抗的唯一方式。</p>\n","categories":["写作","虚无与存在"],"tags":["虚无","存在","输出型爱好","输入型爱好"]},{"title":"处于虚无主义的状态","url":"/2022/08/14/%E5%A4%84%E4%BA%8E%E8%99%9A%E6%97%A0%E4%B8%BB%E4%B9%89%E7%9A%84%E7%8A%B6%E6%80%81/","content":"<p>&emsp;&emsp;在很长一段时间里，我都不知道该如何来描述我所经历的状态。以至于某些零碎的表达或者是感受使得我身边的朋友、家人甚至是我自己都认为这可能“需要”被归类于抑郁方面的心理障问题。但其实我一直对此保有疑惑，就像后文中所提的一样——“这跟抑郁不一样，我很清醒。”</p>\n<a id=\"more\"></a>\n\n<p>&emsp;&emsp;直到我看到了一段关于状态的描述，比较接近我真实的感受以至于能通过这段文字来表达。</p>\n<p>&emsp;&emsp;以下原文：</p>\n<p>&emsp;&emsp;很难开心起来，觉得一切都没有意义，已经很久了，最近才知道，原来这叫虚无主义。明明也算顺风顺水，至少别人眼中，我很正常，能说能笑。但只有我自己明白，我现在的状态，只差立马结束所有的一切了。但这跟抑郁不一样，我很清醒。只是世界上没有我必须要拥有和经历的，无论发生什么，我都会觉得无所谓。无所谓生，无所谓死。</p>\n<p>&emsp;&emsp;我对所有东西的期待都很低，极致理性就会虚无吧。我也很想多一些欲望，但脑海里却一直有声音告诉我“也就那样”、“不都这样”、“没关系，无所谓”，我是真的对一切都失去了动力。</p>\n<p>&emsp;&emsp;没有很开心，也没有多不开心。缺乏激情，对什么都提不起兴趣……</p>\n","categories":["写作","虚无与存在"],"tags":["虚无","存在","虚无主义"]},{"title":"翻电问答·42|网络劝分，对生活崩溃的想象力","url":"/2022/11/20/%E7%BF%BB%E7%94%B5%E9%97%AE%E7%AD%94%C2%B742-%E7%BD%91%E7%BB%9C%E5%8A%9D%E5%88%86%EF%BC%8C%E5%AF%B9%E7%94%9F%E6%B4%BB%E5%B4%A9%E6%BA%83%E7%9A%84%E6%83%B3%E8%B1%A1%E5%8A%9B/","content":"<h4 id=\"问题是：\"><a href=\"#问题是：\" class=\"headerlink\" title=\"问题是：\"></a><strong>问题是</strong>：</h4><p>“在微博上某些圈子里，比如穿Lolita洋装的这种小姑娘比较多的圈子里，非常多，有一些还是生活中会接触到的熟人，她们遇到了感情失败的问题。很多情况下会选择把对方从网上挂出来，然后利用大家对这件事情的心理来达到或许是安慰自己？类似的目的吧。我觉得这算是亲密关系问题的一个延伸,有社交网络之后亲密关系好像并没有那么的纯粹和个人，无论是哪种观点，大家会在网上轻易找到赞同自己的人，比如对于渣男的批判很容易变成一种群起而攻之的集体行为。在SNS上公开自己的恋情，或者是这种把产生问题的关系po到网上，供大家议论转发，并且很有可能是片面之词，是出于什么心理呢，会产生什么样的影响？”</p>\n<p>因此，为何会有人愿意把自己的感情困境发到网上呢？他们想要什么呢？</p>\n<a id=\"more\"></a>\n\n<h4 id=\"内容是：\"><a href=\"#内容是：\" class=\"headerlink\" title=\"内容是：\"></a><strong>内容是</strong>：</h4><h5 id=\"生活崩溃的客观和主观\"><a href=\"#生活崩溃的客观和主观\" class=\"headerlink\" title=\"* 生活崩溃的客观和主观\"></a>* <strong>生活崩溃的客观和主观</strong></h5><p>在网络劝分这件事中有是有两种状态的</p>\n<p>客观：主人公上网倾诉的这个人他的生活已然崩溃了，我们慢慢通过他的表诉来知道他的生活是怎么崩溃的</p>\n<p>主观：来上网发言的这位主人公是不太知道他的生活是不是崩溃了，是我们的解释（劝分）是我们告诉他“你的生活已经崩溃了，别多想了”。</p>\n<p>在劝分这件事情上是后者，是一种主观逼迫的情况。</p>\n<p>如果你去看那些帖子，很多情况下那些感情还有救的，但发到网上来之后就没救了，大家两劝两劝就分了。</p>\n<h5 id=\"网络现象在豆瓣和虎扑\"><a href=\"#网络现象在豆瓣和虎扑\" class=\"headerlink\" title=\"* 网络现象在豆瓣和虎扑\"></a>* <strong>网络现象在豆瓣和虎扑</strong></h5><p>豆瓣：劝分小组（女性居多）劝女孩与男孩分手</p>\n<p>虎扑：情感区（男生居多）绿帽文化（女友或妻子出轨）劝男生与女生分开</p>\n<h5 id=\"一种大型众包情感崩溃写作\"><a href=\"#一种大型众包情感崩溃写作\" class=\"headerlink\" title=\"* 一种大型众包情感崩溃写作\"></a>* <strong>一种大型众包情感崩溃写作</strong></h5><p>为什么人们会把这些感情经历发到网上来呢？</p>\n<p>我们之前的设想：求安慰，找到一个共情分担或者他们希望在网上形成一个身份这个身份给予他们安全感，诉苦，其他人告诉他不要这样，诉苦，其他人告诉他我也是这样也是这样的情况或者一些身份化的表诉</p>\n<p>但是实际上，我们看过豆瓣或者虎扑上的很多帖子，很多时候人们的回复既不是安慰也不是共情分担也不是寻求身份而是出主意，而很多发帖的人来这里发帖其实也是来寻求大家意见的，来让大家帮着判断一下，现在情况是不是如他所想，他应该怎么办，等等。</p>\n<p>所以我们与其把他看作一个情感发泄不如看作一个情感咨询</p>\n<p>所以看了这么多帖子之后，网络劝分实际上是个什么事，在我看来像是一个大型众包情感崩溃写作。什么意思，意思就是说大多数网络劝分帖都是主人公来提供一个他感情的叙述里面还包括很多的微信截图，其他人在他的基础之上，像做一道阅读理解题一样，“我来说你们俩之间发生的是什么事儿”，很多时候都是这样的一个东西。也就是说我来提供一个线索给很多其他人一个写他理解的机会，写作的主题是什么呢？写作的主题就是情感是如何崩溃的，你们俩的生活已然是怎么崩溃的。</p>\n<p>在感情生活中人特别担心坠坠不安特别担心活在焦虑之中，你知道那焦虑是怎么样的一个状态嘛，焦虑就是说靴子还未落地我感觉我的生活出现了问题，但是吧，具体是一个什么样的问题我不知道，就感觉生活的问题的包袱没有最终翻出来，因此我焦虑，所以说为什么这么多人愿意把自己的生活细节发在网上呢，就是在这个地方真的可以起到劝分的作用，因为在这种众包情感崩溃写作之下，其他人确实可以根据你的写作帮你设想你的生活是怎么崩溃掉的，从而让你靴子落地来去想一个你的办法。</p>\n<p>这种帖子大概三种内容：</p>\n<p>第一步：各种个样的视角帮你分析坏事已经发生了，坏事一定发生了。</p>\n<p>第二步：坏事不只发生了，而且事情更坏</p>\n<p>第三部：提出意见，选择伤害（告诉你这是合理的，你已经收到伤害了，你的报复是应该的）</p>\n<p>大型众包情感崩溃写作：人们通过这些帖子来拓展理解你的生活，来告诉你你的生活以何种或者各种各样不同的可能性崩溃了，在帖子上面人们会写出各种各样你的生活已经变坏或者比你想的更坏的可能性，所以说你完全可以把这些帖子看作一场 Brainstorm ，Brainstorm 的内容就是请大家来告诉我现在我的生活有多坏，因为他要去做伤害他人的事或者说他想放弃，在这个情况之下，他必须靴子落了地他感觉他的生活足够坏，他才可能做到这样的决定。</p>\n<p>结论：只有坏处没有好处</p>\n<p>原因：亲密关系维持的困难，关于现状很坏的情况会让我们的视野窄化。 因为在任何情况下坏的可能性总是比好的可能性大，因此这样的劝分教育之后人对于生活是如何变坏的也会变得非常敏感，也就是说未来生活之中可能他就很容易产生更大的误解，他跟他未来的亲密关系对象在沟通的过程当中他就会更敏感，“发生了这样的事那从这个视角去看她是不是出轨了，发生了那样的事从这个角度去看我是不是又戴了绿帽”，就很麻烦，而这个东西就会对他形成一个长期的焦虑。</p>\n<h5 id=\"单向度的情感思考与结构性的出轨\"><a href=\"#单向度的情感思考与结构性的出轨\" class=\"headerlink\" title=\"* 单向度的情感思考与结构性的出轨\"></a>* <strong>单向度的情感思考与结构性的出轨</strong></h5><p>舔狗：我对她比她对我好</p>\n<p>PUA：他对我的好是假的，他说对我的好是帮助我提高，但实际上呢，是要通过打破我打压我的方式削减我的自尊心让我离不开他</p>\n<p>其实这两者再说一回事，就是说现状的好是不是公平，是不是真的好。因此人们对于感情生活的想象非常狭窄。</p>\n<p>我们拿出轨这件事来讲，一旦你产生于现在生活的主要焦虑和你对于一段亲密关系和婚姻关系的主要设想就在于她还有没有出轨，她出轨了吗？那么你现在在生活中能得到的线索全是与出轨相关的。</p>\n<p>这话什么意思阿，我们可以想象只要有微信这个产品只要你不查她的手机她是忠贞的可能性大还是出轨的可能性大，（微信上面怎么个忠贞法呢，删到只有你一个好友吗？）她当然是出轨的可能性大；她在家外面没有跟你在一起她出轨的可能性大还是忠贞的可能性大，当然是出轨的可能性大。也就说我们越是在比较自由流通的信息通畅的社会出轨的焦虑只会单向增加而在里面没有任何可能性减少。没有一个 Dating App，微信、在外的时间、酒吧、在外的场合都是单向增加出轨的可能，而几乎没有一种社会结构在降低出轨的可能的。所以说，如果你盯住感情看是不是在出轨那基本上阿你生活中的焦虑会越来越强烈，因为一切让社会变得更加流通，变的更加顺畅的东西都在增加出轨的可能。这就是为什么疫情期间这个异地恋带来的出轨风险很大，是因为在疫情的异地恋之中，你们俩的亲密关系呢也被完全划入了这种技术结构之中，这个技术结构内涵一种出轨焦虑，所以说在这里面你们缺乏面对面的生活嘛，所以只能在出轨焦虑的逼迫之下然后感情破裂。意思是说，如果一个人对自己感情的描述向度最另他焦虑的一个维度就是出轨或非出轨那么他现在就要面临一种一切社会环境技术事实都在让出轨变得容易的情况之下，你要天天琢磨这事盯着这事看，那基本上最后只能理解为出轨。</p>\n<p>那么这个舔狗和PUA也是一样，这个舔狗和PUA其实比这个出轨更厉害，它是一种单向的想象。也就是说如果一个人要想阿我比别人对别人比我好，（因为人有自私有自利有计算他人的恶和计算自己善的这样的冲动，所以这确实是一种糟糕的人性）所以一旦有舔狗和PUA这样的情况呢，人们当然会对他人对于自己不好的地方变得非常敏感，从而只要你想舔狗（我是不是舔狗），也就说那个女人对我是否有足够好这种想法阿，那当然对你不是足够好了；一旦一个女孩开始想阿，他对我这个是不是PUA呢，那当然是PUA了，就像上面的帖子一样阿，你一定有超过20种方法告诉你是PUA，一个男生来问我是不是备胎阿是不是我现在成了一只舔狗了阿，那一定有20个角度来证明你是舔狗了。</p>\n<p>也就说这种单向度的思考和想象当然在生活中就会因为技术性的原因带来结构性的问题，各种个样的问题，就是人们的生活有越多的技术性的要素（越多的使用微信、电话等等方式）就越容易证明人们的这种焦虑和想象。而我们对于亲密关系的想象呢如果只是互相好的合作关系，你对我好我对你同样好，谁都别吃亏的一种合作关系以及这个合作关系需要是一种排他的关系，那么我们就必然陷入这样的境况之中，那么在这样的境况之中网络劝分阿只是让我们生活快速坠落的方法，因为不管你自己发帖还是你在网上看这种东西看的足够多它不过是在增强你的想象力，增强一种什么想象力呢，在这种出轨，舔狗，PUA的单向度的感情理解之下增强你对于你的生活已经向这个方向崩溃的一种想象力，所以平时生活中的蛛丝马迹各种细节都能帮助你证明你的另一半出轨了或者证明你就是备胎或者证明你就是被PUA了。看得越多越敏感，看得越多想象力越强，但是呢它是双向循环的关系，如果你真的对感情有很多担忧的想法呢你肯定忍不住看，而且有这个技术条件在你也忍不住发，这个事情只会变得越来越糟糕。</p>\n<h5 id=\"一种想象生活的能力\"><a href=\"#一种想象生活的能力\" class=\"headerlink\" title=\"* 一种想象生活的能力\"></a>* <strong>一种想象生活的能力</strong></h5><p>好，因此阿，现在我们要回到托尔斯泰那句话了，幸福的家庭都是相似的，而不幸的家庭各有各的不幸，那我们要理解到这句话，我们要知道这句话本身有很片面的地方，也就是说不幸的家庭各有各的不幸，而幸福的家庭也可能各有各的幸福。也就说我们现在对于我们的生活是如何崩溃的赫然想象力已经过于发达了，我现在必须尝试复兴一种对于生活是怎么变好的一种想象力，如果我们不具备这种想象力，却具备极其强烈的生活是如何崩溃的想象力，那你的生活也会因为这个原因很容易快速走向崩溃。这里面的道理很简单阿，就是因为当你只有单向度的想法然后呢你的想象力又很丰富那蛛丝马迹只能证明生活如何变坏而不能证明生活如何变好，那这个你的生活这个重量阿像跷跷板一样就完全失衡了，所以之前罗马说节目之中我们提到了一个很有意思的观点阿，就是要在善上智慧，恶上天真，我觉得用到这就特别好，因此在亲密关系之中婚姻关系之中对于这个关系可以如何好这个事儿呢，是值得花特别多的脑子和心思去想的，但是对于一个事儿是如何变糟的呢却要稍微冷感一点天真一点，但现在肯定是相反的阿，就对于这个亲密关系如何好这个事儿你最好别发，你要发了呢也可能不爱看，大家觉得你这个人还显摆的阿，当然有时候单纯炫耀呢也不是对于生活如何好的一种理解，但今天呢网上绝大部分内容是关于这个亲密关系和婚姻是如何糟糕的阿，我们现在在恶上智慧，善上变得特别天真变得特别的幼稚吧。</p>\n<p>所以说在这个时候呢尤其要注意的是我们要有意识的产生两种新的想象，比如说就那个帖子阿，他敲门他的太太花了11分钟才来开门（而且这11分钟屋里是有声音的阿，而不是说他太太睡死了11分钟才听到而且打电话他太太也不接），那在这个情况之下有没有一种可能他太太确实没有出轨（是一种误会）。</p>\n<p>生活中我不敢说所有的事情都是这个误会，但是如果我们的脑子里如果现在你都想不出来有什么可能性11分钟她是没有出轨的，而这11分钟她是出轨的你脑子里有各式各样的想象，那这个情况之下，你都不能说我对生活有了一个好的判断，她出轨了，你只能是说以你现在的能力阿你只能判断生活崩溃了，因为生活不崩溃的可能性你都想不到，这根本就不是一个判断，你只有能力判断生活崩溃，因为你设想不了生活怎么变好，所以说即便在很单向度的维度之上即便我们在短时间内阿难以逃离的要去算计我对她好她对是不是同等的好，我们俩是不是在排他关系之中，那么至少我们对他人是如何对我们好的这件事儿，需要有足够的想象力，因为我猜阿，这个人阿现在内心戏都很丰富，对于自己阿为了他人是如何含辛茹苦这个事儿想象力非常丰富，在心里阿都能把自己想象成圣徒一样，但是对于他人为我们忍耐了什么为我们做了哪些好事儿为我们在心里面有哪些承担这事儿呢却往往，其实都不去想也都不知道该怎么想。就你把自己含辛茹苦那劲儿往他人想想，很多时候呢你是比较容易去理解他人是怎么对你好的。</p>\n<p>因此我想说的第一个想象力呢，就即便是我们对亲密关系婚姻关系就只能维持一种单向度的想象，什么叫好的亲密关系，就是你对我好我也对你好而且是排他的，OK，即便如此，那你也要想在什么情况之下我们能够更好的理解他人对我们的好，那我们最好对于他人对我是如何好这个事儿敏感一点想象力丰富一点，而对于我们如何对他人好这件事儿要天真一点要幼稚一点别花那么心思去构筑为何我对她这么好这件事儿，好，这是第一个。</p>\n<p>那这个单向度的想象呢当然是不够的阿，是因为你有这个单向度想象很难去抵抗，比如说出轨这件事，你很难去抵抗 Dating App ，微信阿等等东西的存在，那么在第二个上呢，你需要有一个更广泛的想象，比如说你必须能够亲密关系的实质阿并不是你对我好我对你好这一件事儿，那亲密关系的实质是什么呢？这里面就我特别想说托尔斯泰那句，就是幸福的家庭呢其实也未必那么相似，他们有各式各样不同的方法那么其实我们也能想象，比如说两个人都是人权律师，那么他们之间的亲密关系当然就是在一起能够如何更好的对他人好才是他们这个关系的实质，因此是不是舔狗是不是PUA是不是有出轨焦虑并不在他们探讨和焦虑的核心，那么也有那种亲密关系阿，也许有些人听着不是那么乐意阿，就比如说一个比较类似家庭主妇嫁给一个政治家或者嫁给一个经济学家、科学家，然后照顾他的生活起居以这个人的事业成就作为自己生活成就的一部分，当然这不符合人人都独立的个人主义模式，但这种情况也存在的。那么在这个情况之下呢那两人的生活主轴就是那个人的事业，这个亲密关系或这段婚姻的好坏就是那么一件事儿，当然现在导致很多人的婚姻变得稍微好一点儿的其实就是他们以一种别的方式产生了婚姻生活和家庭好的想象，是什么呢，就是当他们生出孩子之后，这段亲密关系尤其是这段婚姻它的好就取决于这个孩子是不是在健康的成长，那么在孩子是不是健康成长之上呢这个想象可能性又比一个单向度的你对我好我对你好要多得多，所以确实我们发现现在很多人生出孩子之后呢，他们的婚姻阿就会好一些是因为这到底给他们提供了一个新的设想方式。所以说阿，这孩子呢确实看起来对婚姻生活在很大情况下还是很重要的阿，但是这个基本上能维持到孩子上初中上高中很多人又维持不下去了，所以说我也不认为孩子是一个终极解法能够一举解决所有问题。所以我们还是要想这亲密关系到底除了你对我好我对你好还能有什么想象力，通过刚才的例子你也能发现就你在生活中你得有个追求才可能产生我对你好你对我好的之外的想象，好这事儿阿，大概是互相支撑对方的消费生活互相关照对方的健康状况等等的，因此如果你的生活本身就缺乏追求缺乏在消费生活和赚钱以外的一个想象和一个想法的话，那你自然不可能想到任何亲密关系和婚姻生活好的想象，那只有你自己产生了一种价值关怀一种追求那这个东西呢才可能跟一个近距离的亲密关系产生关联，填充到这个关系之中。</p>\n<p>所以说，怎么能产生这个想象呢，我得说这个想象当然不容易，这个想象既需要践实也需要能力才能去填充到，那么在这里想象之后呢，你可能反过来才把托尔斯泰的话做一个大的调转，幸福的家庭各有各的幸福，而不幸的家庭不幸却都是相似的，它们相似在哪里呢，不幸的家庭就是都关注这个出轨还是非出轨是舔狗还是PUA这样的彼此之间你对我好我对你的算计，并且在这个算计上配不平算不过来，并且在对于算不过来的情况之下生活的崩溃，都有太丰富的想象力的情况之下崩溃的，而幸福的家庭呢都是在这样在这些单一的单向的视野之外别的方式充实了他们对于亲密关系和婚姻生活的想象才变得好的这么一件事。</p>\n<p>所以到最后呢，其实今天我们最想说的是，为什么会有网络劝分这个事儿，就是因为网络劝分是一种大型的众包情感崩溃写作，是很多人来帮你分析帮你写的生活从各种不同的视角看，是如何崩溃的。我们之所以愿意看这些东西呢，就是因为我们对于亲密关系和情感生活有非常窄化的关注非常窄化的焦虑和想象。所以说，怎么样跳出这个，那最根本的方法就是我们最后所讲的善上智慧，恶上天真，即便在单向度的想象之内你也应该对于算计的反方向更加敏感，以及呢你要跳出这种你对我好我对你好的算计来看待两个人关系的实质和内涵，在这个基础之上呢可能才能够跳出隐藏在网络劝分文化背后的这样一种境况。</p>\n<p>所以最好少看，我认为看多了没好处阿。看太多会导致你对于生活如何崩溃这事儿变得特别熟练，老练，这种老练阿只会让生活更快速的崩溃。那第二呢，就是最后说了我们怎么去设想生活变好的能力，视野阿，这个是非常重要的，包括我们怎么去设想一些单向度以外的情感模式和情感的价值和实质。</p>\n<h4 id=\"困惑：\"><a href=\"#困惑：\" class=\"headerlink\" title=\"困惑：\"></a><strong>困惑</strong>：</h4><p>设想生活变好的能力，视野以及设想一些单向度以外的情感模式和情感的价值和实质在现在的物质化功利化互相猜忌的社会环境中能够让大部分人相信吗？</p>\n","categories":["写作","文","播客：FlipRadio"],"tags":["翻电","FlipRadio","网络劝分","生活的想象力"]}]