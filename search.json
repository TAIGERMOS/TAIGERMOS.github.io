[{"title":"彻底搞懂如何使用Hexo+GitHubPages搭建个人博客","url":"/2020/07/29/%E5%BD%BB%E5%BA%95%E6%90%9E%E6%87%82%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8Hexo-GitHubPages%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","content":"<h1 id=\"使用Hexo-GitHubPages搭建个人博客\"><a href=\"#使用Hexo-GitHubPages搭建个人博客\" class=\"headerlink\" title=\"使用Hexo+GitHubPages搭建个人博客\"></a><strong>使用Hexo+GitHubPages搭建个人博客</strong></h1><h2 id=\"GitHubPages设置\"><a href=\"#GitHubPages设置\" class=\"headerlink\" title=\"GitHubPages设置\"></a><strong>GitHubPages设置</strong></h2><hr>\n<h3 id=\"git安装及配置\"><a href=\"#git安装及配置\" class=\"headerlink\" title=\"git安装及配置\"></a><strong>git安装及配置</strong></h3><a id=\"more\"></a>\n<p>搭建一个Hexo+GithubPages博客需要做的第一步就是在GitHub上创建一个仓库。在这之前，需要在你的电脑上安装git。无论是Mac、Linux、Windows系统中的哪一种，Google上都能找到详细的<br>安装教程说明，建议直接参考<strong>git官网</strong>的安装教程。</p>\n<p>初次运行git前，你需要做一些配置：</p>\n<ul>\n<li><p><strong>设置Git用户信息</strong></p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ git config --global user.name “your_name”</span><br><span class=\"line\">$ git config --global user.email your_email</span><br></pre></td></tr></table></figure></li>\n<li><p><strong>生成SSH Key公钥</strong></p>\n<p>  查看当前用户的目录下是否存在.ssh目录，如果存在进入到此目录下检查是否存在id_rsa和id_rsa.pub两个文件，这两个文件分别对应的是公钥和私钥，如果存在直接跳过此步，否则输入下面的命令：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ ssh-keygen -t rsa -C “your_github_email”</span><br></pre></td></tr></table></figure>\n<p>  其中**-t type:指定你要生成的密钥类型**，-C commit:提供一个新的注释。然后一路回车，直到生成一个矩形的图案为止。记下生成的这串字符，这就是后面需要给GitHub配置的公钥。</p>\n</li>\n</ul>\n<h3 id=\"配置GitHub中的公钥\"><a href=\"#配置GitHub中的公钥\" class=\"headerlink\" title=\"配置GitHub中的公钥\"></a><strong>配置GitHub中的公钥</strong></h3><p>首先需要在**<a href=\"https://github.com/\" title=\"GitHub官网\">GitHub官网</a>**上注册一个账号，GitHubPages的创建需要一个GitHub的账号，这一步就直接跳过。如果有GitHub账号，直接登录就可以。</p>\n<p>登陆到后Github后，如果你是初次申请，需要先配置SSH，按照下述步骤进行操作：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/jxXEoAPVQf42Crb.png\"></p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/ip9B6nrZXIouOWj.png\" alt=\"image.png\"></p>\n<ul>\n<li><p>Setp1:点击头像</p>\n</li>\n<li><p>Setp2:选择Settings</p>\n</li>\n<li><p>Setp3:选择侧边栏的SSH and GPG keys</p>\n</li>\n<li><p>Setp4:右上角点击New SSH key按钮</p>\n</li>\n</ul>\n<p>此时会看到如下界面，Titlt输入框中填写的是你要输入得SSH公钥的名称。我这里填的是”MacHome“，就是指我家里Mac电脑的SSH公钥。Key的输入框中需要填写刚才在本机生成公钥串：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/2HNPYM3dJQm91pF.png\" alt=\"image.png\"></p>\n<p>如果刚才你讲命令行窗口给关闭了，也不要紧，输入命令入cat ~/.ssh/id_rsa.pub就可以查看你刚生成的公钥</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/NJTWBzU256IArOh.png\" alt=\"image.png\"></p>\n<p>Key中复制查询到的SSH公钥。点击Add SSH key，这里需要你再次输入密码来确认。成功后会生成如下界面：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/pi7VC3Pzavh94sU.png\" alt=\"image.png\"></p>\n<h3 id=\"创建GitHub-Pages仓库\"><a href=\"#创建GitHub-Pages仓库\" class=\"headerlink\" title=\"创建GitHub Pages仓库\"></a><strong>创建GitHub Pages仓库</strong></h3><p>配置好git和GitHub后，需要在GitHub上创建Github Pages服务，具体步骤如下图：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/waoXLT9lj4nDZBc.png\" alt=\"image.png\"></p>\n<p>在GitHub首页的顶部菜单选择<strong>“+”号按钮，并且点击New respository选项</strong>。之后会出现下面的页面:</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/IEyjO8Kt7sumphC.png\" alt=\"image.png\"></p>\n<p>一定要注意：在Repository  name输入框中你需要填入你的【Github用户名】，这一点非常重要。因为这样才能保证你建立的是GithubPages页面而不是其他的代码仓库。另外一点记得勾选Initialize this repository with a README选项。这个时候你在浏览器输入https://<span></span>your_github_name.github.io后，可以看到一个简陋的界面，那么说明你已经成功开启了GithubPages服务了。下面需要做的就是安装Hexo，并且使用Hexo来生成Blog站点。</p>\n<h2 id=\"安装Hexo并初始化博客\"><a href=\"#安装Hexo并初始化博客\" class=\"headerlink\" title=\"安装Hexo并初始化博客\"></a><strong>安装Hexo并初始化博客</strong></h2><hr>\n<p>安装Hexo的过程非常的简单，只需要几行命令就可以轻松安装并创建Hexo框架，前提是已经安装好了Node.js。Hexo是一个快速、简洁且高效的博客框架。Hexo使用Markdown(或其他渲染引擎)解析文章，Node.js所带来的超快生成速度，让上百个页面在几秒内瞬间完成渲染。官方建议Node.js版本不低于8.10，建议使用Node.js 10.0及以上版本。</p>\n<h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><strong>安装Node.js</strong></h3><p>安装Node.js请参照**<a href=\"https://nodejs.org/en/\">官网指南</a>**。安装完成后在终端输入以下命令，检查安装是否成功及Node.js对应的版本号：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ node —version</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a><strong>安装Hexo</strong></h3><p>安装Hexo也非常的简单，使用npm安装Hexo只需要一句命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"初始化创建博客\"><a href=\"#初始化创建博客\" class=\"headerlink\" title=\"初始化创建博客\"></a><strong>初始化创建博客</strong></h3><ul>\n<li><p>创建站点根目录</p>\n<p>  创建一个默认主题的博客，首先需要初创建一个博客文件夹，注意这个文件夹的名字最好要和你刚才创建的GitHubPages的地址一致也就是your_github_name.github.io。这个文件夹以后也统称为站点根目录。</p>\n</li>\n<li><p>初始化站点根目录</p>\n<p>  使用以下命令初始化文件夹，Hexo会在指定的这个站点根目录中创建所需要的文件。然后进入到此文件夹下，安装npm所依赖的库文件。</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ mkdir &lt;folder&gt;  #创建站点根目录</span><br><span class=\"line\">$ cd &lt;folder&gt;  #进入到站点根目录</span><br><span class=\"line\">$ hexo init &lt;folder&gt;  #使用Hexo初始化站点根目录</span><br><span class=\"line\">$ npm install  #安装npm所依赖的文件</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p>创建完成后的目录结构如下图：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/MVYlJA6NUnjCvIK.png\" alt=\"image.png\"></p>\n<p>先不着急分析每个目录是做什么的，博客此时已经创建好了，只需要在命令行输入以下命令（也先不用理会这两行命令的含义，后面会做解释），就可以在本地预览已生成的博客了。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo generate # 生成博客</span><br><span class=\"line\">$ hexo server # 本地预览</span><br></pre></td></tr></table></figure>\n<p>打开浏览器，在地址栏输入http://<span></span>localhost:4000，先看下此时的博客是什么样子的。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/HcVbMwNkrjRFquz.png\" alt=\"image.png\"></p>\n<p>此时，可以看到一个默认主题的博客已经生成了，并可以在本地访问它。但目前距离计划中的博客还存在一些差距，具体如下：</p>\n<ul>\n<li><p>博客的主题和样式并不是理想中的主题，需要选择合适的主题；</p>\n</li>\n<li><p>目前只能在本地访问，其他人还访问不到这个博客，需要将其部署到GitHubPages上；</p>\n</li>\n<li><p>通过个性域名来访问博客</p>\n</li>\n</ul>\n<h2 id=\"Hexo生成站点目录结构\"><a href=\"#Hexo生成站点目录结构\" class=\"headerlink\" title=\"Hexo生成站点目录结构\"></a><strong>Hexo生成站点目录结构</strong></h2><hr>\n<p>在完成以上还未完成的目标前，回到上一节还未解释的目录结构。在了解了目录结构中每个文件夹的含义及作用后，才能更好地来改造它，达成以上目标。</p>\n<p>我们再来看一下这个目录结构，命令行打印出来：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/BX7HboYGOiycnlJ.png\" alt=\"image.png\"></p>\n<p>细心的你可能已经发现，此时的文件目录下比之前多出来一个文件夹public/和一个文件db.json。执行了hexo generate和hexo server这两步操作产生了public/文件夹和db.json文件。实际上，正是在执行了hexo generate命令之后，将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件。下面来介绍一下使用Hexo生成的跟站点目录结构。</p>\n<h3 id=\"config-yml\"><a href=\"#config-yml\" class=\"headerlink\" title=\"config.yml\"></a><strong>config.yml</strong></h3><p>_config.yml是整个博客的配置文件，至于每项配置参数可以**<a href=\"https://hexo.io/zh-cn/docs/configuration\">Hexo官网文档</a>**有详细的介绍。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/1rot7Y4eUhSKJ68.png\" alt=\"image.png\"></p>\n<p>目前博客只能在本地浏览，还没有部署GitHubPages上。将博客发布到GitHubPages最直接的方式：使用git将本地博客文件夹关联到GitHub的远程仓库，并且把本地文件push到对应的仓库中。Hexo提供了一种更简便地方式，只需要在_config.yml中作相应的配置，通过命令行命令就可以很方便地把静态文件部署到对应的仓库中。</p>\n<p>打开根站点文件夹下的_config.yml博客配置文件，在deployment配置项下设置如下参数：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: git@github.com:yourname&#x2F;yourname.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n<p>安装以下插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-deployer-git —save</span><br></pre></td></tr></table></figure>\n<p>执行以下命令发布本地博客到远程仓库：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>然后在浏览器中输入GitHubPages的地址：<a href=\"https://your_github_name.github.io/\">your_github_name.github.io</a> ，你会发现刚才你在本地生成的博客已经可以在互联网上访问到了。但此时使用的依然是GitHub加仓库名称的URL来访问博客，当输入我们自己的个性域名访问时发现还是404错误，因为此时还没有做域名的解析配置，下一章节会具体讲解如果配置个性域名。</p>\n<h3 id=\"package-json\"><a href=\"#package-json\" class=\"headerlink\" title=\"package.json\"></a><strong>package.json</strong></h3><p>package.json是应用程序信息，打开此文件内容如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;name&quot;: &quot;hexo-site&quot;,</span><br><span class=\"line\">  &quot;version&quot;: &quot;0.0.0&quot;,</span><br><span class=\"line\">  &quot;private&quot;: true,</span><br><span class=\"line\">  &quot;scripts&quot;: &#123;</span><br><span class=\"line\">    &quot;build&quot;: &quot;hexo generate&quot;,</span><br><span class=\"line\">    &quot;clean&quot;: &quot;hexo clean&quot;,</span><br><span class=\"line\">    &quot;deploy&quot;: &quot;hexo deploy&quot;,</span><br><span class=\"line\">    &quot;server&quot;: &quot;hexo server&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;hexo&quot;: &#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;4.2.0&quot;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;hexo&quot;: &quot;^4.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-archive&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-category&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-index&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-generator-tag&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-ejs&quot;: &quot;^1.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-stylus&quot;: &quot;^1.1.0&quot;,</span><br><span class=\"line\">    &quot;hexo-renderer-marked&quot;: &quot;^2.0.0&quot;,</span><br><span class=\"line\">    &quot;hexo-server&quot;: &quot;^1.0.0&quot;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>一个json文件，可以得到hexo的版本信息，所有安装的依赖程序。并且在scripts字段下发现了几个刚才执行的命令，其实之前执行的几个命令实际是执行了对应的脚本。以下列出了Hexo中最重要的几个命令及其缩略形式，记住以下几个命令，就可以基本完成Hexo的操作。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean  &#x3D; hexo c # 清除本地缓存，也就是清除public&#x2F;文件夹和db.json文件。</span><br><span class=\"line\"></span><br><span class=\"line\">hexo generate &#x3D; hexo g # 将souce文件夹下的Markdown和HTML文件解析到了public文件夹下，并生成了db.json文件</span><br><span class=\"line\"></span><br><span class=\"line\">hexo server &#x3D; hexo s # 开启本地调试模式</span><br><span class=\"line\"></span><br><span class=\"line\">hexo deploy &#x3D; hexo d # 将本地资源部署到GithubPages</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"scaffolds\"><a href=\"#scaffolds\" class=\"headerlink\" title=\"scaffolds\"></a><strong>scaffolds</strong></h3><p>scaffolds是模板文件夹，当创建新的文章时，Hexo会根据scaffold里的不同模板来建立文件。什么意思呢？当使用Hexo新建一篇文章时使用的命令是:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new [layout] &lt;title&gt;    </span><br></pre></td></tr></table></figure>\n<p>一般都会忽略[layout]可选参数，此时默认为post，也可以通过_config.yml中的default_layout参数来指定默认布局。</p>\n<p>继续打开此文件夹，发现有三个.md文件：</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/3suvYOcgjaFA7XR.png\" alt=\"image.png\"></p>\n<p>其实这是Hexo的三种默认布局post、page和draft。使用Hexo创建三种模板类型的文件时，被创建的文件会被保存到不同的路径。而我们自定义的其他布局和post相同，都会保存在source/_posts文件夹下。</p>\n<p><img data-src=\"https://i.loli.net/2020/07/29/wNsK7qJaMIGj8Ez.png\" alt=\"image.png\"></p>\n<p>由此可见其对应的保存路径关系如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">布局</th>\n<th align=\"center\">路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">post</td>\n<td align=\"center\">source/_post</td>\n</tr>\n<tr>\n<td align=\"center\">page</td>\n<td align=\"center\">source/</td>\n</tr>\n<tr>\n<td align=\"center\">draft</td>\n<td align=\"center\">source/_draft</td>\n</tr>\n<tr>\n<td align=\"center\">自定义</td>\n<td align=\"center\">source/_post</td>\n</tr>\n</tbody></table>\n<p>关于模板及文章发布相关的详细知识点建议您参考**<a href=\"https://hexo.io/zh-cn/docs/writing\">官网文档</a>**。</p>\n<h3 id=\"source\"><a href=\"#source\" class=\"headerlink\" title=\"source\"></a><strong>source</strong></h3><p>source资源文件夹，是存放用户资源的地方。除post文件夹除外，开头以_（下划线）命名的文件/文件夹或隐藏文件都会在generate时被忽略。Markdown和HTML文件夹会被解析到public文件夹下，其它文件格式的文件会被直接拷贝过去。</p>\n<h3 id=\"themes\"><a href=\"#themes\" class=\"headerlink\" title=\"themes\"></a><strong>themes</strong></h3><p>themes是主题文件夹。Hexo会根据设置的主题来生成静态的页面，刚才说到<strong>使用Hexo init生成的初始化站点的主题可能并不是你预估的样子。Hexo提供了丰富的站点主题供你选择，现在先去官网提供的主题页面</strong>选取一个你喜欢的主题，下一章我们会讲解如何更换主题。</p>\n","categories":["技术"],"tags":["Hexo","GithubPages","博客"]}]